<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ben Brostoff</title>
    <description></description>
    <link>http://benbrostoff.github.io/</link>
    <atom:link href="http://benbrostoff.github.io//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Callbacks & Closures in JS with Brad Dayley</title>
        <description>&lt;p&gt;I recently purchased Brad Dayley&amp;rsquo;s book on the MEAN stack entitled &lt;a href=&quot;http://www.amazon.com/Node-js-MongoDB-AngularJS-Development-Developers/dp/0321995783&quot; target=&quot;_blank&quot;&gt; Node.js, MongoDB and AngularJS Web Development &lt;/a&gt; (there&amp;rsquo;s also a section on Express, for those wondering about the E).The book is fantastic and Dayley provides a &lt;a href=&quot;https://github.com/bwdbooks/nodejs-mongodb-angularjs-web-development&quot; target=&quot;_blank&quot;&gt; GitHub repo &lt;/a&gt; with the code for all the exercises covered in the book.&lt;/p&gt;

&lt;p&gt;I have always struggled with the idea of callbacks and closures in JavaScript, and fortunately, Dayley is up to the task of walking through them. Callbacks and closures are especially important in Node.js, which, unlike most web-servers (when Node is used as a web-server), is single-threaded and event driven. To use an extended analogy provided in the book, if Node were the host of a party, it would speak to all guests individually and remember to come back to certain conversations after it had attended to other conversations, whereas most web-servers would just chat with everyone at one time. Node&amp;rsquo;s ability to push events into the background and return to them can act as a powerful advantage.   &lt;/p&gt;

&lt;p&gt;The exercise Dayley uses to demonstrate is one that relies on the &lt;a href=&quot;http://nodejs.org/api/process.html#process_process_nexttick_callback&quot; target=&quot;_blank&quot;&gt; &lt;code&gt;process.nextTick()&lt;/code&gt; &lt;/a&gt; function native to Node. The function takes a callback and tells Node to execute the function on the next event loop. To return to the party analogy, &lt;code&gt;process.nextTick()&lt;/code&gt; schedules conversations with guests only after &amp;ldquo;earlier&amp;rdquo;&amp;ldquo; scheduled conversations have been attended to. I have tried to visually depict these loops in the console in the code below (which is almost wholly copied from Dayley&amp;rsquo;s &lt;a href=&quot;https://github.com/bwdbooks/nodejs-mongodb-angularjs-web-development/blob/master/ch04/callback_closure.js&quot; target=&quot;_blank&quot;&gt; exercise &lt;/a&gt;, with some minor alterations):&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/e4e619df6d4ecbb2f436.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The code above iterates twice through an array of three cars and logs the cars to the console. The key difference here is &lt;i&gt; when &lt;/i&gt; the execution of the function &lt;code&gt;logCar()&lt;/code&gt; nested in the loop in 11-17 occurs, versus the function &lt;code&gt;wrapperFn()&lt;/code&gt; nested in the loop in 19-28. &lt;code&gt;wrapperFn()&lt;/code&gt; calls &lt;code&gt;logCar()&lt;/code&gt; and &amp;quot;wraps&amp;rdquo; around it - hence the name. &lt;/p&gt;

&lt;p&gt;The wrapper function here makes all the difference. The callback in &lt;code&gt;logCar()&lt;/code&gt; is destined not to execute until the second event loop in the program because it is wrapped in the aforementioned &lt;code&gt;process.nextTick()&lt;/code&gt;. Thus, &amp;ldquo;first loop&amp;rdquo; events, like the for loops that begin in 11 and 19,  will occur prior to the callback. &lt;/p&gt;

&lt;p&gt;Because the execution of the callback must occur after the for loops are complete, the only way all the cars can get logged to the console is if the variables passed in as parameters each uniquely represent the three cars. &lt;/p&gt;

&lt;p&gt;In 11-17, the &lt;code&gt;message&lt;/code&gt; parameter &lt;code&gt;logCar()&lt;/code&gt; takes on 13 will appear in the anonymous function always as the final element in the car array: Bugatti. The variable &lt;code&gt;message&lt;/code&gt; serving as the parameter in &lt;code&gt;logCar()&lt;/code&gt; is changing each time through the loop, and by the time the anonymous function uses it on the second event loop, the variable is equal to the final element in the array. In closure terms, &lt;code&gt;logCar()&lt;/code&gt; is the parent function of the anonymous function, and the parameter it passes to the anonymous function changes twice; however, since the callback executes on the second event loop, it is doomed to grab the parameter after the final iteration.&lt;/p&gt;

&lt;p&gt;In contrast, the function &lt;code&gt;wrapperFn()&lt;/code&gt; in 21 does not let cars race by (excuse the pun), instead grabbing them and passing them along to its child functions in 27 when &lt;code&gt;wrapperFn()&lt;/code&gt; is called. As you can see visually via &amp;ldquo;PARAMETER PASSED 2: &amp;rdquo;, the message variable is being caught on the first event loop and saved in memory for the second event loop. &lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/-VQSw0iVAE1w/VAyfjUURN5I/AAAAAAAAAXY/0OA4CB01Q_8/w282-h458-no/Screen%2BShot%2B2014-09-07%2Bat%2B2.09.07%2BPM.png&quot; alt=&quot;callback_clos_output&quot; &gt;
&lt;/p&gt;

&lt;p&gt;The value of closures in this exercise was to close off certain variables from change and give the callback function the information it needed. Because Node (and JavaScript in general) relies heavily on events occurring at different points in time, closures are key to making sure the passage of time will not get in the way of what the programmer intended (at least the way I see it).&lt;/p&gt;

&lt;p&gt;Additionally, I realized while doing this exercise the importance of using closures in conjunction with callbacks to grab information from AJAX requests to bring such information to the client-side. As AJAX requests by definition occur asynchronously, they represent a perfect situation for implementing closures and callbacks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bsusensjackson/&quot; target=&quot;_blank&quot;&gt; Brendan Susens-Jackson&lt;/a&gt;, who I worked with on a side project called &lt;a href=&quot;http://ready-reader.herokuapp.com/&quot; target=&quot;_blank&quot;&gt;ReadyReader&lt;/a&gt;, originally explained this idea to me and put it to work on our application. The source code can be found &lt;a href=&quot;https://github.com/woodchucks-2014/ReadyReader&quot;&gt; here&lt;/a&gt;. Brendan helped edit this post, so hats off to him :-).  &lt;/p&gt;
</description>
        <pubDate>Sat, 06 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/09/06/Closures-in-JS-from-Brad-Dayley/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/09/06/Closures-in-JS-from-Brad-Dayley/</guid>
      </item>
    
      <item>
        <title>Querying in Mongo with Node</title>
        <description>&lt;p&gt;I&amp;rsquo;m in the midst of taking an online course using &lt;a href=&quot;http://www.mongodb.org/&quot; target=&quot;_blank&quot;&gt; MongoDB&lt;/a&gt; through Mongo&amp;rsquo;s online university entitled &lt;a href=&quot;https://university.mongodb.com/courses/10gen/M101JS/2014_Aug/syllabus&quot; target=&quot;_blank&quot;&gt; MongoDB for Node.js Developers&lt;/a&gt; and thought I&amp;rsquo;d share a few insights here. &lt;/p&gt;

&lt;p&gt;As background, MongoDB is a NoSQL database that is open-source and used by the likes of BuzzFeed, BusinessInsider, Disqus, Expedia, LinkedIn, Sailthru, Electronic Arts, Under Armour, CERN and a growing list of &lt;a href=&quot;https://www.mongodb.org/about/production-deployments/&quot; target=&quot;_blank&quot;&gt; others&lt;/a&gt;. The advantages of NoSQL over SQL frameworks are largely scalabity and performance related. As the name implies, NoSQL databases are schemaless and do not have to work over numerous tables - instead, they generally use documents (similar to a JSON object in Mongo&amp;rsquo;s case) in place of rows and deep embedding inside documents in place of joins. Notably, the aforementioned companies in many cases still use relational databases, as SQL is still thought to be more usable as database complexity ramps up. &lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t profess to have a view on either (Ian White in 2009 laid out the case for Mongo / NoSQL quite nicely &lt;a href=&quot;http://www.businessinsider.com/how-we-use-mongodb-2009-11&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;), but believe it&amp;rsquo;s important to learn more about both paradigms and form a view over time. In the words of John Carmack: &lt;/p&gt;

&lt;blockquote&gt;If you aren&amp;rsquo;t sure which way to do something, do it both ways and see which works better.&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot;&gt; Node.js &lt;/a&gt; is a JavaScript-based platform that, among other things, facilitates building of web applications. Node is built on V8 (Google&amp;rsquo;s open source JavaScript framework) and part of the ever-increasing body of tools and frameworks that utilize JavaScript. &lt;/p&gt;

&lt;p&gt;I want to cover a basic querying exercise here included in the aforementioned MongoDB course (if you feel so inclined to follow along from here, the below assumes you have Mongo and Node installed). &lt;/p&gt;

&lt;p&gt;In short, I want to provide some possible answers to the following question:&lt;/p&gt;

&lt;blockquote&gt;Given a large CSV file, how would you use MongoDB and Node to import the CSV into Mongo and query it using Mongo in combination with Node?&lt;/blockquote&gt;

&lt;p&gt;Mongo asks you to do exactly that in their online course, where they&amp;rsquo;ve provided a CSV file full of state-based weather and wind data for one month for Vermont, California, Florida and New Mexico. The CSV contains the temperature, wind speed and various other facts for every single hour for each state over the course of one month. &lt;b&gt;The ask here is to add a boolean field to the database showing whether the temperature recorded in the state was a month high.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Before we can begin narrowing down the data based on state and temperature, we have to import it into Mongo in full. The Mongo docs are an excellent place to start and have step-by-step instructions &lt;a href=&quot;http://docs.mongodb.org/manual/reference/program/mongoimport/&quot; target=&quot;_blank&quot;&gt;for importing CSV files &lt;/a&gt; using the Mongo shell (which can be accessed from the command line via the command &lt;code&gt;mongo&lt;/code&gt;). Here&amp;rsquo;s how I imported the weather data Mongo provided:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-5IPDMkSr1Ys/U_yzY0KzWzI/AAAAAAAAAUI/JkoTYXE8JY4/w607-h92-no/Screen%2BShot%2B2014-08-26%2Bat%2B12.18.21%2BPM.png&quot; alt=&quot;mongo_data&quot; &gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;mongoimport&lt;/code&gt; command and relevant arguments here tell Mongo to construct a database called &lt;code&gt;state_weather&lt;/code&gt; with a collection named &lt;code&gt;data&lt;/code&gt; that has the attributes in the CSV header (Day, Time, State, etc.). The two lines below the command confirm the import was successful and that I now have a database with 2,963 &amp;ldquo;rows&amp;rdquo; (recall, these are documents / objects in Mongo). &lt;/p&gt;

&lt;p&gt;You can fool around with the data by using the relevant database and running queries in the shell. For those familiar with Rails, this achieves the same purpose as running &lt;code&gt;rails c&lt;/code&gt; in a Rails project and is useful for exploring your database. If I wanted to see the first entry imported, I&amp;rsquo;d do the following:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-uXIWtoF6Kfo/U_y0qfhh01I/AAAAAAAAAU0/fjcwYmH6jfk/w435-h343-no/Screen%2BShot%2B2014-08-26%2Bat%2B12.23.23%2BPM.png&quot; alt=&quot;mongo_query&quot;&gt;
&lt;/p&gt;

&lt;p&gt;With the database populated, we can begin writing a Node program that will log our desired results to the terminal (better yet, you could log them to your browser, but I&amp;rsquo;ll save that for another time). &lt;/p&gt;

&lt;p&gt;Importantly, you can create variables holding documents in Mongo referred to as cursors. Cursors are easy to iterate through and make code more readable when in Node. In the below example, I create a cursor which has the database data imported previously sorted first by state name and then by temperature. &lt;/p&gt;

&lt;p&gt;Sorting data in Mongo can be achieved through the use of a cursor and the use of the &lt;a href=&quot;http://docs.mongodb.org/manual/reference/method/cursor.sort/&quot; target=&quot;_blank&quot;&gt; &lt;code&gt;sort&lt;/code&gt; method &lt;/a&gt;, which can be called on a cursor (note that I&amp;rsquo;m now out of the Mongo shell and working in Node - if you want to follow along with all the code, see my &lt;a href=&quot;https://github.com/BenBrostoff/Mongo-and-Node-Example&quot; target=&quot;blank&quot;&gt; GitHub repo&lt;/a&gt;, also linked at the bottom of this post).:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/1dc63a0d77649f73a02e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;What&amp;rsquo;s nice about Mongo is that passing in an array to sort will sort based on the order of the array - in this case, we sort first by alphabetical order and then by temperature. Now that all 2,963 documents are sorted, I can iterate through the cursor and pull out the first entry for each state. I know that this entry represents the month high because of how the cursor was sorted. Every time the state chages, we&amp;rsquo;ll arrive at the new month high and can add a key-value pair to each document accordingly. This addition of the key-value pairs occurs in the database using the &lt;a href=&quot;http://docs.mongodb.org/manual/reference/method/db.collection.update/&quot; target=&quot;_blank&quot;&gt; &lt;code&gt;update&lt;/code&gt; method &lt;/a&gt; in Mongo. &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/3c723f970997a707c5a0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you&amp;rsquo;ll see above, a number of Mongo database methods as they appear in Node take callbacks wherein the parameters you pass in are errors, documents and other related arguments. This in part allows for useful logging of error messages and other information. Further, when executing Mongo functions in Node, it&amp;rsquo;s necessary to close out of the database to avoid iterating over empty entries; that&amp;rsquo;s the purpose of lines 3-5 above. &lt;/p&gt;

&lt;p&gt;Finally, with the data modified as desired, we can revise the cursor to only include entries that were month-highs and then iterate and log to the console:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/513873bb0ac012145385.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The resulting output is below:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-ykdOSUGFR74/U_zZsKjOemI/AAAAAAAAAVw/RXrxYxQoxWY/w558-h82-no/Screen%2BShot%2B2014-08-26%2Bat%2B3.00.52%2BPM.png&quot; alt=&quot;output&quot; &gt;
&lt;/p&gt;

&lt;p&gt;I found the experience of doing this exercise significantly different from my work in a relational database (where I mostly have used Postgres and ActiveRecord as an ORM). As Ian White notes in the previously linked post, it&amp;rsquo;s nice to write less abstracted code using Mongo than you would in an ORM. Additionally, the process of writing raw SQL (in the few scenarios you might do so) is often drawn out and frustrating; the &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; and other methods Mongo gives you make querying and altering documents relatively easy compared to &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;WHERE&lt;/code&gt;, &lt;code&gt;HAVING&lt;/code&gt;, etc. in SQL. &lt;/p&gt;

&lt;p&gt;Yet, the relative simplicity of this exercise makes it hard to reason about Mongo&amp;rsquo;s limitations. For instance, how would Mongo deal with &lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html#polymorphic-associations&quot; target=&quot;_blank&quot;&gt; polymorphic relationships &lt;/a&gt;? I am very much interested in using Mongo on a large-scale project that would have a complex schema in SQL land. &lt;/p&gt;

&lt;p&gt;Once I&amp;rsquo;ve given that a try, maybe I&amp;rsquo;ll have a better idea on which works better.&lt;/p&gt;

&lt;p&gt;** &lt;i&gt;B.N. I posted a &lt;a href=&quot;https://github.com/BenBrostoff/Mongo-and-Node-Example&quot; target=&quot;_blank&quot;&gt; small GitHub repo &lt;/a&gt; for those interested in fooling around with the data and seeing my solution in full.&lt;/i&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/08/26/querying-in-mongo-with-node+copy/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/08/26/querying-in-mongo-with-node+copy/</guid>
      </item>
    
      <item>
        <title>Isolation v. Collaboration</title>
        <description>&lt;p&gt;Amidst the great literature of work productivity and self-help books and &lt;a href=&quot;https://twitter.com/HarvardHBS&quot; target=&quot;_blank&quot;&gt;HBS informational nuggets &lt;/a&gt;, I&amp;rsquo;ve found myself at a loss recently to answer a very basic question:&lt;/p&gt;

&lt;blockquote&gt; Do I produce higher quality and more inspired work in isolation or in collaborating with others? &lt;/blockquote&gt;

&lt;p&gt;This question is admittedly personal and no doubt differs based on (i) the individual and (ii) the nature of the individual&amp;rsquo;s work. Additionally, (i) and (ii) are always changing. Who we are and what we do is constantly in flux, so consequently I would assume that the conditions that lead to our best work are also always in flux.&lt;/p&gt;

&lt;p&gt;My dad is a phychiatrist and I am familiar with the basics of Erik Erikson&amp;rsquo;s stages of &lt;a href=&quot;http://en.wikipedia.org/wiki/Erikson%27s_stages_of_psychosocial_development#Love:_Intimacy_vs._Isolation_.28Young_adulthood.2C_20-24.2C_or_20-39_years.29&quot; target=&quot;_blank&quot;&gt;psychosocial development&lt;/a&gt; &lt;i&gt; (N.B. I found Wiki to be a good overview here, but in no way I do endorse it as an accurate representation of Erikson&amp;rsquo;s beliefs &lt;/i&gt;). These stages as articulated by Erikson I view as relevant to my question because they touch on other questions with relevance to the one at hand. In reviewing them for this post, I would argue my question falls somewhere in between Intimacy v. Isolation (&amp;ldquo;Can I Love?&amp;rdquo;, via Wiki) and Generativity v. Stagnation (&amp;ldquo;Can I Make My Life Count?&amp;rdquo;, via the same). &lt;/p&gt;

&lt;p&gt;Whether collaboration improves work output I think depends on &amp;ldquo;where&amp;rdquo; the individuals collaborating are in the Intimacy v. Isolation stage. Collaboration on large-scale projects are difficult enough - I recommend &lt;a href=&quot;http://www.newyorker.com/magazine/2014/03/03/a-star-in-a-bottle&quot; target=&quot;_blank&quot;&gt; Raffi Khatchadourian&amp;rsquo;s New Yorker article&lt;/a&gt; on the &lt;a href=&quot;http://www.iter.org/&quot; target=&quot;_blank&quot;&gt; International Thermonuclear Experimental Reactor &lt;/a&gt; as evidence. This difficulty would only be enhanced by individuals tentative about forming the type of alliances necessary to collaborate on highly complex projects. &lt;/p&gt;

&lt;p&gt;The Generativity v. Stagnation stage I see as equally important in determining the value of individuals working alone versus working together. Individuals likely to collaborate are ones who see the same type of work as meaningful. In turn, individuals who see their work as meaningful are far more likely to be motivated in moving beyond surface differences (e.g. personality clashes, compensation discrepancies, cultural biases, etc.) to produce high-quality work. &lt;/p&gt;

&lt;p&gt;A modified version of this idea gets thrown around a lot in discussion of &amp;ldquo;high-stakes&amp;rdquo; scenarios, where the argument is people are &amp;ldquo;forced&amp;rdquo; to work together when the stakes are high enough. I think this theory is wrong in that it attempts to attach the word &amp;ldquo;stakes&amp;rdquo; to an &lt;a href=&quot;https://www.youtube.com/watch?v=MqAJ5W2wQH4&quot; target=&quot;blank&quot;&gt; arbitrary spectrum&lt;/a&gt;. One man&amp;rsquo;s stakes are not another&amp;rsquo;s. &lt;/p&gt;

&lt;p&gt;However, I agree that individuals who value a project equally and are invested in its success will have fewer hurdles in working together than unaligned individuals. As a result, Generativity v. Stagnation in my mind sits together with Intimacy v. Isolation at the heart of the question I originally posed.&lt;/p&gt;

&lt;p&gt;My thoughts on these two stages fueled an internal debate I had on working in isolation versus working collaboratively. I have attempted to recount my thoughts as best I can below (the blanket claims you see below are made on purpose - because these claims reflect my thoughts). These thoughts are grouped according to key words that broadly represent my thinking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Insight&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Isolation&lt;/i&gt; - Insight most commonly occurs alone in a state of deep and isolated focus. Introducing others to the insight process creates risk to new insights because of the potential for groupthink and general distraction.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Collaboration&lt;/i&gt; - Individuals working in concert inspire eachother by introducing viewpoints that would not have been introduced had they all worked alone. Further, insights that veer from logic and reason are checked by groups who work together (alternatively, groups may refute insights that do not appear on the surface to be logical and reasoned, but actually are upon closer observation).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Understanding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt; Isolation &lt;/i&gt; - Individuals learn at radically different paces and through different mechanisms, and the uniqueness of everyone&amp;rsquo;s learning process calls for isolation when learning new material.&lt;/p&gt;

&lt;p&gt;&lt;i&gt; Collaboration &lt;/i&gt; - The above is true, and that&amp;rsquo;s why individuals need to collaborate. The average pace of collective learning is &amp;ldquo;faster&amp;rdquo; when &amp;ldquo;faster&amp;rdquo; learners can work with &amp;ldquo;slower&amp;rdquo; ones (&lt;i&gt;N.B. I think fast and slow have an infinite amount of meanings with respect to the word learning, and the quotes are meant to say as much&lt;/i&gt;). &amp;ldquo;Faster&amp;rdquo; learners also are not harmed by teaching just-learned info, as it may lead them to develop deeper understanding of the information as well as correct themselves when their initial understanding may have been flawed. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leadership&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt; Isolation &lt;/i&gt; - We have no option of appealing to someone else or seeking group consensus when in isolation. Individuals are compelled to promote themselves the arbiter of their own values. Questions like &amp;ldquo;Is this good?&amp;rdquo; and more importantly &amp;ldquo;Is this good enough?&amp;rdquo; are purely decided by the individual.&lt;/p&gt;

&lt;p&gt;&lt;i&gt; Collaboration &lt;/i&gt; - A friend recently recommended Dave Hoover&amp;rsquo;s &lt;a href=&quot;http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382&quot; target=&quot;_blank&quot;&gt; Apprenticeship Patterns&lt;/a&gt; and noted that Hoover discusses at length how important it is for young engineers to take on leadership roles in groups as early as possible. Taking on such leadership roles - even if these roles occur on projects that require limited technical expertise - encourages &amp;ldquo;new&amp;rdquo; leaders to see the benefits of a pro-active approach and oftentimes inspires confidence in their own ability to generate valuable ideas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meaning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt; Isolation &lt;/i&gt; - Formative experiences are made meaningful by having these experiences alone. I watched an incredible &lt;a href=&quot;https://www.youtube.com/watch?v=N0x9gApvuGo&quot; target=&quot;_blank&quot;&gt; documentary &lt;/a&gt; of Albert Einstein on the History Channel a while back that in some respects attempts to argue his unique thinking process was fostered by not being a part of the academic community while working as a patent clerk. Einstein could engage in thought experiments for as long as he pleased in part because he did not have the pressures and responsibilities of a collaborative work environment (consider how often in collaborative work environments you have to relate exactly what you&amp;rsquo;re doing to your collaboraters and show output where output may not exist). &lt;/p&gt;

&lt;p&gt;&lt;i&gt; Collaboration &lt;/i&gt; - Experience has a different type of meaning if we cannot compare, contrast or share it with our peers. Michael Finkel&amp;rsquo;s story &lt;a href=&quot;http://www.gq.com/news-politics/newsmakers/201409/the-last-true-hermit&quot; target=&quot;_blank&quot;&gt; on Christopher Thomas Knight &lt;/a&gt; has garnered a lot of attention this week because (I think) the idea of living in a self-contained vacuum for two plus decades is unfathomable to most human beings. Shared memories, as well as memories that allow us to connect with people, have a different meaning than individual memories, and that in part I think accounts for some of the strong reaction to the story. It would be difficult for most people, myself included, to produce quality work if I did not have that opportunity to share with and collaborate with other people on such work. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accountability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt; Isolation &lt;/i&gt; - Individuals can create an impossibly high standard for themselves, and I think that&amp;rsquo;s in part a good thing. David Halberstam&amp;rsquo;s &lt;a href=&quot;http://www.amazon.com/Playing-Keeps-Michael-Jordan-World/dp/0767904443&quot; target=&quot;_blank&quot;&gt;Playing for Keeps&lt;/a&gt; is my favorite Jordan (and 90s Bulls) biography. My main takeaway from that book is how Jordan created imaginary enemies in order to fuel his drive for on-court success. I consider this strategy a form of self-accountability, as Jordan made himself accountable for defeating his enemies (real or created) at all costs.&lt;/p&gt;

&lt;p&gt;&lt;i&gt; Collaboration &lt;/i&gt; - Alternatively, individuals can deliver parts of themselves to broader group culture, such that cultures become the mixture of many different individuals. Whether groups actually naturally select and reject the best and worst parts of individual cultures is up for debate. &lt;/p&gt;

&lt;p&gt;Yet, accountability in a group environment likely forces people to be accountable for things they wouldn&amp;rsquo;t have thought to be accountable for in an isolated environment. To use the above example, Phil Jackson no doubt passed on the Zen-loving aspects of himself to the aforementioned 90s Bulls teams, and in doing so probably encouraged the members of these teams to feel a spiritual accountability (e.g. meditate every day) different than the Jordanian vision of accountability (e.g. physically train beyond your comfort zone).&lt;/p&gt;

&lt;p&gt;To those still reading - I have no grand conclusion or formula on how to produce your best work. I have given thought throughout this post as to &lt;i&gt;why&lt;/i&gt; isolation or collaboration &lt;i&gt;could&lt;/i&gt; improve individual performance. And I cannot help but believe performance is enhanced through both individual and collaborative environments - disproportionately working in either one seems to me to be ill-advised, as both can deliver so many unique benefits.&lt;/p&gt;

&lt;p&gt;Additionally, working in both I surmise is in line with Erikson&amp;rsquo;s ideas about confronting new challenges over time that pave the way for more self-debate.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/08/24/isolation-v-collaboration/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/08/24/isolation-v-collaboration/</guid>
      </item>
    
      <item>
        <title>Open-Source Everything**</title>
        <description>&lt;blockquote&gt;He published his first novel, &lt;a href=&quot;http://www.amazon.com/Pebble-Sky-Isaac-Asimov/dp/0765319136&quot; target=&quot;_blank&quot; &gt;Pebble in the Sky&lt;/a&gt;, in 1950. An immensely prolific author who penned nearly 500 books, he published influential sci-fi works like &lt;a href=&quot;http://www.amazon.com/I-Robot-The-Series/dp/0553294385&quot; target=&quot;_blank&quot;&gt; I, Robot &lt;/a&gt; and the &lt;a href=&quot;http://www.amazon.com/Foundation-Isaac-Asimov/dp/0553293354&quot;&quot; target=&quot;_blank&quot;&gt; Foundation trilogy&lt;/a&gt;, as well as books in a variety of other genres. Asimov died in New York City on April 6, 1992.&lt;/blockquote&gt;

&lt;p&gt;&lt;center&gt; - &lt;a href=&quot;http://www.biography.com/people/isaac-asimov-9190737#synopsis&quot; target=&quot;_blank&quot;&gt; Isaac Asimov biography&lt;/a&gt;, via biography.com &lt;/center&gt; &lt;/p&gt;

&lt;p&gt;I read a similar short bio of Asimov in a paperback copy of &lt;a href=&quot;http://www.amazon.com/Atom-Journey-Across-Subatomic-Cosmos/dp/0452268346&quot; target=&quot;_blank&quot;&gt; Atom: Journey Across the Subatomic Cosmos &lt;/a&gt;, which pegged his book output at 475. I was not aware at that point that Asimov lived only to 72, meaning from 1950 on he was writing, on average, 11 books per year. Had Asimov made it a decade more, it&amp;rsquo;s likely he could have authored another 100+ - one need only look at writers like Philip Roth, who did some of his best work through his 70s (he has since &lt;a href=&quot;http://www.theparisreview.org/blog/2012/11/13/in-which-philip-roth-announces-his-retirement-in-english/&quot;target=&quot;_blank&quot;&gt;&amp;ldquo;retired&amp;rdquo;&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;Producing inspirational and field-changing material over an extended time period I believe represents the pinnacle of human achievement. I also view the production of this type of content as among the only reasons to roll out of bed in the first place. Faulkner (as per usual) &lt;a href=&quot;http://www.nobelprize.org/nobel_prizes/literature/laureates/1949/faulkner-speech.html&quot; target=&quot;_blank&quot;&gt; probably said it best &lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt; I believe that man will not merely endure: he will prevail. He is immortal, not because he alone among creatures has an inexhaustible voice, but because he has a soul, a spirit capable of compassion and sacrifice and endurance. 
&lt;br&gt;&lt;/br&gt;
&lt;b&gt;The poet&amp;rsquo;s, the writer&amp;rsquo;s, duty is to write about these things&lt;/b&gt;. It is his privilege to help man endure by lifting his heart, by reminding him of the courage and honor and hope and pride and compassion and pity and sacrifice which have been the glory of his past. The poet&amp;rsquo;s voice need not merely be the record of man, it can be one of the props, the pillars to help him endure and prevail. &lt;/blockquote&gt;

&lt;p&gt;I believe this duty does not merely fall to the poet or writer. I see it as cutting across every profession. The only means humans have of preserving knowledge, at present, is through persisting forms of spoken or written communication (audio, &lt;a href=&quot;http://benbrostoff.herokuapp.com/&quot; target=&quot;_blank&quot;&gt;video&lt;/a&gt;, essays, &lt;a href=&quot;http://www.buzzfeed.com/benbrostoff/ai-is-not-a-threat-to-humanity-wi2m&quot; target=&quot;_blank&quot;&gt;listicles&lt;/a&gt;, etc.).&lt;/p&gt;

&lt;p&gt;To this end, I encourage myself and my non-existent readers to open-source &amp;ldquo;everything&amp;rdquo;, with the obligatory caveats. And what exactly are the obligatory caveats?&lt;/p&gt;

&lt;p&gt;I believe there are forms and of art and science that depend on work being proprietary. Art and science may in some cases be inspirational and innovation-breeding to the extent that the methods behind the related work are not revealed immediately to a large audience. I do not have scientific or factual reasons for believing this (inspiration it seems to me will forever defy an easy proof). But perhaps a few anecdotal examples may be useful here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Football&lt;/b&gt; - the NFL&amp;rsquo;s best teams enshrine themselves in secrecy and change signals / playbooks on a week to week basis (same really for all the major sports - the NFL to me just seems the most apparent). &lt;a href=&quot;http://grantland.com/features/chip-kelly-philadelphia-eagles-nfl-influence/&quot; target=&quot;_blank&quot;&gt; This recent Grantland article &lt;/a&gt; on Chip Kelly by Chris Brown serves as strong evidence of the ongoing arms race in the NFL to find the most effective strategies for success. There is a strong track record in the NFL of teams disagreeing on what constitutes best practice / best strategy, and the resulting different types of play is what I believe makes the league so great. Were every team to open-source every aspect of its gameplan / strategy / etc., I would contend Sundays would be materially worse. For one, we would be robbed of some incredible &lt;a href=&quot;https://www.youtube.com/watch?v=nZ3kli_EST8&quot; target=&quot;_blank&quot;&gt;Peyton Manning v. defense audible battles&lt;/a&gt; (as teams would presumably know all his signals ahead of time).   &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Phones&lt;/b&gt; - The sheer number of different types of phones from different companies to me is the best evidence that not open-sourcing technology is breeding art and innovation. Moreover, in iOS v. Android, we have a good working example of non-open-source v. open-source competition, and it&amp;rsquo;s not clear at this point who is &amp;ldquo;winning&amp;rdquo;. The Apple perspective as depicted in &lt;a href=&quot;http://www.amazon.com/Steve-Jobs-Walter-Isaacson/dp/product-description/1451648537&quot; target=&quot;_blank&quot;&gt; Walter Isaacson&amp;rsquo;s biography of Steve Jobs &lt;/a&gt; seems to be that control over a product by a small group of people can lead to more sensible and efficent decisions. I think it is difficult to refute this point, but Apple still in a sense is &amp;ldquo;open-sourcing&amp;rdquo; its work on iOS since there is (presumably) a large amount of documentation of iOS technologies within Apple (i.e. restricted to a subset of Apple employees) that would make it replicable (more on this point later). Additionally, Apple &amp;ldquo;gives&amp;rdquo; programmers more time to work on other open-source projects by not open-sourcing iOS, meaning there is some opportunity cost benefit to not open-sourcing everything (i.e. we don&amp;rsquo;t have a limitless array of options of projects to work on - although we really do in one human lifetime). &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These examples to me also suggest that we need to rethink how we use the word open-source. The Patriots defense and the source code for iOS actually are open-source in the sense that the Patriots coaching staff and Apple&amp;rsquo;s engineers have access to and can contribute to each product. Ex- Pats staffers and Apple engineers likely have open sourced parts of their former organization&amp;rsquo;s work when they relocated to new organizations. I&amp;rsquo;m not quite sure where on the spectrum of &amp;ldquo;open-sourcedness&amp;rdquo; is the optimal point for maximum inspiration and innovation. There is no definite proof to suggest that more &amp;ldquo;open-sourced&amp;rdquo; is better than more &amp;ldquo;closed-sourced&amp;rdquo;. &lt;/p&gt;

&lt;p&gt;The semantics here I see as less important than the fact that information is well-documented and passed on through generations. I believe it is a worthy goal for myself to try to leave behind as many valuable and persistent contributions that breed inspiration and innovation as I can. &lt;/p&gt;

&lt;p&gt;For the most lucky of us, that&amp;rsquo;s about four decades to create value. Asimov hardly wasted a single second. The clock is always ticking. &lt;/p&gt;
</description>
        <pubDate>Sun, 17 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/08/17/open-source-everything/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/08/17/open-source-everything/</guid>
      </item>
    
      <item>
        <title>A Highly Entertaining Spat</title>
        <description>&lt;p&gt;Mommy and Daddy have been fighting lately in the Twitter equivalent of the Brostoff household. I woke up this morning to the following:  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-1C_VnO7KC2A/U-SigyQvE6I/AAAAAAAAAOs/AtuDreRZVlA/w582-h161-no/edm_v_pmarca.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Before we go any further - there&amp;rsquo;s no actual animosity here I&amp;rsquo;m sure, and I think all this tweeting is in good jest. As background, the &lt;a href=&quot;http://epicureandealmaker.blogspot.com/&quot;&gt;Epicurean Dealmaker&lt;/a&gt; and &lt;a href=&quot;http://blog.pmarca.com/&quot;&gt;Marc Andreessen&lt;/a&gt; are two people I greatly admire and relate to as a former banker turned software engineer. I was a religious reader of EDM during my two years as an investment banker; I remember reading &lt;a href=&quot;http://online.wsj.com/news/articles/SB10001424053111903480904576512250915629460&quot;&gt;&amp;ldquo;Why Software Is Eating the World&amp;rdquo;&lt;/a&gt; in August 2011 in the WSJ, and Marc Andreeseen is at least part of the reason for the career change I recently made. &lt;/p&gt;

&lt;p&gt;So, I&amp;rsquo;ve taken a rather large interest in their mildy heated (lukewarm?) Twitter exchanges of late. I actually was in the middle of one of them:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-qL7auIEAKy4/U-SkIAPqISI/AAAAAAAAAPU/4XFpWhO9xjQ/w571-h527-no/me_pmarca.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;The particular feud I happened to get in the middle of started with a &lt;a href=&quot;http://epicureandealmaker.blogspot.com/2014/08/where-did-he-learn-to-negotiate-like.html&quot;&gt;blogpost&lt;/a&gt; EDM wrote on 8/2. The post suggests that Trulia - a real estate website - was mistreated by its former advisor, Qatalyst Partners. Trulia had originally engaged Qatalyst three years ago to negotiate the sale of the company to Zillow, and failed to legally end the engagment when the sale fell through at the time. EDM&amp;rsquo;s claim to me seems &lt;a href=&quot;http://dealbook.nytimes.com/2014/07/29/old-attempt-to-sell-trulia-rewards-ex-adviser-qatalyst-now/&quot;&gt;to have merit&lt;/a&gt;, as Qatalyst (i) charged Trulia off-market fees and (ii) likely destroyed &lt;a href=&quot;https://twitter.com/EpicureanDeal/status/496991408071643136&quot;&gt;Trulia shareholder value&lt;/a&gt; (albeit created Qatalyst shareholder value). &lt;/p&gt;

&lt;p&gt;In short, I read EDM&amp;rsquo;s argument on Qatalyst and found it to be extremely reasonable and well grounded. Because I agreed with the post, I by extension felt inclined to agree with EDM that two Qatalyst bankers - George Boutros and Frank Quattrone - perhaps did not have their clients&amp;#39; best interests at heart. I ended up eating my words because I tried to comment on a subject I was not qualified to comment on. I do not personally know either banker; Marc Andreessen has known each for twenty years, and was right to put me in my place.&lt;/p&gt;

&lt;p&gt;To my credit, however, I admitted my lack of knowledge on Frank Quattrone and George Boutros and earned some Twitter karma points:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-1C-MemfrB88/U-SlZDVkyLI/AAAAAAAAAP8/bQBslhx5D6M/w545-h290-no/Screen%2BShot%2B2014-08-08%2Bat%2B6.23.57%2BAM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;My banking idol has yet to do so - in part because he is qualified to comment on what he writes on - and thus, the @pmarca v. @EpicureanDeal Twitter wars wage on. I find this spat interesting because I believe it has deep roots in the way certain types of people view technological progress, specifically in our social-media dominated age. &lt;/p&gt;

&lt;p&gt;I think in general that people who do not work in a tech-related industry tend to believe that a large portion of the &amp;ldquo;value&amp;rdquo; tech contributes to the world economy is in the form of social media value. Social media is prevalent enough to annoy EDM:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-1ztc8RB2sdY/U-SrsMe23XI/AAAAAAAAARY/bkjq0HPt76M/w553-h280-no/Screen%2BShot%2B2014-08-08%2Bat%2B6.50.55%2BAM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Popular media contributes to the perception that social media is the bulk of tech, as most tech-related articles I read as a banker (meaning these articles generally derived from WSJ or the Financial Times) were about social media companies who raised funding or were acquired by larger companies. &lt;/p&gt;

&lt;p&gt;One salient memory I have from banking is the day &lt;a href=&quot;http://dealbook.nytimes.com/2014/02/19/facebook-to-buy-messaging-start-up/&quot;&gt;Facebook acquired WhatsApp&lt;/a&gt;. I recall that virtually every conversation I overhead involved someone suggesting that Facebook&amp;rsquo;s inflated shares were causing the company to pull the trigger on unwise acquisitions, and someone else agreeing. Then another person would talk about the pressure to compete with company X and acquire more users. Then another person would make a comment about a tech bubble and a vicious cycle. And so on and so forth. &lt;/p&gt;

&lt;p&gt;That day serves as a decent example of how bankers (and perhaps others as well) perceive the tech space. The frequent articles emphasizing eye-popping purchase prices make a lot of people wary and suggest that the tech industry is out of sorts with the rest of the economy. EDM in some respects makes this point in the aforementioned post:&lt;/p&gt;

&lt;blockquote&gt;
Now I understand that the technology world operates in its own reality distortion field, but I have to confess I was stunned by that fee percentage. In the normal business world, where industrial logic and economic pressures operate in place of the moonbeams and unicorn piss of tech land, a billion dollar sale mandate should earn the sell-side advisor flogging it significantly less than one percent of transaction value.
&lt;/blockquote&gt;

&lt;p&gt;So, we have a number of data points now in EDM&amp;rsquo;s blog and tweets evidencing that he believes techies are out of touch with reality and even pigheaded. To be clear, I do not see this opinion as unfounded. At the same time, this opinion is not &amp;ldquo;true&amp;rdquo;, because it&amp;rsquo;s easy to find at least one exception to the claim: @pmarca. &lt;/p&gt;

&lt;p&gt;The @pmarca feed is a frequent source of technological optimism that oftentimes has nothing to do with social media. Par for the course are tweets documenting groundbreaking work in tech: &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-7cinCcxFbHQ/U-SpXMPYbnI/AAAAAAAAAQs/LD81D-HhRSY/w456-h408-no/Screen%2BShot%2B2014-08-08%2Bat%2B6.39.45%2BAM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Andreessen also has recently gone on double digit tweet-sprees about the practical applications of virtual reality and the &lt;a href=&quot;https://twitter.com/pngmarca/status/497155377100619777/photo/1&quot;&gt;societal benefits encompassed&lt;/a&gt; in &lt;a href=&quot;http://www.nytimes.com/2014/08/07/technology/personaltech/lyft-tries-to-coax-commuters-to-leave-their-cars.html?_r=0&quot;&gt;Lyft Line&lt;/a&gt;. If you want proof that tech is not pigheaded and that progress is not superficial, but real and measurable, look no further than @pmarca&amp;rsquo;s twitter. &lt;/p&gt;

&lt;p&gt;By the same token, I think @pmarca&amp;rsquo;s perception of finance may reflect a public perception that lacks basis in reality. Let&amp;rsquo;s look at a recent string of tweets: &lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-ErAcP0pYtv8/U-S7n96eb9I/AAAAAAAAASI/jVT10QbHB6I/w354-h485-no/Screen%2BShot%2B2014-08-08%2Bat%2B7.58.57%2BAM.png&quot; alt=&quot;&quot;&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Just as most people view social media as an inordinate proportion of the tech space, it&amp;rsquo;s my view that the public focuses far too much on the consequences of TARP and the bailouts of the last recession. When I say &amp;ldquo;focuses far too much&amp;rdquo;, I mean that people are incorrect to believe that these bailouts continue to have an enormous impact on employee behavior at banks. Even if I were to acknowledge the @pmarca argument that &amp;ldquo;bailouts are guaranteed&amp;rdquo;, I do not believe this guarantee has large consequences on how banks operate (hold on, let me explain).&lt;/p&gt;

&lt;p&gt;Banks are under significantly stricter reporting, acccounting and capital standards - both from an S&amp;amp;T and i-banking perspecting - than pre-crisis, and cannot take outsize risks as a result. Even if banks are incentivized to take larger risks, Dodd-Frank and a slew of other types of legislation prevents them from doing so - I feel as though @pmarca should have acknowledged this in the tweet essay above. The banking sector is not growing nearly as fast as the tech sector in part because bankers have more hurdles in taking on risk, and therefore cannot realize as large rewards. &lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;m really getting at here is that the @pmarca - @EpicureanDeal spat is borne out of misunderstanding of the other&amp;rsquo;s craft. To my idols - Marc Andreessen and the man behind the Epicurean Dealmaker mask - I propose an end to your war. I think you have far more in common than you realize. &lt;/p&gt;
</description>
        <pubDate>Fri, 08 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/08/08/techies-v-bankers/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/08/08/techies-v-bankers/</guid>
      </item>
    
      <item>
        <title>Graduation</title>
        <description>&lt;blockquote&gt;In a curious way, they show more spontaneity and more pleasure, and seem far less relentlessly organized, than many students now attending the better colleges and universities. Is it the absence of hand-holding — the sense that they are on their own — that has given them something of the freedom of college forty or fifty years ago?&lt;/blockquote&gt;

&lt;p&gt;The above quote is from a NYT Review of Books article by David Bromwich, &lt;a href=&quot;http://www.nybooks.com/articles/archives/2014/aug/14/hi-tech-mess-higher-education/&quot;&gt;which can be found here.&lt;/a&gt; &amp;ldquo;They&amp;rdquo; is in reference to &amp;ldquo;persons of college age&amp;rdquo; on scholarships awarded by Peter Thiel. Recipients of such scholarships educate themselves.&lt;/p&gt;

&lt;p&gt;I graduated from Duke University with a B.S. in Economics two years ago; I graduated from Dev Bootcamp yesterday. I do not have, nor do I expect to receive, a &lt;a href=&quot;http://www.thielfellowship.org/&quot;&gt;Thiel Fellowship&lt;/a&gt;. I can say with complete honesty, however, that I feel more spontaneous, satisfied and organized in the aftermath of this graduation than the one before it.&lt;/p&gt;

&lt;p&gt;I do not intend for this post to be a commentary on the current state of higher education, or even the state of bootcamp education. Rather, I want to talk broadly about (i) learning and (ii) motivation, and the connection I see between the two based on my experiences at Duke and at DBC.&lt;/p&gt;

&lt;p&gt;I believe learning to be very much intertwined with what people find personally meaningful. This opinion has some scientific basis, as there is research to support that memory persists longer depending on the associations one makes with the memory. For example, if I were to tell you that a certain number will unlock a safe containing a life-saving antidote to a life-threatening virus, and you believed me to be credible, you would likely remember that number. However, if I just spit out a random number, I doubt you would remember it five minutes later.&lt;/p&gt;

&lt;p&gt;In a classroom setting, this idea is especially relevant. I can recall dozens of instances in college of a student asking, &amp;ldquo;Will this be on the test?&amp;rdquo; Memory (and, by extension, learning, although the two are not synonymous) in higher education is all too often dependent on arbitrary incentives. GPA is the vehicle by which students signal to employers their worth; GPA is founded on correct answers to tests; correct answers to tests derive from learning and memorization. Thus, students are highly incentivized to learn what the test will &amp;ldquo;look like&amp;rdquo;, and prepare accordingly.&lt;/p&gt;

&lt;p&gt;Learning and motivation are completely different in the context of the bootcamp model (and, to be clear, I can only speak to DBC here). Most students in my DBC cohort felt compelled to learn what would help them achieve their goals or satisfy their curiousity. Yes, DBC has a large and well planned curriculum, as well as tri-weekly assessments, but the curriculum and assessments (in my opinion) seem to supplement learning rather than direct it. I would deep dive into parts of the DBC curriculum if they were useful for a project I happened to be working on.&lt;/p&gt;

&lt;p&gt;A pertinent example: my final group project for DBC was a mobile responsive e-reading platform called ReadyReader (here&amp;rsquo;s the &lt;a href=&quot;http://ready-reader.herokuapp.com/&quot;&gt;live site&lt;/a&gt; if you&amp;rsquo;re interested). One of the biggest problems our group encountered was slow performance and a frozen UX during book uploads. We mined the DBC curriculum and our instructors for knowledge on performance optimization, background jobs and relevant tools in order to solve our performance issues. Our studies eventually led us to &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; and &lt;a href=&quot;https://github.com/resque/resque&quot;&gt;Resque&lt;/a&gt;, which performed the background database work we needed without interrupting the user experience. In short, the mechanism that directed our learning was solving a problem rather than preparing for a test or optimizing GPA.&lt;/p&gt;

&lt;p&gt;Moreover, our group created the problem that led to our learning. We all wanted to work on an e-reader, and the project was personally meaningful to us. We also all made the conscious choice to pay a good chunk of change to be at DBC and pursue software engineering. Therein lies the crucial difference between colleges / universities and bootcamps (and yes, I realize these are general statements that do not apply to all students): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In a college / university setting, learning and motivation are founded upon test structure and GPA optimization&lt;/li&gt;
&lt;li&gt;In a bootcamp setting, learning and motivation are founded upon solving personally meaningful problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think this discrepancy is the reason why Thiel Fellowship recipients seem so much more motivated than college students. When an individual makes a conscious choice to tackle a problem, he or she is infinitely more motivated to find a solution than when the problem is created by another individual. &lt;/p&gt;

&lt;p&gt;Were I to offer one reform for higher education, it would be to recognize this principle and factor it into decision-making processes. Students will work hard for themselves. They will work less hard for others. &lt;/p&gt;

&lt;p&gt;Learning is inseparable from motivation.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/08/02/graduation/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/08/02/graduation/</guid>
      </item>
    
      <item>
        <title>TDD's Value Proposition</title>
        <description>&lt;p&gt;I begin my final three weeks of Dev Bootcamp tomorrow, and am most looking forward to taking a deep dive into test-driven development in the context of Rails starting Monday. The reason for my interest is that I have come to believe junior programmers with strong TDD fundamentals can be significantly larger value-adds out of the box than their non TDD-inclined counterparts.&lt;/p&gt;

&lt;p&gt;Evan Dorn of Logical Reality Design has an excellent thirty minute video on &lt;a href=&quot;https://www.youtube.com/watch?v=HhwElTL-mdI&quot;&gt;this very theme&lt;/a&gt;. Dorn contends that the difference between programming and software engineering lies in tests. Modular and concise code springs from the test driven framework because programmers write small snippets at a time to make failing tests pass. Tests are short and to the point; the code to make tests pass is correspondingly short and sweet. If programmers operate under the TDD paradigm from a program&amp;rsquo;s inception, they significantly lessen the risk of needing to pony up capital for a code rescue later down the line.&lt;/p&gt;

&lt;p&gt;Admittedly, there are some strong counterpoints to this school of thought. One I constantly hear is that getting your product out the door in X amount of time is worth the Y hours of refactoring that can be done at a later point in time. Refactoring by definition will not improve the basic functionality of your program, so one has to consider carefully the costs of delaying a product release when the delay will not materially improve the user experience. A second argument against TDD (and yes, there obviously are far more I&amp;rsquo;m not covering here) is that certain tests really test nothing and / or encourage tunnel vision on passing the tests at the expense of more important architectural decisions. Rails creator David Heinemeir Hansson in part championed this argument in April on his &lt;a href=&quot;http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html&quot;&gt;blog&lt;/a&gt;, decrying unit tests specifically. Both arguments hold water and present complex-enough issues to warrant more attention in future writings. &lt;/p&gt;

&lt;p&gt;Rather than focus on these arguments, I want to argue that TDD is a valuable skill in particular for junior developers (such as myself), because TDD (i) introduces scientific rigor to the coding process, (ii) acts as a strong defense against poorly written code and (iii) doubles as a superior communication tool to make the intent of code clear. I would presume the number one concern most employers have in hiring junior developers is their potential to detract value from companies by writing dependency-laden, dysfunctional code with hard-to-trace errors capable of driving away clients. TDD demands an approach that goes a long way towards eradicating this potential.  &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve had a chance to look at some of the code from previous DBC final projects (&lt;a href=&quot;https://github.com/cicadas-2014/quotemunk&quot;&gt;this app&lt;/a&gt; for managing Kindle quotes is among my favorites), and have been struck by the test-driven approach evident in all of them. DBC students write unit-based, controller-based and feature-based tests in Rails that comprehensively test the entire application. In the coming weeks, I intend to post on testing techniques  in Rails and the advantages to be had from a TDD-oriented approach. &lt;/p&gt;
</description>
        <pubDate>Sun, 13 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/07/13/TDD/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/07/13/TDD/</guid>
      </item>
    
      <item>
        <title>Chris Hunt at GORUCU</title>
        <description>&lt;p&gt;Chris Hunt gave an excellent talk on improving working memory at yesterday&amp;rsquo;s &lt;a href=&quot;http://goruco.com/&quot;&gt;GORUCU&lt;/a&gt; conference. I&amp;rsquo;ve read part of Harry Lorayne&amp;rsquo;s and Jerry Lucas&amp;#39; classic book on improving &lt;a href=&quot;http://www.amazon.com/The-Memory-Book-Classic-Improving/dp/0345337581&quot;&gt;memory&lt;/a&gt;, so some of the techniques Chris promoted were familiar to me. However, his real-world examples of using the locus method and mnemonics demonstrated implementation of these methods in an easy-to-understand way. I find it interesting and not at all coincidental that Chris is a world-class &lt;a href=&quot;https://github.com/chrishunt&quot;&gt;programmer&lt;/a&gt; at GitHub and a memory enthusiast.&lt;/p&gt;

&lt;p&gt;My admittedly limited programming experience has hammered home the value of working memory in a programming context. Although Sublime or your text editor of choice will provide suggested variables / methods / classes / etc. given the first letter you type, it can&amp;rsquo;t be stressed enough how easy it is to forget names you wrote in a large program. Popping open another file or scrolling up or down to figure out what I named method X has destroyed my &lt;a href=&quot;http://en.wikipedia.org/wiki/Flow_(psychology&quot;&gt;flow state&lt;/a&gt; on numerous occasions. &lt;/p&gt;

&lt;p&gt;What benefits could 10 minutes a day of working memory exercises deliver to my programming productivity? I certainly believe it&amp;rsquo;s worth finding out. Chris recommended this week by week memory &lt;a href=&quot;http://www.amazon.com/How-Develop-Brilliant-Memory-Week/dp/1780287909&quot;&gt;improvement guide&lt;/a&gt; by multi-time world memory champion &lt;a href=&quot;http://en.wikipedia.org/wiki/Dominic_O&amp;#x27;Brien&quot;&gt;Dominic O&amp;#39;Brien&lt;/a&gt;, as well as &lt;i&gt;&lt;a href=&quot;http://www.amazon.com/Moonwalking-Einstein-Science-Remembering-Everything/dp/0143120530&quot;&gt;Moonwalking with Einstein&lt;/a&gt;&lt;/i&gt; by Josh Foer. The latter book details Foer&amp;rsquo;s journey from a science journalist studying memory to 2006 USA World Memory Champion. The time investment here is relatively small (reading two books and putting aside 10 minutes a day) and the payoffs are potentially enormous.  &lt;/p&gt;

&lt;p&gt;Funnily enough, Chris&amp;#39; talk itself served as an incredible example of the benefits to be had from working on your working memory. He was the only speaker at the entire conference who never looked behind him to refer to the big screen and spoke in coherent, complete, polished sentences that in retrospect seemed pre-written (but his delivery was such that it sounded anything but canned - the guy is also a grade A public speaker). The talk was filled with lists of multiple items and heavy on specific references (e.g. several cards in a playing deck and numerous names were referenced throughout). The strength of Chris Hunt&amp;rsquo;s own working memory could not have been more apparent than in this talk.  &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still in awe of how bad-ass those fifteen minutes were. Here&amp;rsquo;s to you, Chris Hunt. &lt;/p&gt;

&lt;p&gt;&lt;i&gt;**Another unabashed Chris Hunt plug - install his &lt;a href=&quot;https://github.com/chrishunt/desktop&quot;&gt;desktop Ruby gem&lt;/a&gt;. I change my desktop background all the time and love the fact that, thanks to Chris, I can now do it from my command line.&lt;/i&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/06/22/chris-hunt-at-gorucu/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/06/22/chris-hunt-at-gorucu/</guid>
      </item>
    
      <item>
        <title>On the Spurs</title>
        <description>&lt;p&gt;I recall the post-lockout 1999 season well, only because it was, in NBA time, the first post-Jordan year. I was facing a dilemma at the time I&amp;rsquo;m sure many 9 year olds also had - what does the NBA have in store for &lt;i&gt;me&lt;/i&gt; now that Jordan is gone? My first several years watching the NBA were really just years watching Jordan. Eyes on 23 on literally every possession. Jordan spoiled a lot of people, me included, because everyone became accustomed to that level of dominance - we expected it of future superstars.&lt;/p&gt;

&lt;p&gt;Tim Duncan won the 1999 NBA Finals MVP with a nice-but-not-unbelievable 22-11-2 average for the series. Yes, Tim Duncan to the 9-year-old me was a slight disappointment against 1998 NBA Finals Michael Jordan (but then again, how can you follow up the greatest shot of all time?). You can find all NBA Finals MVPs&amp;#39; series stat lines since 1987 (inclusive) &lt;a href=&quot;http://espn.go.com/nba/history/awards/_/id/43&quot;&gt;here&lt;/a&gt;, and Duncan&amp;rsquo;s three MVPs are statistically on the bottom quartile. For this and likely other reasons, Duncan over the years never truly attained the talking heads&amp;#39; attention in the same way a Shaq, Kobe, LeBron, or even Dirk, did. &lt;/p&gt;

&lt;p&gt;The Spurs over the last decade plus have been associated with the adjective &lt;i&gt;boring&lt;/i&gt;. I googled &amp;lsquo;boring Spurs&amp;rsquo; and the &lt;a href=&quot;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=spurs%20boring&quot;&gt;results&lt;/a&gt; are pretty comical. The amount of opinion content debating whether the Spurs are boring is insane. Isn&amp;rsquo;t what we find exciting / boring largely a personal preference? How else do you explain the love / hate relationships general sports fans have with soccer, hockey and NASCAR? (I used these as examples, but obviously every sport has its boring / exciting advocates). &lt;/p&gt;

&lt;p&gt;I find it a nice bend of history that the Spurs are both of these things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The most dominant post-Jordan team ever (by wins and (possibly after tonight) tied for rings with the Lakers - let&amp;rsquo;s say wins is the tiebreaker) &lt;/li&gt;
&lt;li&gt;The most dominant post-Jordan team without a major month-plus-ESPN-occupying story line that polarized the NBA fan base (and yes, I&amp;rsquo;m delving into opinion here)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The closest comp to the Spurs - at least for dominance over time period - is the New England Patriots, who we all know had a major month-plus-ESPN-occupying story line. Every NFL fan has a reason to hate the Pats. NBA fans have no justifiable reason to hate the Spurs - thus, it seems that reason has become that they&amp;rsquo;re boring. &lt;/p&gt;

&lt;p&gt;The current foil to the Spurs is their NBA Finals opponent - the Miami Heat. The Heat as we know them now have been, since inception, exciting. They more than polarized the entire NBA fan base with some questionable &lt;a href=&quot;https://www.youtube.com/watch?v=pT-I8jQDQ7c&quot;&gt;behavior&lt;/a&gt;. Per a Sports Nation poll, every state excepting Florida is &lt;a href=&quot;http://www.slate.com/blogs/the_slatest/2014/06/04/nba_finals_poll_spurs_over_heat_says_america.html&quot;&gt;rooting against them&lt;/a&gt; in the Finals. The Heat are a never-ending source of interest for NBA fans in the same way embattled celebrities are a never-ending source of interest for cable news. &lt;/p&gt;

&lt;p&gt;The Spurs have never caused a non-basketball-related ruckus, and we (the collective NBA fan base) have very little to talk about outside of their &amp;ldquo;quiet&amp;rdquo; basketball-related dominance. There&amp;rsquo;s no selfish-but-talented point guard stealing shots from the all-caliber power forward. There&amp;rsquo;s no paranoid coach demoting assistants and smashing horns with the owner. And there&amp;rsquo;s most definitely no senile owner alienating the entire franchise in a recorded phone conversation. &lt;/p&gt;

&lt;p&gt;So we have a situation wherein the best team from a basketball perspective is likely the worst team from a Sportscenter perspective. If sports and media were entirely delinked, this little coincidence would not matter to the media at all. But it does, since media is pro sports as much as pro sports are pro sports. &lt;/p&gt;

&lt;p&gt;Conversely, this coincidence matters not to the Spurs, whose head coach is notorious for giving one syllable answers in interviews. Better yet, the face of their franchise (Duncan) really doesn&amp;rsquo;t seem to care, and, other than some animated protests to thorn-in-the-side officials, lives on the emotional plane of a normal person engaging in recreation. &lt;/p&gt;

&lt;p&gt;The post-MJ Spurs have refused to play ball with our shiny social media age, but refused in the most polite way possible. They do the bare minimum of NBA-mandated PR work and then go home. It&amp;rsquo;s admirable and it&amp;rsquo;s inspiring precisely because they&amp;rsquo;re not trying to sell us anything. I can barely open up Chrome without being hit by 35 scandalous headlines, lest watch a basketball game purely about basketball nowadays.&lt;/p&gt;

&lt;p&gt;As it pertains to the NBA, the Spurs don&amp;rsquo;t care about anything except playing the best basketball in the league. If the 9-year-old me found the Spurs dominance quiet and a bit boring, the 24-year-old version appreciates the singular focus on craftsmanship.  &lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/06/15/onthespurs/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/06/15/onthespurs/</guid>
      </item>
    
      <item>
        <title>From CSV to SQL</title>
        <description>&lt;p&gt;I&amp;rsquo;m a sports nerd and regular attendee of the &lt;a href=&quot;http://www.sloansportsconference.com/&quot;&gt;Sloan Sports Conference&lt;/a&gt;, so DBC&amp;rsquo;s focus on parsing data in Week 2 of camp was right up my alley. It also gave me an excuse to delve deeply into my favorite baseball team&amp;rsquo;s last 100+ years of team stats, which culminated in the creation of a Boston Red Sox terminal applicaton. This post will discuss the creation of this little app, the repository of which can be found &lt;a href=&quot;https://github.com/BenBrostoff/red_sox_stat_finder&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Among other things, Week 2 of DBC was heavy on using Ruby&amp;rsquo;s &lt;a href=&quot;http://ruby-doc.org/stdlib-1.9.2/libdoc/csv/rdoc/CSV.html&quot;&gt;CSV class&lt;/a&gt; and the &lt;a href=&quot;http://rubydoc.info/gems/sqlite3/1.3.9/frames&quot;&gt;SQLite3 gem&lt;/a&gt;. The former is a means of parsing CSV data and the latter allows for execution of SQL commands from external databases within Ruby programs. &lt;/p&gt;

&lt;p&gt;These two tools got me thinking a lot about filtering data. The CSV class in Ruby can be used to convert rows of CSV data into an array of arrays, while SQLite3 gives you the full force of SQL querying functionality. As someone who enjoys looking at random baseball stats, I knew I had to put these tools to use in a baseball capacity. &lt;/p&gt;

&lt;p&gt;The folks over at &lt;a href=&quot;http://www.baseball-reference.com/&quot;&gt;baseball-reference&lt;/a&gt; have tables of tables of every baseball stat imaginable in CSV format. I decided to grab the Red Sox team history &lt;a href=&quot;http://www.baseball-reference.com/teams/BOS/&quot;&gt;page&lt;/a&gt;, and parse the whole thing using &lt;code&gt;CSV#read&lt;/code&gt;, which returns an array of arrays, wherein each array is a row of data. From there, I iterated through the array and loaded the data into a database using SQLite3. &lt;/p&gt;

&lt;p&gt;Once the data was in the database, it was easy to write methods that used database queries to filter information. Consider the method below, which takes four arguments to determine what type of data a user wants to see, the range of years over which the data spans and whether the data is sorted in chronological order, ascending by category or descending by category:    &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/08f31330002bf2b0f150.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As an avid Red Sox, I was pleased to find this app was nice for discovering some interesting info about our wonderful franchise. The best Red Sox team of the three recent WS teams by &lt;a href=&quot;http://en.wikipedia.org/wiki/Pythagorean_expectation&quot;&gt;Pythagorean Winning Percentage&lt;/a&gt; was the 2007 team (.624). I fully expected those teams to be followed by the 2013 and 2004 teams since, say, 2000, but the 2002 team was actually better than the 2004 team on this basis. Note that the 2002 team did not make the playoffs despite posting 93 wins and sending 7 guys to the All-Star Game. Thus, the stats bear out that fortune did not favor this team:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-ESbN4LdAlr8/U5xiRronReI/AAAAAAAAAMc/hnBCHj9IUUs/w342-h451-no/Screen+Shot+2014-06-14+at+10.50.48+AM.png&quot; alt=&quot;some_text&quot;&gt;
&lt;/p&gt;

&lt;p&gt;Also, did you know the Red Sox team with the oldest pitching staff ever (clocking in at an average age of 33.6 years) was the 2005 Red Sox? Credit David Wells (42 at the time), Tim Wakefield (38), Mike Timlin (39) and Mike Myers (36) for that one. Youngest? The 1916 team, at 24.4 years (a trend I noticed here is that baseball teams in the early 1900s were much, much younger than &amp;ldquo;modern era teams&amp;rdquo; - in fact, the top 12 youngest Sox teams are all from 1930 or earlier).  &lt;/p&gt;

&lt;p&gt;The process of building this little application only continued to reaffirm to me the value of programming skills as they apply to statistical analysis. I&amp;rsquo;m excited to continue learning in this and many other respects. &lt;/p&gt;
</description>
        <pubDate>Sat, 14 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/06/14/csv-sql/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/06/14/csv-sql/</guid>
      </item>
    
  </channel>
</rss>