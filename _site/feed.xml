<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ben Brostoff</title>
    <description></description>
    <link>http://0.0.0.0:4000</link>
    <atom:link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Shots on Goal Means Higher Value</title>
        <description>&lt;p&gt;How many business stories are variations of “We tried X and it didn’t work, but a small part of X was promising, so we pivoted to Y, and then…”?&lt;/p&gt;

&lt;p&gt;Another common one - “We approached &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;someLargeNumber&lt;/code&gt; of investors and were rejected by every single one until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;someUniqueInvestorWithContrarianViewpoint&lt;/code&gt; took a chance on us.”&lt;/p&gt;

&lt;p&gt;Anecdotally, both of these I think are common. I think the reason why is that more shots on goal mean higher probability of finding a price (value) where buyer and seller can transact.&lt;/p&gt;

&lt;p&gt;In the product case, the seller offers different products / services and observes what the buyer is willing to pay for. The product offering and refinement process continues until the seller feels confident they can provide products / services at sustainable margins where a reliable pool of buyers exist.&lt;/p&gt;

&lt;p&gt;In the investing case, the seller communicates with different buyers until someone is willing to transact. &lt;a href=&quot;https://henrysward.medium.com/finally-a-private-stock-exchange-cartax-3c658f30ac97&quot;&gt;Henry Ward of CartaX had a great blog (in my opinion) on this concept&lt;/a&gt;. The idea in this post is that if prices can adjust flexibly as the number of buyers increase, prices will be significantly higher than if constrained:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;That is why tender offers are good for investors and bad for employees. In most markets more investor demand means higher prices. But in private markets, investors fix a price and buy as much stock as they can at the same price. That’s why venture capitalists fight to “get into a round.” No matter how much demand exists, once the price is set by the lead, the price doesn’t change… If we had done an employee tender alongside our Series F, employees would have sold at half of what they were able to sell on CartaX. &lt;strong&gt;But because we did proper price discovery after our primary financing, employees were able to sell secondary shares at a 2.5x premium&lt;/strong&gt;. Maybe we can call that the CartaX Lift.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2.5x&lt;/strong&gt;. That is a wild premium. My hurdle rate is 10%, so this is close to 20+ years of returns for me. Said another way, letting prices float with the size of the market made a 20+ year difference to the seller.&lt;/p&gt;

&lt;p&gt;Showing things to more people and building more things makes a multi-decade difference.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Feb 2021 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/2021/02/10/shots-on-goal.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2021/02/10/shots-on-goal.html</guid>
      </item>
    
      <item>
        <title>Chat Can Be The Mind Killer</title>
        <description>&lt;p&gt;Web chat platforms like Slack are the core of remote work and determine how good your remote experience is.&lt;/p&gt;

&lt;p&gt;When chat is good, it’s serving the following functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Async communication where people are getting useful responses in a timely fashion&lt;/li&gt;
  &lt;li&gt;Responders do not feel pressure to respond instantly and understand expectations around response times&lt;/li&gt;
  &lt;li&gt;Chat happens in public channels and searching keywords reveals useful conversations (ex. what an acronym stands for, context for running specific bash commands, why a decision was made the way it was, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When chat is bad, my experience is it’s failing in the following ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chat participants feel pressure to be always available and significant portions of time are spent reading messages and writing responses&lt;/li&gt;
  &lt;li&gt;Communication occurs in private channels and DMs, meaning information is duplicated and worse yet is not searchable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chat has a higher likelihood of becoming bad when you wear multiple hats in a community. The more things you do, the wider your circle is, and the more conversations you’re going to be involved in. That ups the probability of other chatters not having the same expectations as you and you being part of more DMs and private channels.&lt;/p&gt;

&lt;p&gt;To an extent, these problems are unavoidable, and I’ve yet to &lt;em&gt;not&lt;/em&gt; encounter them at any company I’ve worked at. Companies are complicated and when they hire more people, chat culture standards change. If you’ve been at a company long enough, you probably know hundreds of people and are in dozens or possibly 100+ channels and DMs. I think on certain days I’m receiving north of 1 message per minute during work hours. &lt;em&gt;While this may seem semi-reasonable, remember that is 60+ messages per hour and on a 9-5 work day amounts to  nearly 500 messages per day&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Getting 500 emails per day would never be acceptable to anyone. But because we live in a culture where chat is a staple of remote work and supposed to replace human conversation, people are expected to manage this volume.&lt;/p&gt;

&lt;p&gt;Managing this volume takes time and detracts from other activities which many times are higher value add than consuming or producing chat messages. From a software engineer perspective, writing code or documentation is almost always higher value than writing into chat. Similarly, reading code or docs is almost always higher value than reading chat. Code and docs (could be docs for code or business requirements or anything someone took a few hours to prepare that contains valuable info) change far less frequently than conversations. You can invest time in them with a strong probability of returns in the future.&lt;/p&gt;

&lt;p&gt;As an extreme example, a core piece of business logic that lives at the center of a codebase is going to be mission critical for engineers to understand no matter the day of the week (or even year). Understanding this code will make it easier to change if and when the time comes the business goes in a new direction. Here, time trying to understand the code could lead to years of returns in productivity.&lt;/p&gt;

&lt;p&gt;In contrast, most people can probably safely be uninvolved in a realtime conversation about whether a button should be moved &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4px&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8px&lt;/code&gt; downwards. Additionally, when decision-makers agree on the spacing, the decision will be in code for everyone to see forever. In this case, any time involved in the pixel conversation - especially if you’re a passive consumer of the conversation and not involved in the decision - has no return. CSS changes and everyone moves on. As an aside, prior to Slack, passive consumers would not even exist, because the designer, PM and responsible engineer would work together in a meeting room where uninvolved parties wouldn’t be invited.&lt;/p&gt;

&lt;p&gt;I’ve been trying to remind myself that an hour spent on code / docs is possible 2x - 100x+ the value of time in chat. Yes, I made these numbers up, but I don’t think they’re too far off. Return on time spent in chat if I’m being honest is zero if the conversations don’t have useful information or work to reach an action item.&lt;/p&gt;

&lt;p&gt;Even if it’s not possible to get a strong ratio of deeper work hours to chat hours, I think there is real value to reading chat in batches instead of following real-time. If I’m reading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X is typing&lt;/code&gt; and I don’t need to see a response immediately, it’s a sign I am wasting my own time. My opinion is conversations read better after they have happened and not while they’re happening.&lt;/p&gt;

&lt;p&gt;Following a back and forth live is like watching a TV series with frequent commercials and week gaps in releases. You spend more time on the activity and probably have worse understanding of the plot because of the frequent commercials and gaps in episode releases. Async reading of conversations in this analogy is binging a show on Netflix - overall a more enjoyable experience and one that leaves you with a better understanding of the content.&lt;/p&gt;

&lt;p&gt;I know I’ve largely failed trying to make some of my observations in this article actionable. Even knowing how unproductive chat can be, it’s hard to step away from conversations that seem mission critical at the time.&lt;/p&gt;

&lt;p&gt;That’s why I want to try to have a system I follow so I don’t have to try - I can just follow the system. I think it would look something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have a minimum requirement each day for deep work hours (4+). Signal to others I will be delayed in responding during these hours.&lt;/li&gt;
  &lt;li&gt;Allocate time (maybe to start 30 minutes?) to batching reading of chat messages from different channels. Read first and then determine how to respond. If possible, avoid responding instantly, as that will take time away from reading other channels and consuming the information because responding starts another conversation.&lt;/li&gt;
  &lt;li&gt;Chat in public channels and try to move DMs and private channel conversation to public where possible. This action will improve transparency and make future issues more solvable since answers can now be searched&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Going forward, I’m going to try to do these three things and see if they make me more productive.&lt;/p&gt;

</description>
        <pubDate>Sat, 30 Jan 2021 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/2021/01/30/chat-can-be-the-mind-killer.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2021/01/30/chat-can-be-the-mind-killer.html</guid>
      </item>
    
      <item>
        <title>Return on Time</title>
        <description>&lt;p&gt;I’ve been using a lot of my creative output outside work to focus on &lt;a href=&quot;https://podcasts.apple.com/us/podcast/stock-talking/id1508054190&quot;&gt;Stock Talking&lt;/a&gt;, so this blog has seen less posts recently than previous years. I did want to do a short post on a concept I’ve been thinking about a lot recently, so here goes.&lt;/p&gt;

&lt;p&gt;A lot of investing I do is informed by a hurdle rate. &lt;a href=&quot;https://www.investopedia.com/terms/h/hurdlerate.asp&quot;&gt;Investopedia defines this term as&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…the minimum rate of return on a project or investment required by a manager or investor. It allows companies to make important decisions on whether or not to pursue a specific project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For public equities investing, this is a 10% annualized return for me. If I don’t think the company can compound at 10% over a five year plus time period, I don’t invest.&lt;/p&gt;

&lt;p&gt;Hurdle rates exist because everyone has limited capital. If you pursued every opportunity, you’d quickly run out of funds and be unable to make any more investments.&lt;/p&gt;

&lt;p&gt;Similarly, time as of this writing is finite. Not only is time finite, types of time at least for me are limited. One hour right after I wake up and have a coffee is a much more high quality type of time than 2PM in the afternoon. To follow the investing analogy, morning time for me is the chance the deploy capital in a 2008/9 / 15/16 / Dec. 2018 / Mar. 2020 environment. Each dollar goes a lot further.&lt;/p&gt;

&lt;p&gt;So, just like investing has a hurdle rate, I think how I spend my time has to have a hurdle rate. The morning has a higher hurdle rate than later in the day since I have more energy.&lt;/p&gt;

&lt;p&gt;Measuring returns is harder for time than for money. There’s no clear cut formula to determine entry and exit. The next closest thing I think is just a log of what was done and how much time was spent doing it.&lt;/p&gt;

&lt;p&gt;One of the best podcasts I listened to this year was &lt;a href=&quot;https://tim.blog/2020/12/08/jerry-seinfeld/&quot;&gt;Jerry Seinfeld on Tim Ferriss&lt;/a&gt;. Seinfeld says just the habit of writing for some amount of time makes a difference. There has to be a beginning and end. It can’t be forever. Achieving this 25 minutes of whatever each day of writing is a victory.&lt;/p&gt;

&lt;p&gt;Doing the work and logging it gives you conviction around data even if it doesn’t give you conviction around outcomes. What I mean by this is that a side project with Heap or Google Analytics or Stripe linked up can tell you if something is gaining traction or not. Do new features, new blog posts, new podcasts, etc. bring in new users? Not doing the work every day means less new data to evaluate.&lt;/p&gt;

&lt;p&gt;Consistency around work I think makes it easier to reason about the future and maybe is the biggest return to time well invested. For many stocks I own, the basic bet is that the company will grow earnings by at least 20% each year and therefore more than have doubled earnings in 4-5 years. Even if the multiple the stock trades at halves, the price should remain the same. The simple return on time version of this is if the amount of work I produce doubles, it’s very unlikely all of it was bad.&lt;/p&gt;

&lt;p&gt;The only way to produce work is to spend time doing it. That time has to be scheduled and managed. I’ve found &lt;a href=&quot;http://toggl.com/&quot;&gt;Toggl&lt;/a&gt; useful for time tracking and &lt;a href=&quot;https://www.notion.so/&quot;&gt;Notion&lt;/a&gt; good for logging what was done.&lt;/p&gt;

&lt;p&gt;Just like automated investing guarantees some dollar amount is dollar cost averaged over time, I think time should be set aside every day / week to do activities that produce work. As Seinfeld says on the podcast, maybe 20 minutes go by and only one paragraph is produced. That’s better than zero.&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Dec 2020 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/2020/12/31/return-on-time.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2020/12/31/return-on-time.html</guid>
      </item>
    
      <item>
        <title>The (Different Kind of) Information Advantage</title>
        <description>&lt;p&gt;I’m in the middle of &lt;a href=&quot;https://www.amazon.com/dp/B07H1ZYWTM&quot;&gt;Range&lt;/a&gt; right now - a book about the value of generalists - and I am more and more starting to see all around me that there is a delicate balance between good, classic Adam Smith specialization and overspecialization.&lt;/p&gt;

&lt;p&gt;Adam Smith says that specialization of labor is good because thousands of workers divided into specialized tasks can produce things faster than thousands of workers all responsible for all the tasks to produce one widget. This makes sense for things like widget production, where one task often does not impact another task and knowledge in one task generally does not impact another task.&lt;/p&gt;

&lt;p&gt;In economies like the United States where most businesses are service-based businesses, there are not many widget-producers left. An increasing amount of the S&amp;amp;P 500 is dominated by software businesses. The people who write the code need to know a whole lot about the product, and the people who decide product direction need to know at least a little bit about the code.&lt;/p&gt;

&lt;p&gt;I have heard arguments that the second part of the last sentence isn’t true. I have heard scrum masters should necessarily be non-technical; that knowledge of the codebase creates biased constraints about how long something will take. These are good arguments I in part agree with. Good leaders do not get tied to architecture and are willing to scrap everything if scrapping everything and rebuilding offers a higher return than the alternative.&lt;/p&gt;

&lt;p&gt;Yet, estimates for how long something will take (one of the inputs necessary to calculate total return, because almost all return estimates are annualized) need to come from somewhere. They come from engineers or people who ask engineers for inputs. If these estimates are non-starters, the product usually gets adjusted so it can be built faster.&lt;/p&gt;

&lt;p&gt;What does this have to do with specialization? In a completely specialized world, the engineers don’t understand the product and the product specialists don’t understand engineering. A strange hybrid position (scrum master? product manager? project manager?) tries to bridge the two and the result is that unless the hybrid specialists are executing perfectly, estimates veer wildly from reality. The business cannot execute on projects over its hurdle rate because it can’t calculate ROI. The company fails.&lt;/p&gt;

&lt;p&gt;In a less specialized world, everyone is considered responsible for understanding a little bit about the entire business. The CEO has strong familiarity with the software development lifecycle; the software engineer knows estimates for next year’s EBITDA and what the main business drivers are. Each feels empowered to weigh in on areas outside what their core competencies are. Each is quickly building strong skills in things other than the thing they were hired for. Estimates are good because everyone’s bullshit detector is a little stronger. It’s harder to fool someone who knows a little about everything than everything about one thing.&lt;/p&gt;

&lt;p&gt;Interestingly, this is one reason why I think people who start companies usually start more companies. The founder is not able to opt out of learning things outside their core competency. The Buffett-Munger compounding knowledge cycle kicks in and founders become more and more capable of starting more companies.&lt;/p&gt;

&lt;p&gt;Additionally - and &lt;em&gt;Range&lt;/em&gt; really hits on this theme a ton - industry outsiders gaining knowledge on an industry for the first time are likely to have unique mental models for thinking about said industry. If these models provide valuable perspectives and are unique, it’s likely that person can offer value-add ideas that the market isn’t pricing correctly.&lt;/p&gt;

&lt;p&gt;Offering opportunities for specialists to become generalists I think is an easy way for companies to add shareholder value. By helping generalists grow, companies 1) improve ROI accuracy by getting estimates that reflect people with growing skills in a range of topics and 2) increase the likelihood of finding business advantages the competition hasn’t valued correctly.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jan 2020 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/2020/01/21/the-different-kind-of-information-advantage.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2020/01/21/the-different-kind-of-information-advantage.html</guid>
      </item>
    
      <item>
        <title>Five Seconds Could Change Everything</title>
        <description>&lt;p&gt;&lt;em&gt;This post also doubles as my 2019 lessons post. To check out my 2018 lessons post (this practice is now two years old), see &lt;a href=&quot;http://benbrostoff.github.io/2018/11/25/ev-is-everything.html&quot;&gt;EV is Everything&lt;/a&gt;. I seem to like the word everything&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I have a buddy who always gets on my back when I order the same beer as him. I’ve now heard his rationale probably dozens of times - ordering the same thing as someone else is always a failure to take the five seconds to think about what you actually want. Have you looked at the menu? Have you evaluated the possibilities?&lt;/p&gt;

&lt;p&gt;I know my own rationale for copying beer orders. I use the orderer as a proxy for good taste, and in doing so eliminate having to think about what good taste is. In the past I used to believe that relying on proxies like this was a great way to save time. I now believe decision quality is jeopardized by taking these shortcuts.&lt;/p&gt;

&lt;p&gt;The beer example is inconsequential, so I want to relate this idea to every decision. Many of these decisions are &lt;em&gt;how to respond in a conversation with one or multiple people&lt;/em&gt;.  The &lt;em&gt;how&lt;/em&gt; can be not responding; it can be asking a question; it can be disagreeing, agreeing, proposing an alternative, whatever. These responses can change the direction of the conversation and any resulting action from it.&lt;/p&gt;

&lt;p&gt;In my day-to-day, most conversations of consequence involve engineering decisions (abstract into a general service this sprint or do inline and kick off into the future?), stock market or DFS actions (buy or sell stock or player?) or personal planning (go rock climbing or run?). Because I hold a stake in the final decision for each of these, my responses influence the future. Knowing this is extremely motivating, but that’s the subject for another post.&lt;/p&gt;

&lt;p&gt;Conversations involve a lot of words, so there’s often dozens of micro-decisions to be made every few seconds. Especially in the case of information-heavy conversations, there are lots of decisions about &lt;em&gt;which questions to ask&lt;/em&gt;. The internet is a thing, so many questions are a waste of time when they could be googled (ex. “How has the stock traded the last few months?”). Similarly, information-heavy conversations may blend fact and opinion, so I believe strongly opinions must be questioned when appropriate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is the stock &lt;em&gt;actually&lt;/em&gt; trading at a real discount to book? Is there a case to be made that book value is overstated?&lt;/li&gt;
  &lt;li&gt;Why does this local service need to be changed to a remote service? You say that there is a generalized use case for it based on what the business wants to do, but how sure are you of that? Give some examples.&lt;/li&gt;
  &lt;li&gt;If we go rock climbing at 4 instead of noon, how crowded do you estimate the bouldering walls will be? How much value do we get if we go at a slightly earlier time?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These questions I think can be difficult to ask because they force people to analyze their own assumptions, which suggests you as the questioner do not trust the questionee. That suggestion is real. Many people who ask these types of questions are considered by most people to be hardasses and potentially difficult to work with. The credit officer I worked with in my first banking job was famous or notorious depending on how you frame it for these types of asks. There is a price to be paid for asking these questions.&lt;/p&gt;

&lt;p&gt;There is a much larger price to be paid for &lt;em&gt;not asking these questions&lt;/em&gt;. Unlike a slightly uncomfortable interaction’s impact on a human relationship, code in production, a buy or sell in the market and waiting in line are impossible to reverse. Yet, it’s easier to not ask them because of the social niceties of the world we live in. Some management norms even argue asking too many questions is a sign of a bad manager that doesn’t trust their people.&lt;/p&gt;

&lt;p&gt;Tradeoffs like this one must be weighed in conversational responses and really any decision, which is why I’m advocating for adding five seconds to what you think would be a normal response time given a complex problem. A seemingly easy problem may be complex given the right analysis, and vice versa.&lt;/p&gt;

&lt;p&gt;The five-second rule feels even more relevant as weighty decisions move to Slack and text message from e-mail (where in my opinion it’s easier to take your time replying). Slack especially is a problem here as you &lt;em&gt;can see other people typing&lt;/em&gt;, which no doubt impacts how conversations go down and your own response times in conversation. Social expectations (ex. in Slack in a real-time conversation, I should respond in &amp;lt;30 seconds) should &lt;em&gt;not&lt;/em&gt; impact how you get to an optimal decision.&lt;/p&gt;

&lt;p&gt;The five seconds here is somewhat arbitrary. I’m finding it’s just the right amount of time to either confirm a decision or stir a longer period of considered thought. If nothing else, five seconds reminds me of the consequences of not asking an important question or consenting to do something that may have huge ramifications on the future (that future could be one hour, one day or a lifetime).&lt;/p&gt;

&lt;p&gt;The five second rule in 2020 is a request to myself to not let the instant response culture dictate how I respond. In the words of Stephen Covey:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“In the space between stimulus (what happens) and how we respond, lies our freedom to choose.”&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 11 Jan 2020 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/2020/01/11/five-minutes-could-change-everything.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2020/01/11/five-minutes-could-change-everything.html</guid>
      </item>
    
      <item>
        <title>The Right Set of Primitives</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;There are no silver bullets&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m not sure who came up with this phrase, but recently I find myself using it and hearing close friends use it. Climbing, software engineering, business, investing, daily fantasy sports - whatever the discipline, there are too many galaxies in the massive universe of skills for each discipline to ever master. Importantly, each discipline has an expanding universe of skills to consider, especially in dynamic fields like software and investing where what once worked no longer works.&lt;/p&gt;

&lt;p&gt;I find the “no silver bullet” reminder both frustrating and thoughtful as someone who values continual improvement. It’s frustrating that getting better at something isn’t as simple as putting in reps; it’s thoughtful in that I sense the veracity of the argument - I have never found getting better at anything to be a linear process. At almost any sustained period of working hard at something, there are periods that seem like regression and periods of exponential improvement. Why is this? Well, there are no silver bullets.&lt;/p&gt;

&lt;p&gt;The related concept I often hear on the subject of no-silver-bullets is about strong principles. Sure, the argument goes, there are no silver bullets, but there are general principles that can be used to make any situation work. I’m a huge fan of Ray Dalio’s book &lt;a href=&quot;https://www.amazon.com/Principles-Life-Work-Ray-Dalio/dp/1501124021&quot;&gt;Principles&lt;/a&gt;, but I do not see these principles or any principles as able to address every potential problem in every discipline.&lt;/p&gt;

&lt;p&gt;In software there’s a related term - &lt;em&gt;the right set of primitives&lt;/em&gt;. I often hear this in relation to libraries that expose a bare minimum of building blocks that developers can build off of. I’ve even used the term when discussing &lt;a href=&quot;https://github.com/BenBrostoff/draftfast&quot;&gt;my own library for daily fantasy sports optimization&lt;/a&gt;. For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draftfast&lt;/code&gt;, the primitives are things like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Player&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Roster&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LineupConstraint&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stack&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RuleSet&lt;/code&gt;. The goal in building a good library in my opinion is to make the API surface extremely small while supporting nearly everything a developer would want to do related to your library’s stated mission (yes, this is not easy and likely impossible). This makes it easy for the developer to basically memorize your API and write their own code on top of it.&lt;/p&gt;

&lt;p&gt;Primitives and principles are related because both &lt;em&gt;seem&lt;/em&gt; like something real and substantial when in fact they’re just made up concepts by people. Something like a library component is generally just a wrapper around another set of primitives, which is using a programming language under the hood, which is using another compiler and programming language, etc (said another way, more and more primitives underneath the primitives).&lt;/p&gt;

&lt;p&gt;In non-software worlds, rules like “find companies with low EV/EBITDA ratios” is an abstracted mental model for more in-the-weeds ways of looking at cash flow, supply and demand for equities and company capital structure. EV/EBITDA is not really an investing “primitive” - EV and EBITDA themselves are just wrappers around traditional accounting practices (depreciation schedules for instance are core to EBITDA and made up by humans). Primitives and principles aren’t really useful if the goal is to find the smallest atom-like building block for a thing - they’re useful if they help people better understand the building blocks of complicated concepts.&lt;/p&gt;

&lt;p&gt;I think any primitives or principles that are popular today took a long time to come into existence. Primitives and principles both change all the time - to me, easy examples here are front-end JavaScript frameworks and guidelines around nutrition. Both change massively over a handful of years (the food pyramid’s rise and fall, ways of interacting with the DOM in front-end land). There are no silver bullets for creating primitives that last, except for maybe continual trial and error and experimentation to achieve repeatable results.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Dec 2019 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/2019/12/01/the-right-set-of-primitives.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2019/12/01/the-right-set-of-primitives.html</guid>
      </item>
    
      <item>
        <title>Counterintuitive Techniques</title>
        <description>&lt;p&gt;Watching &lt;a href=&quot;https://www.nationalgeographic.com/films/free-solo/&quot;&gt;&lt;em&gt;Free Solo&lt;/em&gt;&lt;/a&gt; earlier this year inspired me to sign up for a rock-climbing gym in March. What I’ve learned since then that has most helped my climbing is contrary to how my mind wants to think about climbing. Mainly, footwork and positioning are the foundation for solving hard bouldering problems.&lt;/p&gt;

&lt;p&gt;To this day, my first instinct is to rely on holds through overgripping and leverage upper body strength. This is an anti-pattern in climbing - overgripping is called overgripping for a reason. The evidence of this anti-pattern greets me every day at my gym, where  I regularly see eight year old kids ascending V6s and beyond without breaking a sweat while I struggle to make it up soft V3s. Strength clearly is not a force multiplier in this sport.&lt;/p&gt;

&lt;p&gt;While I’m still a newbie climber, whatever gains I have made I owe to improvements in foot usage that led to better positioning that led to efficiency gains. The hardest bouldering problems I’ve solved have never required me to hold onto some hold for dear life or do something super athletic. They have been exercises in strange foot positions that better distributed body weight so that the problem has felt 10x easier following the foot adjustment. One rock climbing technique called flagging allows you to use a free-hanging foot to counter body weight on an upward move - no hold is required. The foot simply uses the wall for balance. I never would’ve thought of this move on my own and had to see it done hundreds of times before starting to get it.&lt;/p&gt;

&lt;p&gt;I want to label this example and others like it counterintuive techniques. I think of a counterintuitive technique as any method of problem solving that does not seem logical but has efficiency gains that make it completely necessary for solving a problem. The book &lt;a href=&quot;https://www.amazon.com/Alchemy-Curious-Science-Creating-Business/dp/006238841X&quot;&gt;Alchemy&lt;/a&gt; is full of them - Alchemy generally argues that the most (on the surface) logical techniques for marketing and running businesses are not effective because of a mismatch between how humans are wired and what seems rational to humans. What’s interesting here is that the book is full of citations of psychological studies and explorations of the human mind - the title Alchemy only comes from the fact that the ideas in the book (ex. ads with cute animals often have a larger ROI than major product improvements) seem absurd on the surface.&lt;/p&gt;

&lt;p&gt;This idea I also think is powerful when applied to building software. The one I have had the most experience in recently is architecture planning and documentation. Both do not require writing code. Logically, it seems like writing code is the fastest way to build software. Yet, I’m finding that creating parallel work streams and strong API contracts only can happen when the upfront work of writing out schemas, API examples (with the underlying methods unimplemented) and box and flow diagrams is done. These documents once written last forever and will likely stay open in separate windows for reference as engineers build parts of the final product. In retrospect, this technique seems obvious - how would you build a house without a blueprint? - but the culture of measuring project progress by lines of code and GitHub activity remains unfortunately a staple of our industry.&lt;/p&gt;

&lt;p&gt;Counterintuitive techniques are easy to adapt once and then forget. Unlike intuitive techniques (ex. use TODO lists, follow routines, write unit tests, don’t climb up without grabbing onto something), counterintuitive techniques have to be remembered and willpower is required to use them (ex. clean up your TODO list, break routine if not effective, stop writing unit tests that have no value, you don’t need a good hold to climb up if you have solid footing). Said another way, they’re not free or easy to adopt and that’s why they’re useful. Like being a contrarian in the market, counterintuitive techniques are most likely to not be in use by a lot of people, so it follows there are the most gains to be had from adopting them.&lt;/p&gt;

&lt;p&gt;As a final note here, I think counterintuive techniques because they’re hard to find require deliberate practice. Sometimes it helps me to have this practice happen in a non-pressure situation, as my natural instincts would take over in a pressure situation. It’s easy to start overgripping on a hard bouldering problem to feel safe. On an easy route, flagging is easier to practice since falling is low probability. Practice needs to happen first where failure feels acceptable.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Oct 2019 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/2019/10/31/counterintuive-signals.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2019/10/31/counterintuive-signals.html</guid>
      </item>
    
      <item>
        <title>Focus and the Office</title>
        <description>&lt;p&gt;I’ve been thinking recently about the conditions necessary to produce great work. These conditions differ per person and may seem inconsequential when listed out. Standing versus sitting desk, light versus dark room, background noise versus complete silence, online versus offline - are these responsible for work quality?&lt;/p&gt;

&lt;p&gt;Most of my posts end up reading like Economist articles without the great writing - by this I mean that I always take a middle position toward complicated questions. Here though, I know I wholeheartedly believe that the conditions to produce high quality work are specific per person and require work to replicate. I don’t think it’s chance that so many authors retreat to cabins in the woods or mountain settings to write books. Setting oneself up for success in focusing and then delivering something great requires knowing oneself. When am I distracted? When am I completely in the zone?&lt;/p&gt;

&lt;p&gt;What’s interesting to me is that “working from home” - which really means working from a place someone believes gives them the best chance of work success, a place that isn’t necessarily home - is the only avenue most workplaces allow for people to optimize their own environments. Even the best crafted office is going to have some opinions built into it. These opinions are one or a group of people’s view on what makes a great office, and it’s obvious these views are all over the place. I have worked in open office plans, cubicle-based offices and offices where there were no desks and people sat on beanbags and couches. I believe in everything there is no silver bullet, but there really is no silver bullet to office environment perfection. Everyone is different, and it’s impossible to make an office work for everyone.&lt;/p&gt;

&lt;p&gt;Environment hugely influences focus, which hugely influences great work. Why do we so often assume a one-size fits all for environment? The common reason I hear is that people need to be able to meet in person and communicate as clearly as possible. If that’s true, why not have meetings in person and then let people do deep work that requires focus where ever they want?&lt;/p&gt;

&lt;p&gt;To be clear, this is not a pro remote-work article. Rather, it’s a suggestion that we all think more critically about the environmental conditions per person that lead to success.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Oct 2019 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/2019/10/30/focus.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2019/10/30/focus.html</guid>
      </item>
    
      <item>
        <title>Strategies for Long Projects</title>
        <description>&lt;p&gt;I’m in the middle of three multi-month to a year projects right now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Writing a book&lt;/li&gt;
  &lt;li&gt;Running a marathon&lt;/li&gt;
  &lt;li&gt;Building a new API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each I started months ago and have found brutally difficult in unique ways. For each, progress is often times non-visible and the visible progress is incremental. Running is frequently an exercise in watching your pace go up and down with no discernible reason for the zigs and zags. Many days feel like regressions. Direction can and will change - in writing my book, I’ve changed the plot significantly three different times. Each resulted in a substantial rewrite. Project goals are often moving targets. As is the case with almost everything, unexpected obstacles crop up that you didn’t forecast. Software is a living example here - when you have dependencies (and what software project doesn’t?), changes in those dependencies are changes you must adjust to.&lt;/p&gt;

&lt;p&gt;The saving grace here is that simply putting in the hours usually moves you closer to the goal. Failure is higher probability when time or effort on a project decreases. As a result, I think time budgeting and attitude make an enormous difference. Most of the ideas below deal with one or both. As I like to point out in all of my blog posts that prescribe behavior, the below is stuff that has worked for me and your mileage may vary. Here we go:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relentless, irrational optimism is the only attitude that works&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Something that seems trivial turns out to be nearly impossible. Mile 5 of a 20 mile run hurts like heck. A third party library massively changed its API. That programming language feature you were confident would resolve your issue doesn’t behave the way the docs said. Unexpected events are going to happen, and while you can’t control these events, you can control your response to them.&lt;/p&gt;

&lt;p&gt;“In the space between stimulus (what happens) and response, lies our freedom to choose,” &lt;a href=&quot;https://www.goodreads.com/quotes/459654-in-the-space-between-stimulus-what-happens-and-how-we&quot;&gt;writes Stephen Covey&lt;/a&gt;. Taking the time to craft your response when an unexpected event occurs is the opportunity to frame that event as opposed to letting that event frame you. I can’t stress how important I think this idea is - a bad reaction to new information can kill a project in its tracks. I look back on a few of the side projects I’ve stopped working on because I found some library or business that was doing the same thing. In retrospect, I understand that markets can have a large number of competing participants (check out the 10 different rent-a-cars near any major airport). It’s human nature to react negatively to information that isn’t congruent with our expectations. Taking time to respond to new information in addition to expecting the unexpected are strong defenses against negativity.&lt;/p&gt;

&lt;p&gt;Moreover, I believe that choosing to feel something can make you feel that way even if the feeling is artificially manufactured. What I mean by this is that when someone asks us to label how we feel, the label we select is based on how we physically feel at the moment. But what if you said the exact opposite of how you actually felt? Is it possible the re-labeling could become reality? This seems absurd on the face of it, but my experience has been that re-labeling works and causes an actual physical response.&lt;/p&gt;

&lt;p&gt;Of course, taking time and choosing a response is only part of the equation. The other part is infusing such responses with optimism, even if the optimism is a little irrational. I’m not advocating here for pie in the sky optimism - I’ll never run a sub four minute mile. What I am advocating for is optimism that represents a reasonable and possible outcome, even if a few things would have to fall into place for that outcome to happen. After all, our negative responses generally &lt;em&gt;assume&lt;/em&gt; a few things would have to happen for that outcome to play out, so it’s fair to make assumptions on the upside.&lt;/p&gt;

&lt;p&gt;As an example, let’s assume some third party you rely on changed its API and is deprecating the old API in a month. A negative response would implicitly assume that the required changes would take X days and just cause churn in the codebase. A positive response might assume Y days (&amp;lt; X) and that the new API included performance and other improvements AND that doing this refactor could be the subject of a blog post or tech talk that could be used to recruit great engineers or land consulting contracts.&lt;/p&gt;

&lt;p&gt;For the relentless optimist, every setback is 1) never as bad as it seems on the surface and 2) an opportunity in disguise. This view is healthier than the alternative, which is guaranteed to sap energy and fail to identify opportunities embedded in the unexpected event.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Documenting each day shows progress that would otherwise be hidden&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CHANGELOG&lt;/code&gt;s in software are great. They serve as a living document that traces the life of a project. It answers the question “What have the maintainers of this project been doing?” A personal changelog or journal can answer these same questions and prevent the negative feelings that can arise from feeling that a project is going nowhere.&lt;/p&gt;

&lt;p&gt;The reason these feelings arise can be that we just forget the past. For software, I’ve found this is often the time it takes to learn a new technology or understand the source code from a project you’re expected to contribute to. Both take significant time, but once you’ve acquired the skills, it then becomes easy to say “Why did &lt;taskX&gt; take me so long?&quot; Personal changelogs I think should be extremely detailed and include things like:&lt;/taskX&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spent five hours going through source of repo Y and looking at Stack Overflow and documentation. Tried and failed several times to refactor code - got some cryptic errors with a stack trace I didn’t understand. Finally talked to Bob and found out some this is expected behavior and the workaround is to use a forked version of library XYZ AND to set some environment variables to specific values. This isn’t documented anywhere, so I took the time to document it. Still working on refactoring code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The fact of the matter is that starting a project is extremely difficult - perhaps more difficult than the middle and end stages of long projects. Learning new things and creating new ideas and patterns requires time, often far more time than implementing the ideas and pattern.&lt;/p&gt;

&lt;p&gt;When a project is a group project, this time might even have some multiplier on it. &lt;em&gt;Agreeing&lt;/em&gt; on new patterns and ideas is perhaps no less difficult than thinking of those ideas and patterns in the first place. A mentor of mine also showed me recently that new groups often regress a bit in the early stages of forming new practices and adjusting to each others’ work patterns - &lt;a href=&quot;https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development&quot;&gt;these stages are called “forming” and “storming”&lt;/a&gt;. Group dynamics take time to get right.&lt;/p&gt;

&lt;p&gt;Changelogs are a way to document things that are easy to forget. When I get discouraged at the pace of a project, looking at my changelog / journal often helps me understand why things have played out the way they have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compounding matters a lot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Compounding generally is discussed in a financial context where interest accrues interest. For software, the equivalent here is developer tools you took time to write being used by you and your teams (code gen, scripts, deploy orchestration, etc.). For running, it’s increasing your V02max and being able to sustain the same effort for a longer time. In each case, the initial time investment saves time down the line and results in new opportunities that may save even more time. Time saved results in new work that saves more time that results in more new work and so on. This is a positive feedback loop.&lt;/p&gt;

&lt;p&gt;David Goggins in his book &lt;a href=&quot;https://www.amazon.com/Cant-Hurt-Me-Master-Your/dp/1544512287&quot;&gt;&lt;em&gt;Can’t Hurt Me&lt;/em&gt;&lt;/a&gt; talks about a memory bank that can be drawn on in times of adversity (or really any time). For each obstacle conquered in pursuit of your goal, you have created a memory that can help you overcome future obstacles. I’ve found this most evident in running - continually doing long runs has made it easier to push through pain. “I can’t believe I have four miles to go” over time has slowly become “I only have four miles to go”. The memory bank re-frames what mileage means. Just like compound interest, positive memories help accrue more positive memories which accrue more positive memories. Some athletes call this “building a base”. The base sets what is normal. By continually increasing the floor that is normal behavior, long-term projects can deliver compounding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finding the time means being extremely defensive of your time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Time is finite. It can be uncomfortable to accept this and act as a fierce guardian of your own time, as doing so may include declining social invitations. I recommend watching &lt;a href=&quot;https://www.youtube.com/watch?v=arj7oStGLkU&quot;&gt;Tim Urban’s TED talk&lt;/a&gt; on procrastination. Tim envisions time as a series of 10 minutes blocks - giving up any of those blocks mean that block is lost forever.&lt;/p&gt;

&lt;p&gt;I think when I’ve talked about this point with friends and family, their reaction is that doing this means becoming an anti-social hermit and making some tradeoff that’s harmful to you. That hasn’t been my experience when I’ve acted in defense of my long-term projects. In fact, &lt;em&gt;not&lt;/em&gt; acting in defense of my long-term projects has felt harmful to me. Falling behind on a project that’s important to me introduces feelings of guilt and frustration.&lt;/p&gt;

&lt;p&gt;Importantly, I think life’s many priorities can be balanced with long-term projects. It has been written that Walter Isaacson wrote many of his books on vacations with friends and family. He would slip away for a few hours at a time, and no one really noticed. He had a great time on these vacations and it seems like nobody was negatively impacted by his small absences.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I wanted to conclude by saying I truly believe long-term projects can lead to transformative returns, even if they fail. Trying to run a marathon, for instance, has brought me into contact with dozens of runners at work and in a running club I go to I probably never would’ve met otherwise. Meeting these runners has led to relationships that have helped me on non-running projects. It’s obviously helped me a ton with my running. I think I’ve witnessed first hand that ambitious projects generate supportive responses from people - on the marathon, the book and the new API, countless people have offered their support, and I’ve been glad to take it.&lt;/p&gt;

&lt;p&gt;I want to encourage myself and anyone reading this to keep trying things that are hard and take a long time. It will be tempting to quit, but overcoming that temptation could be the best decision you ever make.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Sep 2019 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/2019/09/28/long-projects.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2019/09/28/long-projects.html</guid>
      </item>
    
      <item>
        <title>The Group Effect</title>
        <description>&lt;p&gt;I first read about the Group Effect in Matt Fitzgerald’s book &lt;a href=&quot;https://www.amazon.com/How-Bad-You-Want-Psychology/dp/1937715418&quot;&gt;&lt;em&gt;How Badly Do You Want It&lt;/em&gt;&lt;/a&gt;, a collection of stories about endurance athletes who overcame incredible odds. &lt;a href=&quot;https://mensrunninguk.co.uk/top-feature/the-group-effect/&quot;&gt;Fitzgerald summarizes&lt;/a&gt; the group effect below:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The tiny of island of Cuba has captured 67 Olympics medals in the sport of boxing since 1968, more than any other country. Germany has finished either first, second or third in 13 of the last 16 World Cups. Nations that dominate a particular sport share one basic characteristic: their people are crazy for that sport. To put it in a formula: national dominance of a sport is a function of the scope and intensity of its citizens’ participation in it. If enormous numbers of a nation’s people participate in a sport, that nation is certain to do quite well in global competition. Sociologist John Bruhn dubbed this phenomenon the group effect. The psychobiological model of endurance performance explains how it works in the context of sports like running.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;According to this model, any factor that reduces the amount of effort an athlete perceives at a given level of exercise intensity will enhance performance. When people work together, their brains release greater amounts of mood-lifting, discomfort- suppressing endorphins than they do when the same task is undertaken alone. Consequently, endurance athletes perceive less effort and perform better when training and racing cooperatively than they do alone. The group effect is not something that has to be acquired. It is a coping skill that exists latently in everyone, ready to be activated by the right situation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am a believer that the group effect is real. In sports and work settings, I believe my perception of effort has been positively impacted by being in groups. Difficult tasks feel less difficult for me when there is a social element to these tasks. The shared experience of running or pair programming, for instance, makes fatigue and complexity easier to deal with because you have one or more people to share it with.&lt;/p&gt;

&lt;p&gt;Realizing the benefits of the group effect requires a group to exist. For various reasons, there may not be a group for the thing you want to improve at. And even if there is, it may not practice the thing together. An example of this group-but-not-group-effect situation would be an engineering culture where the pull request culture is to sight-read and press approve or make some small comments. Software engineer group-effect from my experience only comes from two or more people running code together and experimenting with the effects of small and large changes in an in-person setting. Said another way, just because a group does the same thing doesn’t mean they do it together.&lt;/p&gt;

&lt;p&gt;I think it’s possible that when people talk about culture, they’re actually referring to a result of the group effect. My experience has been that a culture is positive for me when 1) everyone feels comfortable, 2) everyone feels they are improving and 3) everyone feels they are adding value. The group effect directly addresses (2) - per the article above, people “perceive less effort and perform better between when training… cooperatively than when they do alone.”&lt;/p&gt;

&lt;p&gt;In a way, (3) is an extension of (2), because if everyone is improving, everyone (potentially) feels that just by virtue of showing up and putting in effort, they’re adding to each team member’s success. With regard to (1), I’m not sure what group dynamics need to arise in order for everyone to feel comfortable. I do think that spending more time together generally improves relationships between people, so more group effect may lead to more comfort in being a part of the group.&lt;/p&gt;

&lt;p&gt;Knowing the group effect exists is an argument for introducing it when possible. Yes, some activities are probably easier when performed solo. Pair-programming often feels less efficient to me than solo-programming, but I also don’t think efficiency is a proxy for consistency or resistance against quitting. Some of my biggest breakthroughs in projects have come from good pair programming sessions. There’s a place for both, and neither should be ignored or said to be always better than the other.&lt;/p&gt;

&lt;p&gt;Some potential ways in software and sports to introduce the group effect:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;For code reviews - moving code reviews to in-person, interactive Q&amp;amp;A sessions, where the reviewer runs the code and explores all possible code paths alongside the author&lt;/li&gt;
  &lt;li&gt;For any endurance race - finding someone or group of people doing the same race on a similar timeline and training together on at least a weekly cadence&lt;/li&gt;
  &lt;li&gt;For spiking on a new technology or language - meeting weekly or more to pair-program, review useful resources and discuss difficult concepts&lt;/li&gt;
  &lt;li&gt;For improving an athletic weakness - finding someone with the same weakness (ex. backstroke is weakest stroke for an individual medley swimmer, swimmer sees improving backstroke as easiest way to faster time) and crafting group training plan to make weakness strength&lt;/li&gt;
  &lt;li&gt;For changing a major issue in a codebase - devoting one or two days of the week to talk about the issue, brainstorm solutions and prototype solutions (through pair-programming) together. Importantly, the solution here would be group-created versus individual-created, which in my opinion is one reason resistance crops up for good ideas on introducing new patterns into a codebase and deprecating old patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the very least, I think it’s worth exploring whether the group effect will work in domains that have traditionally been one-person activities.&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Sep 2019 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/2019/09/15/the-group-effect.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2019/09/15/the-group-effect.html</guid>
      </item>
    
  </channel>
</rss>