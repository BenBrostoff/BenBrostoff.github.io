<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ben Brostoff</title>
    <description></description>
    <link>http://0.0.0.0:4000</link>
    <atom:link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>AWS Explained to Shareholders From a Developer</title>
        <description>&lt;p&gt;There has been significant discussion recently around the following revelation in &lt;a href=&quot;https://www.sec.gov/Archives/edgar/data/1759509/000119312519059849/d633517ds1.htm&quot;&gt;Lyft’s S1&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In January 2019, we entered into an addendum to our commercial agreement with AWS, pursuant to which we committed to spend an aggregate of at least $300 million between January 2019 and December 2021 on AWS services. If we fail to meet the minimum purchase commitment during any year, we may be required to pay the difference, which could adversely affect our financial condition and results of operations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many reactions I’ve seen to this post have expressed surprised at this dollar amount and suggested Lyft should build their own data center (&lt;a href=&quot;https://twitter.com/MohapatraHemant/status/1102401615263223809&quot;&gt;which was nicely rebutted here&lt;/a&gt;) or switch to another cloud provider.&lt;/p&gt;

&lt;p&gt;In addition, AWS CEO Andy Jassy &lt;a href=&quot;https://www.cnbc.com/2019/02/28/aws-ceo-andy-jassy-its-really-easy-to-lower-prices.html&quot;&gt;was recently on Mad Money&lt;/a&gt; and revealed AWS has a $30 billion run rate. The CNBC article on the appearance notes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AWS has become a crucial part of Amazon’s overall business. In 2018, the unit generated $25.66 billion in revenue, or 11 percent of Amazon’s total sales, up from 10 percent of overall revenue in 2017. Growth at AWS accelerated to 47 percent last year from 43 percent in 2017.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most significantly, Jassy readily admitted to constant price decreases over the years in the various AWS product offerings:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“It’s actually really easy to lower prices,” Jassy told Jim Cramer on CNBC’s “Mad Money” on Thursday. “It’s much harder to be able to afford to lower prices.” In the past decade, AWS has cut prices 70 times, he said.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This appearance, combined with Lyft’s S1, have sparked various attempts to value AWS as a standalone business, determine the extent of AWS’ competition, size the total cloud market, etc. Jassy’s comments also have worried shareholders that AWS margins could materially decline.&lt;/p&gt;

&lt;p&gt;This post is an attempt to offer some thoughts on AWS spend from a developer perspective. Lost in much of the financial analysis of AWS is how developers use it on a day-to-day basis. This piece of information is important in doing financial analysis because it can offer insights into the costs of switching cloud providers and Amazon’s probability of retaining customers. I’m not suggesting this post could be used to quantify retention rates or market share, but that some of the information may be a good starting point in terms of how financial modelers think about AWS’ business.&lt;/p&gt;

&lt;p&gt;As background, I’m a developer who owns my own consulting company and have worked with a variety of clients that have unique AWS setups. Each client has unique tech needs based on their unique business models and growth stage. Each one picked AWS as their cloud provider.&lt;/p&gt;

&lt;p&gt;Notably, not a single one has ever seriously raised the issue of AWS pricing or wanting to switch to Google Cloud Platform (GCP), Microsoft Azure or another service. Again, this is solely my experience, but from a developer perspective, many solutions to problems discussed on blogs, at conferences or in person assume that AWS is the default cloud platform and speak about solutions with a specific set of AWS services in mind. This is the strength of the ecosystem at work.&lt;/p&gt;

&lt;p&gt;As an example, serverless architectures have recently become quite popular in the developer community. Serverless is a term that means from a cost perspective fees come in when useful “work” is occurring on a server rather than when time is elapsing. As it pertains to AWS, this is the difference between using an EC2 instance (a service that is priced per unit of time depending on the server specs) and &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; (a service that is priced closer to per unit of work (ex. per request)).&lt;/p&gt;

&lt;p&gt;Many developers when they talk about serverless architectures are usually talking about AWS Lambda. It’s very common to hear suggestions to the effect of “And you could write a Lambda task to do such-and-such and then…” AWS has made Lambda easy to pair with a number of its 100+ services, allowing developers to schedule Lambda tasks to occur immediately after file uploads to a specific S3 bucket (its storage service), entry of an item into SQS (its queuing service) or even specific patterns in Cloudwatch (its logging service). Serverless is as much a discussion about AWS as it is the broad idea of paying per unit of work and not per unit of time.&lt;/p&gt;

&lt;p&gt;Indeed, AWS is aware of this discussion and plays into the developer enthusiasm for serverless. Let’s look at an example directly from Amazon’s docs on serverless architectures:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/brostoff-blog/aws_infra_advertising.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To be clear here — to develop a simple weather app, AWS is suggesting pulling in four different AWS services — S3, API Gateway, Lambda and DynamoDB. Code will have to be written for each service and their interactions monitored. The costs will have to be tracked and made understandable for business stakeholders. This setup may even need to be rebuilt several times as the needs of the weather app become more clear.&lt;/p&gt;

&lt;p&gt;The paragraph above may seem crazy to you, but rest assured it is actually less crazy than real life. Only four AWS services seems pretty low in the context of apps I’ve worked on.&lt;/p&gt;

&lt;p&gt;I make this point to demonstrate that AWS is deeply ingrained in developer culture and becoming more deeply ingrained. It is a staple of how developers think about scaling operations and has entered developer lexicon for the foreseeable future.&lt;/p&gt;

&lt;p&gt;Changes in AWS change how developers think about the future and what’s possible. A release of a new AWS service or change to an existing service will trigger thousands of blog posts, training seminars and discussions. As a result, AWS exerts control over the future of software, and by extension its cost, performance and maintainability.&lt;/p&gt;

&lt;p&gt;Going back to the example of Lyft, I take issue with analysis that hones in on the $300 million AWS bill when the more important consequence is the complexity associated with this bill. Notice how Lyft never breaks down the spend itself. Is it serverless or server-based? Which AWS services make up the majority of the spend? How much time do Lyft developers currently spend writing code around AWS, and what would be the cost to switch platforms?&lt;/p&gt;

&lt;p&gt;As a result, I seriously question analysis that attempts to treat AWS spend as a per-transaction rake for Amazon. Credit card scanners are a commodity and not a core piece of company infrastructure heavily customized by full-time employees.&lt;/p&gt;

&lt;p&gt;While companies can and do model AWS costs with good accuracy, what I doubt is modeled nearly as well is the amount of time developers spend customizing and tuning AWS services. I’ve spent hundreds of hours in total reading AWS documentation, blog posts, source code from libraries that use AWS, talking to AWS sales reps and reading AWS message boards. It’s a key part of my job and I’m often hired with my knowledge of AWS specifically in mind.&lt;/p&gt;

&lt;p&gt;To underscore that AWS is not a commodity, I want to offer some more details on the costs in developer time of switching to another cloud provider.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The subject of security on AWS is enormous; there is a &lt;a href=&quot;https://d1.awsstatic.com/whitepapers/Security/AWS_Security_Best_Practices.pdf&quot;&gt;74 page whitepaper on it&lt;/a&gt;. There are consulting shops that specialize in this subject and charge absurd amounts of money to review your security stack. AWS’ security model requires knowledge of their &lt;a href=&quot;https://aws.amazon.com/iam/&quot;&gt;Identity and Access Management&lt;/a&gt; service and the security settings associated with each service (this could be security rules for EC2 or read/write permissions on S3). Rebuilding this security model in another platform would be non-trivial.&lt;/p&gt;

&lt;p&gt;Additionally, if your company has government clients, then storing their data in the cloud will require &lt;a href=&quot;https://aws.amazon.com/compliance/fedramp/&quot;&gt;FedRAMP&lt;/a&gt; certifications. The AWS docs note:&lt;/p&gt;

&lt;p&gt;Cloud service providers who want to offer their products and services to the US government must demonstrate FedRAMP compliance.&lt;/p&gt;

&lt;p&gt;Any company running their own data center would have to separately apply for these certifications, which can take in excess of a year to get. AWS is certified for most of its core offerings. Security within organizations, between organizations, between organizations and consumers and organizations and the government is handled in a unique way by AWS, further de-commoditizing it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think the average non-developer would be shocked if they searched a company codebase for references to AWS. I’ve yet to see a codebase that does not pull in a variety of AWS libraries and structures significant amounts of code around how these libraries work. Changing all this code would be non-trivial and would definitely require significant re-writes that would pull developers off feature work. This is not find-and-replace.&lt;/p&gt;

&lt;p&gt;There is even a robust ecosystem of companies that write code that target the various AWS services and make money off it. Heroku (a Y Combinator funded company that was purchased by Salesforce in 2010) runs many of its servers on AWS. Heroku is the middleman between thousands of companies and AWS. Many code registries tap into AWS to pull down third-party code. These same registries may also rely on Heroku or AWS middlemen. Even if a company switches its own cloud infrastructure to another provider, there is most likely still an AWS dependency in the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer Workflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Much of what a developer does day to day in my experience involves using various AWS services. Some examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reviewing logs or performance metrics to determine the exact circumstances in place when a bug, outage or other event occurred. Developers can use this information to better determine the cause of the event&lt;/li&gt;
  &lt;li&gt;Monitoring, downloading or manipulating images, video, audio or other files internal users or customers uploaded into S3 (recall this is Amazon’s Simple Storage Service). S3 also can be used to host entire websites; in this case, the code for the website itself is hosted on S3&lt;/li&gt;
  &lt;li&gt;Creating, updating or deleting security rules to protect a company’s digital assets. One example of this is the inbound and outbound security rules on an EC2 instance (said another way, a server) that determine which IP or IP ranges the server can receive data from or send data to. Depending on their seniority or job responsibilities, developers may also be responsible for managing other developers’ permissions on various AWS services (the relevant AWS service here is the aforementioned IAM)&lt;/li&gt;
  &lt;li&gt;Configuring services that drive some critical part of a company’s product. AWS has services for machine learning, video games, the internet of things and even satellites. Each has hundreds if not thousands of dials you can turn for your specific use case
Jeff Bezos in a &lt;a href=&quot;https://www.youtube.com/watch?v=6nKfFHuouzA&quot;&gt;2008 presentation&lt;/a&gt; to a Y Combinator batch overviews a number of real world AWS use cases. This video is definitely worth a watch if you’re interested in how Bezos views AWS’ value add (notably, he speaks in depth about Blue Origin’s use of AWS)
All of these tasks to some degree require familiarity with the AWS UI and how to achieve certain tasks (this is mockingly known as “click-ops” in some circles). Devs would need to retrain themselves in all these tasks, some of which would no longer exist or exist in very different forms to accommodate a switch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, when the UI becomes cumbersome, developers will automate repetitive tasks through the AWS &lt;a href=&quot;https://aws.amazon.com/cli/&quot;&gt;Command Line Interface&lt;/a&gt; (CLI), which also requires significant research and practice to get productive in. The cost of a switch from a developer workflow is to uproot how developers interact with the cloud from the browser and within code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hiring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In my experiences as both an interviewer and interviewee, AWS has been a key part of hiring. I’m not judging whether this is right or wrong, but rather commenting that interviewers have asked me about it and interviewees have brought it up unprompted. There is an &lt;a href=&quot;https://aws.amazon.com/certification/&quot;&gt;AWS Certification program&lt;/a&gt; and I’ve been asked whether I’m certified and seen certs listed on resumes I’ve reviewed. Choosing GCP or Azure as your company’s cloud provider will likely increase the amount of time it takes for an average developer to come in and get comfortable with the company’s cloud setup.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In closing, I want to offer my thoughts on two questions that I think are extremely relevant for analyzing AWS spend and valuing AWS as a business.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are cloud services a commodity?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Absolutely not. Here’s the definition of commodity from Merriam-Webster (note I’m using the third definition, which I think most applies to economics):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A good or service whose wide availability typically leads to smaller profit margins and diminishes the importance of factors (such as brand name) other than price&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I do not believe cloud services in very specific forms with very specific interactions — like the aforementioned weather app AWS services — are a commodity. That said, GCP has tried its best to map each AWS service one-to-one with its own.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/brostoff-blog/gcp_comp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m not convinced at all that migrating is as simple as consulting this table and writing the migration to go from one service to the other.&lt;/p&gt;

&lt;p&gt;Building the aforementioned weather app in the way AWS recommends requires knowledge of four specific services. Yes, these services could be in part replicated with GCP or Azure, but it would take significant time and effort to rebuild it and there’s no guarantee the cost-savings would be significant. For commoditized goods, switching suppliers is trivial. From a code perspective, this is find-and-replace. Switching cloud services is anything but find-and-replace.&lt;/p&gt;

&lt;p&gt;Were this not true, I don’t think AWS’ competitors would author comprehensive guides on migrations. If you google “migrate aws to google cloud”, here are the first four results that come up:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/brostoff-blog/migration_search.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Google clearly has skin in the game and has spent time and money promoting the idea that switching is possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it worth switching from AWS to another cloud provider to save money or starting a company and using another cloud provider?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I did some research on migrating from AWS to GCP and what I found confirmed that this is a difficult undertaking. It’s notable here that complete migrations are not always the best choice for most companies — some companies are diversifying their cloud providers and picking the right tool for the right job. There is no doubt in my mind some Azure or GCP services make more sense than their AWS equivalents for specific companies in specific situations. That said, an 100% migration likely entails spending lots of times in areas where performance and cost improvement would be minimal. Some cloud services to be fair are commodities — how much of an improvement is your company going to get from moving from AWS Simple Storage Service to Google Cloud Storage?&lt;/p&gt;

&lt;p&gt;For new companies, I tend to think cost-cutting is less important than product-market fit. Discovering product-market fit is going to be easier with a cloud provider that has a rich ecosystem of libraries and documentation, as well as a large potential talent pool for working with those services.&lt;/p&gt;

&lt;p&gt;In conclusion, I think more discussions about margin compression and market share at AWS need to take into account what a critical role AWS plays in the day-to-day life of developers. Margin compression in part assumes that commoditization drives down prices — I’ve tried to rebut the idea here that AWS services are commodities. I’ve also tried to demonstrate that switching providers is non-trivial. When migrations do happen, they may be piecemeal and not complete infrastructure changes.&lt;/p&gt;

&lt;p&gt;Modeling cash flows requires making significant assumptions even for the most simple of businesses. AWS is as complicated a business as it is a product, and I would caution current and future shareholders against unfounded assumptions.&lt;/p&gt;

&lt;p&gt;Disclaimer: I am an AMZN, GOOGL and MSFT shareholder. I am an AWS, GCP and Azure customer.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:4000/2019/03/11/aws-for-shareholders.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2019/03/11/aws-for-shareholders.html</guid>
      </item>
    
      <item>
        <title>Exploring TypeScript Generics</title>
        <description>&lt;p&gt;I’ve been using TypeScript on several projects and wanted to jot down some quick thoughts on generics. To be clear, generics are not a new programming language construct and existed in languages liked C# and Java decades before TypeScript. That said, I find generics interesting in the context of TypeScript because I see and use them so often.&lt;/p&gt;

&lt;p&gt;First, what are generics? I think of generics as a way to represent types without explicitly defining a type. A generic type is generic in that it’s like a function parameter- able to represent anything. Also like a parameter in a function, its value can be passed as an argument (via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;SomeType&amp;gt;&lt;/code&gt;) and referenced throughout the body of the function. This quality is one of many reasons generics are more powerful than simply using the &lt;code class=&quot;highlighter-rouge&quot;&gt;any&lt;/code&gt; type. &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/generics.html&quot;&gt;The official TypeScript docs on generics&lt;/a&gt; are an excellent resource on when to use generics, and I highly recommend them.&lt;/p&gt;

&lt;p&gt;Below are some use cases for generics I’ve found helpful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Promises&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In TypeScript, promises can be initialized such that they “lock” a generic into a type:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/brostoff-blog/promise.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/TypeScript/blob/master/lib/lib.es2015.promise.d.ts#L33&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; source&lt;/a&gt; makes the warning above possible. IDEs use the source to determine that the callback in the promise constructor must return something of type &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;PromiseLike&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; in this case is number. Note that PromiseLike here is a &lt;a href=&quot;https://github.com/Microsoft/TypeScript/blob/master/lib/lib.es5.d.ts#L1376-L1384&quot;&gt;separate type&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the case of promises, I find generics useful because I can gain an understanding of what an async function resolves to without having to look at source code. Consider the following non-TypeScript example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/fa6a4b370cfe1292d3e9db98b96860c6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now check out the TypeScript equivalent:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/a77c068e8e8d41191d434077b95cff8e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Only in the second example can the developer know with some confidence that the promise resolves to a &lt;code class=&quot;highlighter-rouge&quot;&gt;UserProfile&lt;/code&gt; (well, or &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;PromiseLike&amp;lt;UserProfile&amp;gt;&lt;/code&gt;). Without TypeScript, it’s necessary to look at the function definition and the return value. Even then, the name &lt;code class=&quot;highlighter-rouge&quot;&gt;lookupProfile&lt;/code&gt; may be inaccurate depending on how it was implemented; TypeScript at least will fail to compile if the type returned is not a &lt;code class=&quot;highlighter-rouge&quot;&gt;UserProfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Importantly, code changes in &lt;code class=&quot;highlighter-rouge&quot;&gt;lookupProfile&lt;/code&gt; are nicely handled by TypeScript generics. Let’s say the function can return an admin profile or a user profile - you can simply adjust the type to &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&amp;lt;UserProfile | AdminProfile&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React Components&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React.SFC&lt;/code&gt; - React’s stateless functional component - has a type definition like the below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/dd9ae512d7d7eb26368e8f88a750ceda.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In the above, the type parameter is also passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;propTypes&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultProps&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;ValidationMap&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Partial&lt;/code&gt;, respectively, which also take generic arguments.&lt;/p&gt;

&lt;p&gt;Writing components without TypeScript might look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/199b5d3097ef775243743a5392c51760.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And now with TypeScript:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/9af73129bd46ac462f3f74987dbffaeb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;While using &lt;code class=&quot;highlighter-rouge&quot;&gt;PropTypes&lt;/code&gt; is a perfectly valid option here and will offer some of the same benefits as TypeScript, you can still run a React application with components that are missing required props; it will just crash at runtime.&lt;/p&gt;

&lt;p&gt;With TypeScript, this error will happen at compile time, saving time and possibly a production bug that would never have been caught until users found it. Better yet, it offers a useful error message to developers who violate the component spec - let’s say in the case of a typo:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Type ‘{ message1: number; }’ is not assignable to type ‘IntrinsicAttributes &amp;amp; SomeProps &amp;amp; { children?: ReactNode; }’.
  Property ‘message1’ does not exist on type ‘IntrinsicAttributes &amp;amp; SomeProps &amp;amp; { children?: ReactNode; }’.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, &lt;em&gt;this error is not raised in the non-TypeScript case&lt;/em&gt;. The React component still renders and the div just has no text.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apollo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Apollo client uses generics frequently throughout the result. I only highlight &lt;code class=&quot;highlighter-rouge&quot;&gt;ApolloQueryResult&lt;/code&gt; and the HOC &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql&lt;/code&gt; in this discussion, but rest assured generics are heavily used in the Apollo codebase.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ApolloQueryResult&lt;/code&gt; (&lt;a href=&quot;https://github.com/apollographql/apollo-client/blob/master/packages/apollo-client/src/core/types.ts#L19-L25&quot;&gt;source here&lt;/a&gt;, returned from a query or mutation) takes a generic that describes data in a graphql response. The generic argument gets passed to the data property on the Apollo result. The advantages of this type are similar to the advantages of TypeScript promises (it actually acts as the &lt;a href=&quot;https://github.com/apollographql/apollo-client/blob/master/packages/apollo-client/src/ApolloClient.ts#L274&quot;&gt;generic argument&lt;/a&gt; a promise accepts).&lt;/p&gt;

&lt;p&gt;I’ve used Apollo without TypeScript and remember being frustrated with seeing different components extract different parts of &lt;code class=&quot;highlighter-rouge&quot;&gt;ApolloQueryResult&lt;/code&gt; - some components would utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;networkStatus&lt;/code&gt;, and / or &lt;code class=&quot;highlighter-rouge&quot;&gt;errors&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; especially was a difficult property to work with because knowing its shape - at least for me - generally required logging a response.&lt;/p&gt;

&lt;p&gt;TypeScript makes this logging unnecessary (well, less necessary - to be clear it’s impossible to know what the server will send back at compile time). Apollo provides a &lt;a href=&quot;https://codesandbox.io/s/github/apollographql/apollo-link-rest/tree/master/examples/typescript&quot;&gt;code sandbox&lt;/a&gt; here with a great example, part of which is copied in a gist below. Note that this example doesn’t actually use ApolloQueryResult and instead uses a similar prop from react-apollo that &lt;a href=&quot;https://github.com/apollographql/react-apollo/blob/apollo-client-2.0/src/types.ts#L66-L69&quot;&gt;gets added from &lt;code class=&quot;highlighter-rouge&quot;&gt;ChildProps&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/4e544db73630b6e488b58bca8272c930.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql&lt;/code&gt; higher order component &lt;a href=&quot;https://github.com/apollographql/react-apollo/blob/master/src/graphql.tsx#L10-L31&quot;&gt;accepts two generic arguments&lt;/a&gt;, one of which describes the data from &lt;code class=&quot;highlighter-rouge&quot;&gt;ApolloQueryResult&lt;/code&gt;, and the other which describes the props passed to the component being wrapped by the higher order function.The graphql HOC takes the advantages described with &lt;code class=&quot;highlighter-rouge&quot;&gt;ApolloQueryResult&lt;/code&gt; and React component and combines them. It’s now obvious what the graphql server should be returning as well as what props the wrapped component expects.&lt;/p&gt;

&lt;p&gt;Side note - one interesting thing I found out about &lt;code class=&quot;highlighter-rouge&quot;&gt;ChildProps&lt;/code&gt; while researching this post is that it takes in two generics and from its constructor returns an &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/advanced-types.html&quot;&gt;intersection&lt;/a&gt; of types. This is a use case of generics that is extremely powerful; creating types that can intersect, unionize or do anything with multiple types to create new types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My brother and I have a multi-year debate going on about the value of code comments. I am a comment minimalist for many reasons, but the existence of type systems is the main point I fall back on. Compile time checks and good error messages in my opinion are a much better explanation of code than long comments.&lt;/p&gt;

&lt;p&gt;Generics offer the reusablity, type assertions and ease of understanding that comments cannot replicate. Most importantly, comments cannot prevent a class of bugs that could have been prevented at compile time.&lt;/p&gt;

&lt;p&gt;Generics make creation and reusability of types easy. The ability to create types that produce other types saves you a lot of typing - pardon the pun.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:4000/2019/01/12/exploring-typescript-generics.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2019/01/12/exploring-typescript-generics.html</guid>
      </item>
    
      <item>
        <title>Stop Resulting</title>
        <description>&lt;p&gt;In 2018, the best lesson I learned was to stop creating narratives based on results.&lt;/p&gt;

&lt;p&gt;Creating a narrative based on results is what former professional poker player and World Series of Poker Champion Annie Duke calls “resulting” in her book &lt;a href=&quot;https://www.amazon.com/Thinking-Bets-Making-Smarter-Decisions-ebook/dp/B074DG9LQF&quot;&gt;Thinking In Bets&lt;/a&gt;. One example Duke returns to throughout the book is some poker players’ tendency to use the results of a hand to evaluate the decisions that took place during it.&lt;/p&gt;

&lt;p&gt;Players that fall into the trap of resulting often want to preserve a narrative that emphasizes their own (assumed) above-average skill. These players believe decisions made if they won a big hand were skill and not luck-based. Conversely, to preserve this narrative, these same players assume their losses were luck and not skill-based.&lt;/p&gt;

&lt;p&gt;In reality, luck plays a role in the outcome of any individual poker hand. As Duke notes in the book, if a player is 80% favored to win a hand before more cards are placed on the table, the same player losing the hand once all cards are out is not wrong, but part of the 20% chance another player wins.&lt;/p&gt;

&lt;p&gt;The outcome of a hand like that isn’t part of a narrative, but part of a statistical distribution. The player who lost the hand needs to place their decision to play before cards came out in the context of the 80%, and the one who won should recognize they only had a 20% chance of victory in the pre-flop situation.&lt;/p&gt;

&lt;p&gt;Resulters ignore or manipulate this context in order to draw a lesson from an outcome that fits a narrative. Resulting is clearly detrimental to learning because it fails to consider significant portions of the why behind decisions — views of uncertainty at the time the decision was made, and whether those views were accurate.&lt;/p&gt;

&lt;p&gt;My opinion — based on my own life — is that most junior and mid-level jobs prepare people to be resulters. The jobs I had early out of college involved implementing well defined specs in code (ex. hide the button when the user isn’t authorized) or making template-based Excel models (ex. reduce the cash flow 20% in the stress test). Quality of work was easy to measure — the code or the model did what was expected.&lt;/p&gt;

&lt;p&gt;The outcomes in the businesses I worked at were also easy to measure (whether I was looking at the right outcomes is for another blog post). Looking at user traffic or deals won or capital raised at what valuation was the scoreboard to me. So, my logical conclusion most times until this year was:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If I execute well, my company will have a higher probability of success&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, this may come off as controversial, but for the majority of jobs at the majority of companies, I believe this statement to be wrong. Most people at companies execute ideas created by others and execute them fairly well. Based on the ever-improving quality of tools in finance and web development — the two industries I’m most familiar with — good execution is becoming easier and easier.&lt;/p&gt;

&lt;p&gt;When was the last time you saw a start-up that did not have a flashy looking product or an impressive demo (signs of great execution)? Yet the statistics are clear — most start-ups fail. Clearly, execution isn’t the whole story, or success would be more common. It may not even be positively correlated with success, as evidenced by start-ups where unpolished prototypes representing a pivot saved the day, supplanting polished existing products.&lt;/p&gt;

&lt;p&gt;I started my own software consulting business this year and gained an appreciation for the impact of confusing process and outcomes. My first introduction to this idea was getting clients. Working through a combination of LinkedIn, AngelList, HN’s Who’s Hiring, networking events and friends and family, I found some introductory calls would go swimmingly and others would be a complete failure.&lt;/p&gt;

&lt;p&gt;My actions before the calls were the same — same research process, same introduction, mostly same pitch (with some tweaks over time as I learned more).&lt;/p&gt;

&lt;p&gt;I initially equated the bad outcomes to lack of skill and the good ones to skill, but over time it became clear that companies have varying degrees of acceptance to contracting. Some companies I encountered only had developers that were contractors; others only had full-time developers. There was no easy way to gain this information without doing the call in the first place.&lt;/p&gt;

&lt;p&gt;I now accept based on the data I’ve gathered that the percentage of companies willing to hire contractors for the services I provide is probably below 25%. This is not to say I haven’t tanked calls and performed well on others; it’s just that I hear the “we generally don’t hire contractors” line or some variation of it 75% of the time. Some of these companies can still be convinced, but the odds of success are far lower than a company with previous positive experiences with contractors.&lt;/p&gt;

&lt;p&gt;Another example — early in my search for clients, I found a majority of companies asking for help with devops, specifically Kubernetes. I had to pass on these opportunities as my Kubernetes experience is minimal. I became concerned that the only consulting opportunities might involve Kubernetes, despite the fact that the sample size at that point was probably five 30 minute discussions.&lt;/p&gt;

&lt;p&gt;I can say now with a full year of calls under my belt that help with Kubernetes or devops tasks represents a small proportion of the consulting asks I get. The spike in asks at the beginning was the result of a small sample size. Deriving information from this sample was ill-advised and a classic example of &lt;a href=&quot;https://medium.com/@bmb21/stop-tape-watching-f188df01b9b7&quot;&gt;watching the tape&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rejections by companies or opportunities I decline because I can’t help I used to see as a personal failure, and sometimes still do. But I think this is an insidious form of resulting that will hurt my business long-term, just as assuming knowledge of one JavaScript framework will be worth just as much today as it is in three years. Deep diving into whatever technology is popular or continually using the same tools can both be harmful when driven by knee-jerk interpretation of results. Execution without constant evaluation of what is being executed is, as discussed in Naval Ravikant’s recent podcast with Kapil Gupta, &lt;a href=&quot;https://startupboy.com/2018/12/25/the-truth-about-hard-work/&quot;&gt;hard work for hard work’s sake&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Changes in priorities and plans are evidence that leaders of a business are evaluating the probabilities of success for different strategies, be it correctly or incorrectly. Importantly, this view is different from what I used to believe. It used to hugely frustrate me when I worked on some complicated interface for months only for it be thrown away. I would attribute the code churn to bad communication between sales and engineering — an execution failure. Perhaps this explanation is accurate some of the time. Plans also change because new information forces strategy changes.&lt;/p&gt;

&lt;p&gt;Resulters blame execution and bad decisions for why certain strategies don’t pan out. They fail to recognize that their evaluation is based on outcomes. The execution was good if the sales person made the sale; the decision to play the hand was bad if the player lost the hand.&lt;/p&gt;

&lt;p&gt;Figuring out what needs to be done I now believe is a process that requires viewing process and outcomes separately. The risk of tying good and bad outcomes to skill through a narrative is rejecting useful strategies and embracing harmful ones. In 2019, I want to eliminate this risk by separating process and outcomes.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:4000/2018/12/27/biggest-lesson-2018.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2018/12/27/biggest-lesson-2018.html</guid>
      </item>
    
      <item>
        <title>EV is Everything</title>
        <description>&lt;p&gt;Expected value (EV) is the best mental model I know of for decision making. In this post, I want to explain how EV has begun to guide much of my decision making about the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is EV?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, let’s back up and give a broad overview of what expected value is and why it’s important. EV &lt;a href=&quot;https://www.google.com/search?q=expected+value&quot;&gt;per Google&lt;/a&gt; is “a predicted value of a variable, calculated as the sum of all possible values each multiplied by the probability of its occurrence.” I interpret this as a wordy way of saying EV is the chance something will happen multiplied by the payoff if it does happen.&lt;/p&gt;

&lt;p&gt;A coin flip is the easiest example to start with here, so if I offer you $10 if a coin turns heads, the EV is $5 (50% * $10, the outcome where heads comes up, plus 50% * 0, the outcome where tails comes up).&lt;/p&gt;

&lt;p&gt;This coin flip is what I’ve seen many people refer to as +EV, meaning the expected value is positive. This game worst case leaves you with the world unchanged half the time, and best case puts $10 in your pocket half the time. You should play this game forever because the average return is $5.&lt;/p&gt;

&lt;p&gt;However, let’s assume it costs $6 to play the game. In this case, the game is -EV; in the win case, EV is $2 in the winning case (50% * (10–6)) and -$3 in the losing case (50% * -6), so total EV is 2–3, or -$1. You should never play this game because the average return is -$1.&lt;/p&gt;

&lt;p&gt;In this simple coin flip example, notice the lever we changed to change the EV: what it costs to play the game. Paying anything more than $5 makes the above a -EV game. The other lever we have as the game makers is changing the odds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The same EV does not mean the same game odds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can get to the same $5 and -$1 EV above using an unfair coin and different payoffs. If the coin has a 90% chance of turning up heads, a $5 EV is betting on heads with a ~$5.56 payoff ($5.56 * 0.9 === $5). The -$1 EV is charging $5 to play the game with the same payout (0.9 * (5.56–5) + -5 * 0.1 ~== -1). While the EV of both games is the same as in the first example, having a 50% chance of winning $10 is very different from a 90% chance of winning $5.55. Additionally, paying $5 to play the game is different from paying $6 — with higher dollar amounts, a 20% increase in the cost to play will price many people out.&lt;/p&gt;

&lt;p&gt;I think this idea becomes even more clear for games with longer shot odds. I was at a casino for Thanksgiving and had to wait an hour for the next available poker table, so I played roulette to pass the time. I was surprised to see the number of players simply placing bet after bet on a single number. Roulette offers a 36:1 payout on a single number hitting when the actual probability is 38:1. This is a negative EV game as a result. Let’s assume you have $190 to invest in 38 roulette turns at $5 each. If you’re comfortable with the 36% chance of losing your investment completely and 37% chance of losing 5% of your investment, there are some huge payoffs at low percentages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/brostoff-blog/p_v_r_extreme.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Note that you can see the spreadsheet I used to make all graphs in this post &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1pcN1fYHKB-woSJFYbOqKhfuzvBEqNw4R0TGY_zAg3ng/edit?usp=sharing&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Moreover, you also have the opportunity to walk away any time you hit the number and reduce that $190 expenditure. To put this in perspective, if your number hits 2 times in a row ((1/38)², or ~0.07% chance), you’ve only put $15 at risk and won $335 for a 22.3x return. You should still never play roulette; it’s a negative EV game (-$10 in the example above).&lt;/p&gt;

&lt;p&gt;Let’s contrast this with a more even-odds approach to roulette. The EV is still the same (-$10), but the return profile of investing 5 bucks each on 38 turns looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/brostoff-blog/p_v_r.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I did not see anyone playing this particular roulette strategy, presumably because no one wants to play 38 turns to win or lose up anywhere between 0 and $100 more than ⅔ of the time. It’s more attractive for most players to have a low probability of a huge payout than a near 50% probability of a small payout. I actually asked my brother about this idea and he had a telling quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My expectation is that I’ll lose some set amount of money I already decided on or win a lot of money at a casino. Winning a little bit of money isn’t why people go.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;But real life is more complicated&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As with pretty much every probability example that gets presented to people, the easy response about why it’s non-applicable to real life is that real life is complicated. Nassim Nicholas Taleb, Jonathan Bales and others have written about two types of EV, so I’ll overview both. I’m going to call these hard EV and soft EV:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Hard EV&lt;/em&gt; — EV you can confidently calculate that depends on some physics laws that are random (gravity and other forces move a roulette ball to its position — as a side note, Claude Shannon attempted to calculate the position of a roulette ball and bet based on the expected position by using some radar-gun like devices hidden beneath his clothes at casinos — this is detailed in the great book &lt;a href=&quot;https://www.amazon.com/Fortunes-Formula-Scientific-Betting-Casinos-ebook/dp/B000SBTWNC/ref=sr_1_1?ie=UTF8&amp;amp;qid=1543171941&amp;amp;sr=8-1&amp;amp;keywords=fortune%27s+formula&quot;&gt;Fortune’s Formula&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Soft EV&lt;/em&gt; — EV based on human events. Sports books, insurance companies, banks and others that price odds impacted by humans back into EVs by seeing what people bet when they offer opening odds on different events&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I believe the principles of dealing with hard EV are applicable to soft EV, as long as we admit that our attempts to price soft EV accurately are going to fail. When those attempts do fail, we can use the information gained to price EV more accurately next time. &lt;a href=&quot;https://medium.com/@bmb21/the-value-of-wrong-and-right-guesses-998a62bfc142&quot;&gt;My recent post on Mastermind&lt;/a&gt; explores this idea. Moreover, failed attempts to price EV can lead us to pursue +EV generating projects, which is at the heart of the next idea I want to discuss.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fight for every last scrap of EV&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Anyone who has played casino games has definitely done the thing where you go “If only that thing didn’t exist, this would be a great game.” This thought is really just expressing that casinos always do at least one thing in games they offer that makes the game -EV. This is the green 0 and 00 in roulette, the rules around when the dealer hits in blackjack, the programming logic in when slot machines pay out, etc. Casinos are acutely aware of this fact and will actually offer scraps of EV to high rollers or improved odds when they first open.&lt;/p&gt;

&lt;p&gt;So, if a small change in odds or payoffs make hard EV games worth playing, I think the same is no less true for soft EV. As someone who has been around start-ups the majority of their career, I have come to believe this is the only thing start-ups do; continually search for +EV activities.&lt;/p&gt;

&lt;p&gt;Let’s consider a simple start-up that sells widgets to OEMs that make some part of manufacturing more efficient (maybe it’s an IoT device with machine-learning capabilities or something). The company may estimate there is a 60% chance some big tech company comes in and manufactures the devices for 30% cheaper. They then can start to price how much they should raise in capital to get their devices to be 30% cheaper.&lt;/p&gt;

&lt;p&gt;To continue this example, the company could also decide to try to move the goalposts on the 60% chance. They could partner with a big tech company and build in contract language that prevents them from manufacturing competing devices; they could create their own operating system or hardware to make the device harder to replicate; they could decide to migrate out of the widget business because raising capital is too expensive relative to their EV guesstimate.&lt;/p&gt;

&lt;p&gt;Just like small changes in casino odds make the games worth playing, start-ups making small changes completely change what is +EV and what is -EV. With soft EV, human actions can wildly change odds and payoffs, so in my mental model I equate new projects and strategies at start-ups to casinos changing the odds and payoffs. From a career perspective, how well start-ups manage EV is how I evaluate whether I want to stay or go; if the odds are continually moving toward a place where the game is worth playing, stay; if not, go.&lt;/p&gt;

&lt;p&gt;But then how do you evaluate how people manage EV?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drop your state-of-the-world evaluations for first principles, especially for long-shots&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There’s a story Nassim Nicholas Taleb tells often about how he was at a meeting where traders at his firm said what they thought would happen in the market. Taleb expresses his opinion, and one of his colleagues ask why his portfolio isn’t positioned that way. Taleb responds that what he thinks is irrelevant; all that matters is what the market is mispricing.&lt;/p&gt;

&lt;p&gt;I think a reasonable approach to evaluating soft EV — and how people / companies manage it — is to 1) forget what you think you know about the opportunity associated with EV and 2) try to price it from a first principles perspective. (1) improves the odds you stop working off a false collection of EVs. (2) forces creation of a new collection of EVs.&lt;/p&gt;

&lt;p&gt;Doing both 1) and 2) may lead to surprising conclusions, which leads me to my next point; unpopular stuff is most likely to be mispriced.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When in doubt, prefer low information EV to high information EV&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I remember in grade school social studies learning about the concept of the catch-up effect. The catch up effect says that developing countries will grow faster than developed countries because there are easier gains to be made for the developing countries. A developing country for instance may realize a huge benefit from an infrastructure project that connects two cities; a developed country will have less of these opportunities because that same project was already completed. That infrastructure project may be a percentage point or more of GDP growth for the developing country. The developed country has no comparable way of boosting its GDP, so the developing country is likely to catch up in standard of living, median income, etc. over time.&lt;/p&gt;

&lt;p&gt;I think there is a real catch-up effect that exists for “cold” versus “hot” industries. Cold industries are what I consider to be businesses that are not getting attention from the media and very few people are playing in. You are unlikely to find lots of white papers or blogs on it online. In order to find information, you are probably going to have to read forums or maybe even (gasp!) pick up the phone and call someone.&lt;/p&gt;

&lt;p&gt;Hot industries are going to be reported on by most tech blogs, have a lot of capital coming in and have highly trained players that are pricing EV like their career depends on it. There are probably a few dozen best-selling books that talk about how the future is going to radically change because of Industry X.&lt;/p&gt;

&lt;p&gt;Cold industries are low information industries precisely because they’re “cold” — not popular. Hot industries are saturated with market entrants and information because they’re hot. Low information means more mispricings, because information is the only way we can calculate EV. Without information, we don’t know payoffs or probabilities.&lt;/p&gt;

&lt;p&gt;When viewed this way, I think the catch-up effect of cold industries relative to hot industries is real. I believe it’s a strong argument for playing in cold industries. When I’ve argued this point, I’m often told that I’m a contrarian. I actually think that’s an unfair characterization, because contrarian implies that you just like choosing the opposite way the crowd is going. Instead, I think letting EV serve as a mental model for decision-making leads to contrarian viewpoints. Having contrarian viewpoints is a goal worth pursuing because the future can and will have moments where low-information, cold industries become high(er) information, hot industries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EV is everything because the future is uncertain&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Being told you’re a contrarian is a good sign you’re pursuing a EV+ opportunity. We already know the world does not price EV perfectly (that casino was super-crowded on Thanksgiving no less) and has a built-in bias for what’s hot at the moment.&lt;/p&gt;

&lt;p&gt;EV+ opportunities are easier to come by in low information industries because there are fewer tools to know payoffs or odds. Said another way, it’s easier to scrap for EV because there are more scraps. When the future turns in a “crazy” way (or just a way the crowd didn’t expect), cold industries are more likely to rise and hot industries to fall because the crowd predicted something that did not happen. The contrarians are then better positioned for the future; the contrarians thus become what’s hot; and the cycle continues.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tim.blog/2018/09/25/howard-marks/&quot;&gt;Investor Howard Marks said in a recent podcast&lt;/a&gt; with Tim Ferriss that knowing where we are in the investment cycle is among the keys to calling the market correctly. Just like the investment cycle (boom and bust, high and low leverage), the EV cycle (hot and cold industries, high and low information) is part of the world we live in.&lt;/p&gt;

&lt;p&gt;I’m not certain what the future holds, but I know an EV-based view of it will lead to different conclusions than alternatives.&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:4000/2018/11/25/ev-is-everything.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2018/11/25/ev-is-everything.html</guid>
      </item>
    
      <item>
        <title>Guesses and Information</title>
        <description>&lt;p&gt;Learning from your wrong guesses is fundamentally different than learning from mistakes. In this post, I’ll explore why playing the board game Mastermind has given me a strong appreciation for the power of wrong guessing.&lt;/p&gt;

&lt;p&gt;First, I want to clearly differentiate between mistakes and guessing wrong. Mistakes can be avoided by logical thinking. For example, it’s a mistake to play casino games because they have negative expected value. You will lose money if you play on a long enough time horizon.&lt;/p&gt;

&lt;p&gt;Guessing about the state of the world isn’t a mistake; in fact, it’s something I believe we should do as often as possible. Guessing is necessary because it is often the only device we can use to gain information.&lt;/p&gt;

&lt;p&gt;This idea presented itself while playing Mastermind with one of my buddies this week. For those unfamiliar with the game, two players face off where one creates an ordered sequence of four pegs (which can be six different colors), and the other player guesses to find the combo. The guesser on each guess is given the number of exact peg guesses correct (right color, right place) and number of color guesses correct (right color, wrong place). In this way, the guesser gains information on every guess. As an aside, Donald Knuth developed an algorithm to determine the pattern in &lt;a href=&quot;http://www.cs.uni.edu/~wallingf/teaching/cs3530/resources/knuth-mastermind.pdf&quot;&gt;at most five guesses&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you think Mastermind is easy for the guesser, you’re not wrong. Each turn gets you closer to the four peg combo, and not solving the game in the eight allotted guesses (depending on what version you’re playing) most likely means you failed to use available information to your advantage.&lt;/p&gt;

&lt;p&gt;That said, it’s possible and likely to regress on the number of correct scores from turn to turn. Consider this scenario:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/redux-series/guess-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the first turn, the guesser is elated when they are given feedback of three exactly correct guesses. But which ones? It’s statistically unlikely on the second turn to &lt;em&gt;not&lt;/em&gt; regress. You have to guess about the state of the world because it’s impossible to know which three were correct.&lt;/p&gt;

&lt;p&gt;Here’s a good second guess:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/redux-series/guess-2a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The guesser scores a “worse” score here, with only two right-color, right-position and one right-color, wrong-position, but has extracted valuable information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Red is clearly a wrong color (or else they would get four scoring pegs)&lt;/li&gt;
  &lt;li&gt;One of the blue pegs is in the wrong position (or else they would have equaled the previous score)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From here, aiming to get the color scheme correct (by continually swapping out the red peg for other colors until the scoring changes) and getting the position correct (by moving the three blue pegs to different positions until three are correct again) are the clear strategies. Guessing wrong has delivered this information.&lt;/p&gt;

&lt;p&gt;This idea to me is the central lesson of Mastermind that extends to so many other areas of life: When we are most wrong, we have extracted more useful information than when we are close to right. The reason I think this is the case is that being close to right does not necessarily deliver any information on &lt;em&gt;why&lt;/em&gt; we are close to right.&lt;/p&gt;

&lt;p&gt;Flat-out wrongness at least shows you nothing is working; rightness forces you to guess on the factors that led to success. In this way, being right may not deliver useful information.&lt;/p&gt;

&lt;p&gt;Human psychology unfortunately is not conducive to embracing this lesson. Being right makes me feel smart and wrong makes me feel stupid. Hence, guessing right is dangerous because we may extract information that had nothing to do with being right. Guessing wrong makes it easy to abandon a venture because we just assume we have no potential to succeed due to some genetic or personal failure. In reality, there is no skill to guessing, so we should de-personalize successes and failures where luck plays a key role.&lt;/p&gt;

&lt;p&gt;The lesson here I think is to keep guessing after initial success to reject or confirm the &lt;em&gt;why&lt;/em&gt; of the right guess. Similarly, with wrong guesses, instead of writing ourselves off, our energy should be focused on extracting as much information as possible from the experience.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:4000/2018/11/17/guesses-and-information.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2018/11/17/guesses-and-information.html</guid>
      </item>
    
      <item>
        <title>Planning Time for Internal Users</title>
        <description>&lt;p&gt;The data exposed in a customer-facing UI is not the data internal users care about.&lt;/p&gt;

&lt;p&gt;Yet, this data forms the basis for the abstractions developers create. Easy-to-use APIs and GUIs generally expose the data the customer can access. Exposing data not exposed to the customer — think user behavior, hyper-granular statistics captured by IoT equipment, growth rates over specific time periods — is not easy.&lt;/p&gt;

&lt;p&gt;The APIs, GUIs and abstractions dedicated to customer-facing data are rarely usable for internal data. This is a problem because internal users often have greater and more immediate data needs than customers. These users deserve as much attention as customers.&lt;/p&gt;

&lt;p&gt;Why? Internal data should be easy to access and analyze because it contains time-sensitive information about a company’s customers and its products that hold the key to growth. If internal users at a company can easily access data over any time period, they can determine customer behavior in response to changes in the product. Some real-world examples of data internal to a company revealing information essential to company strategy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Buzzfeed shows &lt;a href=&quot;http://www.niemanlab.org/2017/09/buzzfeeds-strategy-for-getting-content-to-do-well-on-all-platforms-adaptation-and-a-lot-of-ab-testing/&quot;&gt;different titles and thumbnail art to different users&lt;/a&gt; for the same story, tracking the traffic from the different versions to optimize what it publishes&lt;/li&gt;
  &lt;li&gt;Intuit runs &lt;a href=&quot;https://www.fastcompany.com/3020699/why-intuit-founder-scott-cook-wants-you-to-stop-listening-to-your-boss&quot;&gt;real-world experiments within its products&lt;/a&gt; and pursues or abandons ideas based on the results&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.gigaspaces.com/amazon-found-every-100ms-of-latency-cost-them-1-in-sales/&quot;&gt;Amazon actively maps the relationship between site speed and sales&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eric Ries refers to this concept as completing a feedback loop in the shortest possible amount of time and argues it is the key to how quickly a start-up can grow in &lt;a href=&quot;https://www.amazon.com/dp/B004J4XGN6/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot;&gt;The Lean Startup&lt;/a&gt;. Investment in internal data is an investment in the customer.&lt;/p&gt;

&lt;p&gt;The internal data needs of a company change not on a Scrum schedule, but on a minute-to-minute or even second-to-second schedule. This is especially true in industries like fintech (think flash crash) and automotive (think actual crash), where being able to capture what happened in the space of a few milliseconds can save a company.&lt;/p&gt;

&lt;p&gt;Ability to analyze your data will determine the fate of your start-up. This is the number one reason to invest time in making data easier to share and analyze.&lt;/p&gt;

&lt;p&gt;How much time is enough time for teams to invest? 15 minutes is a start that could lead to perpetual gains. If you’re a Scrum Master, organize a short meeting with the developers who interact with your databases and business analysts who generate the most inbound. You can pre-wire this meeting by asking the business analysts to generate a list of their biggest pain points. You can ask the developers what they could do in one hour or less to start addressing these pain points. Something as simple as a cron job that e-mails internal users key data or a CSV that can feed pivot tables is a useful outcome from this meeting.&lt;/p&gt;

&lt;p&gt;If this meeting proves valuable, consider making it recurring and using it as a basis for small to medium-sized tasks that can be pulled in each sprint. When I’ve done similar exercises at previous companies, the first data-access related meeting has led to a host of issues being identified and even resolved in one day. In one instance, a co-worker who needed access to test data (only used internally) asked if there was any way he could periodically get data for one specific query. My company at the time had a GraphQL API with graphiql exposed in the test environment; I was able to give my co-worker graphiql access, and he was writing queries just with the GraphQL docs as a guide in 5 minutes.&lt;/p&gt;

&lt;p&gt;How much time will good data tooling save? Possibly years. Building internal data tools is no different than building features in that it is an investment in customer success. Buzzfeed, Intuit and Amazon in the examples above all used internal data to drive customer acquisition and retention. Additionally, strong data tooling impacts employee retention as business analysts expect data to be easy to access and analyze, and developers expect that their schedule to be free of fire-drills.&lt;/p&gt;

&lt;p&gt;Investments in improving data tooling pay long-term dividends. Finding time for them this sprint — and not three months into the product backlog — matters as much as building the product.&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:4000/2018/08/28/internal-users.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2018/08/28/internal-users.html</guid>
      </item>
    
      <item>
        <title>Adjustments</title>
        <description>&lt;p&gt;If there’s one thing I got out of being a competitive swimmer through high school, it’s that your body always adjusts to the water temperature.&lt;/p&gt;

&lt;p&gt;Water can be high 50s and it will feel fine after 15 seconds of swimming. Yet, people who don’t fully get in – who test it endlessly – will either take 10 extra minutes to get in (which is a lifetime in a swimming workout) or not go in at all. This is why swimmers jump right in.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If we do not adjust to new business requirements, new frameworks, new DSLs and the passage of time, we are failing our stakeholders&lt;/em&gt;. Moreover, if we do not make it a responsibility to place ourselves in new conditions that are more challenging than our current ones, we are failing ourselves.&lt;/p&gt;

&lt;p&gt;The reason new conditions are challenging is precisely because they are &lt;em&gt;new&lt;/em&gt;. Something like transitioning a company from a REST to a GraphQL API will be initially challenging because of a lack of experience with GraphQL. Raising financing for a first-time founder will be hard because he or she is formally pitching the company for the first time. Negotiating with a new client, adjusting to an unfamiliar codebase, completing a triathlon - all are hard not because of any inherent hardness, but because the activities are unfamiliar.&lt;/p&gt;

&lt;p&gt;So, the actionable takeaway of all this for me it that facing the unfamiliar should be done as soon as possible. The unfamiliar will become familiar with time.&lt;/p&gt;

&lt;p&gt;We decide when that transition happens.&lt;/p&gt;

</description>
        <pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:4000/2018/08/11/adjustments.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2018/08/11/adjustments.html</guid>
      </item>
    
      <item>
        <title>Redux - .subscribe</title>
        <description>&lt;p&gt;My &lt;a href=&quot;http://benbrostoff.github.io/2018/04/09/redux-dispatch-and-subscribe.html&quot;&gt;last post&lt;/a&gt; explored calling &lt;code class=&quot;highlighter-rouge&quot;&gt;.dispatch&lt;/code&gt; on a Redux store without listeners; in this post, I will add listeners to the toy application we’ve been building in this series and trace the &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; source in the process. I’m now using &lt;code class=&quot;highlighter-rouge&quot;&gt;v4.0.0&lt;/code&gt;, which was &lt;a href=&quot;https://github.com/reactjs/redux/releases/tag/v4.0.0&quot;&gt;released on April 16th&lt;/a&gt; - when I started on this series, Redux was on &lt;code class=&quot;highlighter-rouge&quot;&gt;v3.7.2&lt;/code&gt;. To begin our code exploration, I’ll call subscribe on our Redux store and pass in a callback that just logs the state of the store to the console:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/b296bda2b96040d0ec9950a7402d2fe6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Let’s begin with the documentation for &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; in the source.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Adds a change listener. It will be called any time an action is dispatched,
and some part of the state tree may potentially have changed. You may then
call &lt;code class=&quot;highlighter-rouge&quot;&gt;getState()&lt;/code&gt; to read the current state tree inside the callback.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next items in the docs before the function signature are about calling &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; from a change listener, which we’ll ignore for now since our toy example does not do this. The function signature explains that &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; expects a function that will be invoked on every dispatch and returns a function that when invoked will unsubscribe the listener:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@param {Function} listener A callback to be invoked on every dispatch.
@returns {Function} A function to remove this change listener.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The full &lt;code class=&quot;highlighter-rouge&quot;&gt;v4.0.0&lt;/code&gt; source  for &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; is below. When reading this blog post, it may be useful to split screen and have it open, although I’ll add gists where relevant:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/226d5e7ea1c4ebe1c8b8293ea29ee795.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As we’ve seen elsewhere in the Redux source, the beginning of the function body is type checking and raising errors if the expectations outlined in the docs are not met. Redux checks to see that &lt;code class=&quot;highlighter-rouge&quot;&gt;listener&lt;/code&gt; is a function and that a &lt;code class=&quot;highlighter-rouge&quot;&gt;store.dispatch&lt;/code&gt; call is not in progress when &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; is invoked.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/ff4a896323dd937155bb18766278a7bc.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Two notable things then happen:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/07b04cfde6c65d1cf6da4e09b7280e40.js&quot;&gt;&lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Redux sets a variable that will be updated later called &lt;code class=&quot;highlighter-rouge&quot;&gt;isSubscribed&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; - this makes sense from a naming perspective, as we’re subscribing to a function. We’ll come back to this variable when discussing &lt;code class=&quot;highlighter-rouge&quot;&gt;unsubscribe&lt;/code&gt;, which predictably sets it to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A function called &lt;code class=&quot;highlighter-rouge&quot;&gt;ensureCanMutateNextListeners&lt;/code&gt; is called next, which is small despite the long name. All this does is check if two variables declared in &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt; are the same array (and originally they are - &lt;code class=&quot;highlighter-rouge&quot;&gt;let nextListeners = currentListeners&lt;/code&gt; happens on &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;). If they are, &lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners&lt;/code&gt; is set equal to a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;currentListeners&lt;/code&gt; via &lt;code class=&quot;highlighter-rouge&quot;&gt;.slice()&lt;/code&gt;, thereby destroying the equality:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/994b547071145785093b0f1970485df6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;listener&lt;/code&gt; passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; is pushed into the array of &lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that the Redux docs have numerous references to the term “snapshotting listeners”, and I take that to mean the function &lt;code class=&quot;highlighter-rouge&quot;&gt;ensureCanMutateNextListeners&lt;/code&gt; is serving. The Redux source never adds or removes a listener without first copying &lt;code class=&quot;highlighter-rouge&quot;&gt;currentListeners&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;currentListeners&lt;/code&gt; are a reference to the same value (&lt;code class=&quot;highlighter-rouge&quot;&gt;currentListeners&lt;/code&gt; is assigned to &lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; and in &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Finally, an &lt;code class=&quot;highlighter-rouge&quot;&gt;unsubscribe&lt;/code&gt; function is returned, which includes closures from variables from &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/6bba11e54f70eb88f5ee88772a8de3ae.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The first conditional and empty return is to ensure that calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;unsubscribe&lt;/code&gt; after the first call do nothing. On the first &lt;code class=&quot;highlighter-rouge&quot;&gt;unsubscribe&lt;/code&gt; call, &lt;code class=&quot;highlighter-rouge&quot;&gt;isSubscribed&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;; afterwards, there is no way to set it back to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, since each &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; call creates a separate closure. Calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;unsubscribe&lt;/code&gt; after the first one bail out as early as possible.&lt;/p&gt;

&lt;p&gt;Next, Redux again checks if a &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; call is in progress and throws an error if this is the case. The error here is to guard against calling unsubscribe while a reducer is executing. As an aside, this &lt;code class=&quot;highlighter-rouge&quot;&gt;if (isDispatching)&lt;/code&gt; and error throwing logic happens three times in the &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt; source - once in &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; (reducers cannot dispatch actions), once in &lt;code class=&quot;highlighter-rouge&quot;&gt;getState&lt;/code&gt; (cannot read state while reducer is executing) and once here.&lt;/p&gt;

&lt;p&gt;As alluded to earlier, Redux then sets &lt;code class=&quot;highlighter-rouge&quot;&gt;isSubscribed&lt;/code&gt; to false, guaranteeing future calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;unsubscribe&lt;/code&gt; will do nothing.&lt;/p&gt;

&lt;p&gt;The meat of &lt;code class=&quot;highlighter-rouge&quot;&gt;unsubscribe&lt;/code&gt; is next:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/974773e6151b28f66e67395cad37abf5.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We reviewed &lt;code class=&quot;highlighter-rouge&quot;&gt;ensureCanMutateNextListeners()&lt;/code&gt; - this call protects &lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners&lt;/code&gt; from being mutated by changes to &lt;code class=&quot;highlighter-rouge&quot;&gt;currentListeners&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners.indexOf(listener)&lt;/code&gt; gets the index in the array of listeners of the listener unsubscribe is tied to. Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners.splice(index, 1)&lt;/code&gt; removes the listener from the &lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners&lt;/code&gt; array. An example may be helpful.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/32a397577c574c8509020709fc3a918a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In the first unsubscribe call, &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; is 2 (&lt;code class=&quot;highlighter-rouge&quot;&gt;funcC&lt;/code&gt; is the last listener in an array of three), then 1 (with &lt;code class=&quot;highlighter-rouge&quot;&gt;funcC&lt;/code&gt; removed, &lt;code class=&quot;highlighter-rouge&quot;&gt;funcB&lt;/code&gt; is now the last listener in an array of 2), then 0 (&lt;code class=&quot;highlighter-rouge&quot;&gt;funcA&lt;/code&gt; is the only listener in an array of one). &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;splice&lt;/code&gt; is a mutative function&lt;/a&gt; that takes a position as the first argument and how many elements to delete as the second. With &lt;code class=&quot;highlighter-rouge&quot;&gt;unsubscribe&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;splice&lt;/code&gt; is deleting the relevant listener at its respective position.&lt;/p&gt;

&lt;p&gt;Now that we’ve reviewed subscribe, we can actually trace what happens on a dispatch with a listener:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/d73da8dd6ad848a2ee5a575d97685b59.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;At the very end of &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; (the only remaining line is to return an action), Redux sets &lt;code class=&quot;highlighter-rouge&quot;&gt;currentListeners&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners&lt;/code&gt; and iterates through the current listeners in the order they were added. Each listener is then invoked with no arguments. It would be easy enough to give the listeners the current &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;, but &lt;a href=&quot;https://github.com/reactjs/redux/issues/1057&quot;&gt;per the original author, Dan Abramov,&lt;/a&gt; this is a misuse of the library:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Subscribers should react to the new state, not to what happened.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In summary, the subscribe source:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checks that the passed argument is a function and that the reducer passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt; is not executing&lt;/li&gt;
  &lt;li&gt;Pushes the passed listener function to an array of listeners (&lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Returns an unsubscribe function that can be invoked in order to remove the listener from the array of listener&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; then invokes every listener in &lt;code class=&quot;highlighter-rouge&quot;&gt;currentListeners&lt;/code&gt; (which is assigned to &lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners&lt;/code&gt;). Thus, any function passed to subscribe will be called on &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That about wraps up the bulk of &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;. Note that I skipped some of the API that was not part of Redux in its original 2015 state - &lt;code class=&quot;highlighter-rouge&quot;&gt;replaceReducer&lt;/code&gt; and Redux’s &lt;code class=&quot;highlighter-rouge&quot;&gt;observable&lt;/code&gt; functions were left out here.&lt;/p&gt;

&lt;p&gt;Next, I want to dive into &lt;code class=&quot;highlighter-rouge&quot;&gt;applyMiddleware&lt;/code&gt; and discussing how adding middleware to a Redux store works behind the scenes.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:4000/2018/04/20/redux-subscribe-listeners.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2018/04/20/redux-subscribe-listeners.html</guid>
      </item>
    
      <item>
        <title>Redux - .dispatch</title>
        <description>&lt;p&gt;Today’s post will look at what happens on &lt;code class=&quot;highlighter-rouge&quot;&gt;store.dispatch(action)&lt;/code&gt; calls after the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; call invoked in &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt; (discussed in Part I of this Redux mini-series). As a refresher, the code below was generated in Part I. I’ll I’ve done is add a call to dispatch to increment my command line counter by 1.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/b52270ab73dd98be56e9a33747f60be9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The counter now increments to the input number plus 1. So what happened here? &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; is actually a very short method (26 lines total, including white space), so this blog post will attempt to explain each line. The whole of dispatch is below (recall I’m using Redux &lt;code class=&quot;highlighter-rouge&quot;&gt;3.7.2&lt;/code&gt;):&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/08cb9127085c104a1c7cae02c77a7764.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I first want to review the commentary above the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; method in the Redux source. Portions of the commentary deal with actions that are &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;s, which Redux out of the box does not support. I’ll skip those sections for now. The first relevant section is below:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dispatches an action. It is the only way to trigger a state change.&lt;/p&gt;

  &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt; function, used to create the store, will be called with the
current state tree and the given &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;. Its return value will
be considered the &lt;strong&gt;next&lt;/strong&gt; state of the tree, and the change listeners
will be notified.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; is the only way to trigger a change in the store’s &lt;code class=&quot;highlighter-rouge&quot;&gt;currentState&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; is invoked with an &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; as an argument, which is passed to the reducer originally passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;. The return value from the reducer is the new &lt;code class=&quot;highlighter-rouge&quot;&gt;currentState&lt;/code&gt; of the tree. The final part of the sentence about change listeners is not yet relevant to the toy application I’m building, so I’ll ignore it for now.&lt;/p&gt;

&lt;p&gt;As previously noted, &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; takes an &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; as an argument, which should be a POJO (helps with &lt;code class=&quot;highlighter-rouge&quot;&gt;redux-devtools&lt;/code&gt;), needs a type property and cannot be undefined.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@param {Object} action A plain object representing “what changed”. It is a good idea to keep actions serializable so you can record and replay user sessions, or use the time travelling &lt;code class=&quot;highlighter-rouge&quot;&gt;redux-devtools&lt;/code&gt;. An action must have a &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; property which may not be &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;. It is a good idea to use string constants for action types.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The beginning of dispatch just covers these bases and raises errors where appropriate:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/6f4faaf4ebcaa0196d175ead31e42a76.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;There’s also a conditional that checks that &lt;code class=&quot;highlighter-rouge&quot;&gt;isDispatching&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;truthy&lt;/code&gt;, and raises an error if it is.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/22ac068b76cf22c53e21355d75cdc366.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The reason for this error is to prevent calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; from a &lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt; (hence the error “Reducers may not dispatch actions.”). Raising this error can be done by passing the store into an action and calling &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; from the reducer, like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/0e64c47bcfa840ef244671432d60223e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The next part of &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;finally&lt;/code&gt; block that sets &lt;code class=&quot;highlighter-rouge&quot;&gt;isDispatching&lt;/code&gt; to true (a variable declared through &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;), sets &lt;code class=&quot;highlighter-rouge&quot;&gt;currentState&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;currentReducer(currentState, action)&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;currentState&lt;/code&gt; is also declared via &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;), and then in the &lt;code class=&quot;highlighter-rouge&quot;&gt;finally&lt;/code&gt; sets &lt;code class=&quot;highlighter-rouge&quot;&gt;isDispatching&lt;/code&gt; back to false. Again, the only usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;isDispatching&lt;/code&gt; is in this function to prevent calling &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; in the reducer.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/c5f0b1a92590c4b306dbf7cdf282694e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Also, if you’re wondering why a &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;finally&lt;/code&gt; here, the intent is to prevent Redux from never setting &lt;code class=&quot;highlighter-rouge&quot;&gt;isDispatching&lt;/code&gt; back to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. This would prevent the reducer from ever firing again (because of the aforementioned “Reducers may not dispatch actions” error). I actually learned this from looking &lt;a href=&quot;https://github.com/reactjs/redux/pull/372&quot;&gt;at this Redux PR&lt;/a&gt;, and specifically this exchange:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/redux-series/why-try-finally.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The final part of &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; before the return statement is to set a &lt;code class=&quot;highlighter-rouge&quot;&gt;listeners&lt;/code&gt; array equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;currentListeners&lt;/code&gt;, which is then set to &lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners&lt;/code&gt;. Both the &lt;code class=&quot;highlighter-rouge&quot;&gt;*Listeners&lt;/code&gt; variables are declared via &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;. A &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop then iterates through the listeners and invokes each one.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/323617a993a2bcfda4a8e77eff829b4f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In this toy example, both &lt;code class=&quot;highlighter-rouge&quot;&gt;currentListeners&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nextListeners&lt;/code&gt; are empty arrays, so there are no listeners to invoke.&lt;/p&gt;

&lt;p&gt;The return value is just the &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; passed to it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@returns {Object} For convenience, the same action object you dispatched.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why this is convenient, I’m not yet sure, but will trust the source for now.&lt;/p&gt;

&lt;p&gt;We’ve done it! This post covers &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; without any listeners set. I’ll use the next post to generate listeners via &lt;code class=&quot;highlighter-rouge&quot;&gt;store.subscribe&lt;/code&gt; and analyze what happens in that listeners loop when listeners exist.&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:4000/2018/04/09/redux-dispatch-and-subscribe.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2018/04/09/redux-dispatch-and-subscribe.html</guid>
      </item>
    
      <item>
        <title>Redux - createStore</title>
        <description>&lt;p&gt;I have been using React for about two years now, but have never used Redux for a major project. As I’m on vacation for a few days, I figure this is a great time to start learning Redux without the pressures of daily work. I want to take a different approach to learning frameworks this time around - using a bottom-up approach instead of top-down one. I’m going to review the source code (&lt;a href=&quot;https://github.com/reactjs/redux/tree/v3.7.2&quot;&gt;at tag &lt;code class=&quot;highlighter-rouge&quot;&gt;v3.7.2&lt;/code&gt;&lt;/a&gt;) instead of API docs.&lt;/p&gt;

&lt;p&gt;In my early experiments with Redux, I was delighted to find no frontend framework is necessary. Redux can be used in a Node project without issue, although that was obviously not the intent of Dan Abramov and its authors. Because experimenting outside of the browser leads to fewer distractions - no consideration of the DOM or browser APIs is necessary - this blog series will use a command-line app in Node as the project that invokes Redux.&lt;/p&gt;

&lt;p&gt;This blog post will focus on Redux’s &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;, and use a dumb counter command line application to discuss the Redux store. &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt; only requires one argument (&lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt;), and can optionally take a &lt;code class=&quot;highlighter-rouge&quot;&gt;preloadedState&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;enhancer&lt;/code&gt;. Today, I’m only going to pass the required &lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt; argument to &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;. The Redux source code describes this argument as follows:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;@param {Function} reducer A function that returns the next state tree, given the current state tree and the action to handle.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;And what does &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt; return?&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Creates a Redux store that holds the state tree.
The only way to change the data in the store is to call &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; on it.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;Let’s trace the source code with only the &lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt; argument. &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt; first checks that &lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt; is a function. Not passing a &lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt; that’s a function throws an error:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Expected&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reducer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That makes sense, as no function means no way to input a state tree and output a new state tree.&lt;/p&gt;

&lt;p&gt;The source then initializes 5 variables via &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; - meaning these variables can be set to different values without error - and 6 functions. I plan to eventually review all of these in future posts, but for now I’ll simply discuss what happens when &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt; is invoked. After declaration of these variables and functions, a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; is made (&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch({ type: ActionTypes.INIT })&lt;/code&gt;) before the function returns an object. The comment above the initial dispatch reads as follows:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;// When a store is created, an “INIT” action is dispatched so that every
// reducer returns their initial state. This effectively populates
// the initial state tree.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ActionTypes.INIT&lt;/code&gt; is the string &lt;code class=&quot;highlighter-rouge&quot;&gt;@@redux/INIT&lt;/code&gt; (note that in the &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;+ releases this also includes a randomly generated alphanumeric string, like &lt;code class=&quot;highlighter-rouge&quot;&gt;3.o.k.a.q.1.v.5.x.q.s.b.6.r.d.i.y.6.6.r&lt;/code&gt;). The Redux source notes about these action types:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;These are private action types reserved by Redux.
For any unknown actions, you must return the current state.
If the current state is undefined, you must return the initial state.
Do not reference these action types directly in your code.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;I don’t expect my code to be familiar with the action type &lt;code class=&quot;highlighter-rouge&quot;&gt;@@redux/INIT&lt;/code&gt;, so my &lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt; should return the initial state on first call and current state on subsequent calls - this makes sense, as the code comment before the first &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; says its purpose is for every reducer to return its initial state.&lt;/p&gt;

&lt;p&gt;This first &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; call can be seen when creating a Redux store. I’ve set a breakpoint on my simple reducer within &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;, and here’s what the first invocation looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/redux-series/createStore-first-dispatch.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My store is ready to be returned following this dispatch call. The returned object has 5 keys (&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;getState&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;replaceReducer&lt;/code&gt;, and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol(observable&lt;/code&gt;), all of which have function values.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getState&lt;/code&gt; is a simple function that just returns &lt;code class=&quot;highlighter-rouge&quot;&gt;currentState&lt;/code&gt; (one of the aforementioned declared variables that is referenced by the other functions). On the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; call in &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;currentState&lt;/code&gt; is set to the result from invoking the reducer passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/redux-series/current-state-and-reducer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on what we know about &lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;, writing a simple command line app that asks for a number from user input and logs it the console is simple enough:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/563190c9c17e99c6c031260514f5c215.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In the next post, I want to discuss &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; calls after the initial one and &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt;. I’ll explore these Redux features by building the command line app out to allow decrementing, incrementing, multiplying and dividing numbers from user input.&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:4000/2018/04/07/redux-create-store.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2018/04/07/redux-create-store.html</guid>
      </item>
    
  </channel>
</rss>