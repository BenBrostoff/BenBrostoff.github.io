<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ben Brostoff</title>
    <description></description>
    <link>http://benbrostoff.github.io/</link>
    <atom:link href="http://benbrostoff.github.io//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>A Highly Entertaining Spat</title>
        <description>&lt;p&gt;Mommy and Daddy have been fighting lately in the Twitter equivalent of the Brostoff household. I woke up this morning to the following:  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-1C_VnO7KC2A/U-SigyQvE6I/AAAAAAAAAOs/AtuDreRZVlA/w582-h161-no/edm_v_pmarca.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Before we go any further - there&amp;rsquo;s no actual animosity here I&amp;rsquo;m sure, and I think all this tweeting is in good jest. As background, the &lt;a href=&quot;http://epicureandealmaker.blogspot.com/&quot;&gt;Epicurean Dealmaker&lt;/a&gt; and &lt;a href=&quot;http://blog.pmarca.com/&quot;&gt;Marc Andreessen&lt;/a&gt; are two people I greatly admire and relate to as a former banker turned software engineer. I was a religious reader of EDM during my two years as an investment banker; I remember reading &lt;a href=&quot;http://online.wsj.com/news/articles/SB10001424053111903480904576512250915629460&quot;&gt;&amp;ldquo;Why Software Is Eating the World&amp;rdquo;&lt;/a&gt; in August 2011 in the WSJ, and Marc Andreeseen is at least part of the reason for the career change I recently made. &lt;/p&gt;

&lt;p&gt;So, I&amp;rsquo;ve taken a rather large interest in their mildy heated (lukewarm?) Twitter exchanges of late. I actually was in the middle of one of them:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-qL7auIEAKy4/U-SkIAPqISI/AAAAAAAAAPU/4XFpWhO9xjQ/w571-h527-no/me_pmarca.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;The particular feud I happened to get in the middle of started with a &lt;a href=&quot;http://epicureandealmaker.blogspot.com/2014/08/where-did-he-learn-to-negotiate-like.html&quot;&gt;blogpost&lt;/a&gt; EDM wrote on 8/2. The post suggests that Trulia - a real estate website - was mistreated by its former advisor, Qatalyst Partners. Trulia had originally engaged Qatalyst three years ago to negotiate the sale of the company to Zillow, and failed to legally end the engagment when the sale fell through at the time. EDM&amp;rsquo;s claim to me seems &lt;a href=&quot;http://dealbook.nytimes.com/2014/07/29/old-attempt-to-sell-trulia-rewards-ex-adviser-qatalyst-now/&quot;&gt;to have merit&lt;/a&gt;, as Qatalyst (i) charged Trulia off-market fees and (ii) likely destroyed &lt;a href=&quot;https://twitter.com/EpicureanDeal/status/496991408071643136&quot;&gt;Trulia shareholder value&lt;/a&gt; (albeit created Qatalyst shareholder value). &lt;/p&gt;

&lt;p&gt;In short, I read EDM&amp;rsquo;s argument on Qatalyst and found it to be extremely reasonable and well grounded. Because I agreed with the post, I by extension felt inclined to agree with EDM that two Qatalyst bankers - George Boutros and Frank Quattrone - perhaps did not have their clients&amp;#39; best interests at heart. I ending up eating my words because I tried to comment on a subject I was not qualified to comment on. I do not personally know either banker; Marc Andreessen has known each for twenty years, and was right to put me in my place.&lt;/p&gt;

&lt;p&gt;To my credit, however, I admitted my lack of knowledge on Frank Quattrone and George Boutros and earned some Twitter karma points:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-1C-MemfrB88/U-SlZDVkyLI/AAAAAAAAAP8/bQBslhx5D6M/w545-h290-no/Screen%2BShot%2B2014-08-08%2Bat%2B6.23.57%2BAM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;My banking idol has yet to do so - in part because he is qualified to comment on what he writes on - and thus, the @pmarca v. @EpicureanDeal Twitter wars wage on. I find this spat interesting because I believe it has deep roots in the way certain types of people view technological progress, specifically in our social-media dominated age. &lt;/p&gt;

&lt;p&gt;I think in general that people who do not work in a tech-related industry tend to believe that a large portion of the &amp;ldquo;value&amp;rdquo; tech contributes to the world economy is in the form of social media value. Social media is prevalent enough to annoy EDM:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-1ztc8RB2sdY/U-SrsMe23XI/AAAAAAAAARY/bkjq0HPt76M/w553-h280-no/Screen%2BShot%2B2014-08-08%2Bat%2B6.50.55%2BAM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Popular media contributes to the perception that social media is the bulk of tech, as most tech-related articles I read as a banker (meaning these articles generally derived from WSJ or the Financial Times) were about social media companies who raised funding or were acquired by larger companies. &lt;/p&gt;

&lt;p&gt;One salient memory I have from banking is the day &lt;a href=&quot;http://dealbook.nytimes.com/2014/02/19/facebook-to-buy-messaging-start-up/&quot;&gt;Facebook acquired WhatsApp&lt;/a&gt;. I recall that virtually every conversation I overhead involved someone suggesting that Facebook&amp;rsquo;s inflated shares were causing the company to pull the trigger on unwise acquisitions, and someone else agreeing. Then another person would talk about the pressure to compete with company X and acquire more users. Then another person would make a comment about a tech bubble and a vicious cycle. And so on and so forth. &lt;/p&gt;

&lt;p&gt;That day serves as a decent example of how bankers (and perhaps others as well) perceive the tech space. The frequent articles emphasizing eye-popping purchase prices make a lot of people wary and suggest that the tech industry is out of sorts with the rest of the economy. EDM in some respects makes this point in the aforementioned post:&lt;/p&gt;

&lt;blockquote&gt;
Now I understand that the technology world operates in its own reality distortion field, but I have to confess I was stunned by that fee percentage. In the normal business world, where industrial logic and economic pressures operate in place of the moonbeams and unicorn piss of tech land, a billion dollar sale mandate should earn the sell-side advisor flogging it significantly less than one percent of transaction value.
&lt;/blockquote&gt;

&lt;p&gt;So, we have a number of data points now in EDM&amp;rsquo;s blog and tweets evidencing that he believes techies are out of touch with reality and even pigheaded. To be clear, I do not see this opinion as unfounded. At the same time, this opinion is not &amp;ldquo;true&amp;rdquo;, because it&amp;rsquo;s easy to find at least one exception to the claim: @pmarca. &lt;/p&gt;

&lt;p&gt;The @pmarca feed is a frequent source of technological optimism that oftentimes has nothing to do with social media. Par for the course are tweets documenting groundbreaking work in tech: &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-7cinCcxFbHQ/U-SpXMPYbnI/AAAAAAAAAQs/LD81D-HhRSY/w456-h408-no/Screen%2BShot%2B2014-08-08%2Bat%2B6.39.45%2BAM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Andreessen also has recently gone on double digit tweet-sprees about the practical applications of virtual reality and the &lt;a href=&quot;https://twitter.com/pngmarca/status/497155377100619777/photo/1&quot;&gt;societal benefits encompassed&lt;/a&gt; in &lt;a href=&quot;http://www.nytimes.com/2014/08/07/technology/personaltech/lyft-tries-to-coax-commuters-to-leave-their-cars.html?_r=0&quot;&gt;Lyft Line&lt;/a&gt;. If you want proof that tech is not pigheaded and that progress is not superficial, but real and measurable, look no further than @pmarca&amp;rsquo;s twitter. &lt;/p&gt;

&lt;p&gt;By the same token, I think @pmarca&amp;rsquo;s perception of finance may reflect a public perception that lacks basis in reality. Let&amp;rsquo;s look at a recent string of tweets: &lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&quot;https://lh4.googleusercontent.com/-ErAcP0pYtv8/U-S7n96eb9I/AAAAAAAAASI/jVT10QbHB6I/w354-h485-no/Screen%2BShot%2B2014-08-08%2Bat%2B7.58.57%2BAM.png&quot; alt=&quot;&quot;&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Just as most people view social media as an inordinate proportion of the tech space, it&amp;rsquo;s my view that the public focuses far too much on the consequences of TARP and the bailouts of the last recession. When I say &amp;ldquo;focuses far too much&amp;rdquo;, I mean that people are incorrect to believe that these bailouts continue to have an enormous impact on employee behavior at banks. Even if I were to acknowledge the @pmarca argument that &amp;ldquo;bailouts are guaranteed&amp;rdquo;, I do not believe this guarantee has large consequences on how banks operate (hold on, let me explain).&lt;/p&gt;

&lt;p&gt;Banks are under significantly stricter reporting, acccounting and capital standards - both from an S&amp;amp;T and i-banking perspecting - than pre-crisis, and cannot take outsize risks as a result. Even if banks are incentivized to take larger risks, Dodd-Frank and a slew of other types of legislation prevents them from doing so - I feel as though @pmarca should have acknowledged this in the tweet essay above. The banking sector is not growing nearly as fast as the tech sector in part because bankers have more hurdles in taking on risk, and therefore cannot realize as large rewards. &lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;m really getting at here is that the @pmarca - @EpicureanDeal spat is borne out of misunderstanding of the other&amp;rsquo;s craft. To my idols - Marc Andreessen and the man behind the Epicurean Dealmaker mask - I propose an end your war. I think you have far more in common than you realize. &lt;/p&gt;
</description>
        <pubDate>Fri, 08 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/08/08/techies-v-bankers/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/08/08/techies-v-bankers/</guid>
      </item>
    
      <item>
        <title>Graduation</title>
        <description>&lt;blockquote&gt;In a curious way, they show more spontaneity and more pleasure, and seem far less relentlessly organized, than many students now attending the better colleges and universities. Is it the absence of hand-holding — the sense that they are on their own — that has given them something of the freedom of college forty or fifty years ago?&lt;/blockquote&gt;

&lt;p&gt;The above quote is from a NYT Review of Books article by David Bromwich, &lt;a href=&quot;http://www.nybooks.com/articles/archives/2014/aug/14/hi-tech-mess-higher-education/&quot;&gt;which can be found here.&lt;/a&gt; &amp;ldquo;They&amp;rdquo; is in reference to &amp;ldquo;persons of college age&amp;rdquo; on scholarships awarded by Peter Thiel. Recipients of such scholarships educate themselves.&lt;/p&gt;

&lt;p&gt;I graduated from Duke University with a B.S. in Economics two years ago; I graduated from Dev Bootcamp yesterday. I do not have, nor do I expect to receive, a &lt;a href=&quot;http://www.thielfellowship.org/&quot;&gt;Thiel Fellowship&lt;/a&gt;. I can say with complete honesty, however, that I feel more spontaneous, satisfied and organized in the aftermath of this graduation than the one before it.&lt;/p&gt;

&lt;p&gt;I do not intend for this post to be a commentary on the current state of higher education, or even the state of bootcamp education. Rather, I want to talk broadly about (i) learning and (ii) motivation, and the connection I see between the two based on my experiences at Duke and at DBC.&lt;/p&gt;

&lt;p&gt;I believe learning to be very much intertwined with what people find personally meaningful. This opinion has some scientific basis, as there is research to support that memory persists longer depending on the associations one makes with the memory. For example, if I were to tell you that a certain number will unlock a safe containing a life-saving antidote to a life-threatening virus, and you believed me to be credible, you would likely remember that number. However, if I just spit out a random number, I doubt you would remember it five minutes later.&lt;/p&gt;

&lt;p&gt;In a classroom setting, this idea is especially relevant. I can recall dozens of instances in college of a student asking, &amp;ldquo;Will this be on the test?&amp;rdquo; Memory (and, by extension, learning, although the two are not synonymous) in higher education is all too often dependent on arbitrary incentives. GPA is the vehicle by which students signal to employers their worth; GPA is founded on correct answers to tests; correct answers to tests derive from learning and memorization. Thus, students are highly incentivized to learn what the test will &amp;ldquo;look like&amp;rdquo;, and prepare accordingly.&lt;/p&gt;

&lt;p&gt;Learning and motivation are completely different in the context of the bootcamp model (and, to be clear, I can only speak to DBC here). Most students in my DBC cohort felt compelled to learn what would help them achieve their goals or satisfy their curiousity. Yes, DBC has a large and well planned curriculum, as well as tri-weekly assessments, but the curriculum and assessments (in my opinion) seem to supplement learning rather than direct it. I would deep dive into parts of the DBC curriculum if they were useful for a project I happened to be working on.&lt;/p&gt;

&lt;p&gt;A pertinent example: my final group project for DBC was a mobile responsive e-reading platform called ReadyReader (here&amp;rsquo;s the &lt;a href=&quot;http://ready-reader.herokuapp.com/&quot;&gt;live site&lt;/a&gt; if you&amp;rsquo;re interested). One of the biggest problems our group encountered was slow performance and a frozen UX during book uploads. We mined the DBC curriculum and our instructors for knowledge on performance optimization, background jobs and relevant tools in order to solve our performance issues. Our studies eventually led us to &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; and &lt;a href=&quot;https://github.com/resque/resque&quot;&gt;Resque&lt;/a&gt;, which performed the background database work we needed without interrupting the user experience. In short, the mechanism that directed our learning was solving a problem rather than preparing for a test or optimizing GPA.&lt;/p&gt;

&lt;p&gt;Moreover, our group created the problem that led to our learning. We all wanted to work on an e-reader, and the project was personally meaningful to us. We also all made the conscious choice to pay a good chunk of change to be at DBC and pursue software engineering. Therein lies the crucial difference between colleges / universities and bootcamps (and yes, I realize these are general statements that do not apply to all students): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In a college / university setting, learning and motivation are founded upon test structure and GPA optimization&lt;/li&gt;
&lt;li&gt;In a bootcamp setting, learning and motivation are founded upon solving personally meaningful problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think this discrepancy is the reason why Thiel Fellowship recipients seem so much more motivated than college students. When an individual makes a conscious choice to tackle a problem, he or she is infinitely more motivated to find a solution than when the problem is created by another individual. &lt;/p&gt;

&lt;p&gt;Were I to offer one reform for higher education, it would be to recognize this principle and factor it into decision-making processes. Students will work hard for themselves. They will work less hard for others. &lt;/p&gt;

&lt;p&gt;Learning is inseparable from motivation.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/08/02/graduation/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/08/02/graduation/</guid>
      </item>
    
      <item>
        <title>TDD's Value Proposition</title>
        <description>&lt;p&gt;I begin my final three weeks of Dev Bootcamp tomorrow, and am most looking forward to taking a deep dive into test-driven development in the context of Rails starting Monday. The reason for my interest is that I have come to believe junior programmers with strong TDD fundamentals can be significantly larger value-adds out of the box than their non TDD-inclined counterparts.&lt;/p&gt;

&lt;p&gt;Evan Dorn of Logical Reality Design has an excellent thirty minute video on &lt;a href=&quot;https://www.youtube.com/watch?v=HhwElTL-mdI&quot;&gt;this very theme&lt;/a&gt;. Dorn contends that the difference between programming and software engineering lies in tests. Modular and concise code springs from the test driven framework because programmers write small snippets at a time to make failing tests pass. Tests are short and to the point; the code to make tests pass is correspondingly short and sweet. If programmers operate under the TDD paradigm from a program&amp;rsquo;s inception, they significantly lessen the risk of needing to pony up capital for a code rescue later down the line.&lt;/p&gt;

&lt;p&gt;Admittedly, there are some strong counterpoints to this school of thought. One I constantly hear is that getting your product out the door in X amount of time is worth the Y hours of refactoring that can be done at a later point in time. Refactoring by definition will not improve the basic functionality of your program, so one has to consider carefully the costs of delaying a product release when the delay will not materially improve the user experience. A second argument against TDD (and yes, there obviously are far more I&amp;rsquo;m not covering here) is that certain tests really test nothing and / or encourage tunnel vision on passing the tests at the expense of more important architectural decisions. Rails creator David Heinemeir Hansson in part championed this argument in April on his &lt;a href=&quot;http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html&quot;&gt;blog&lt;/a&gt;, decrying unit tests specifically. Both arguments hold water and present complex-enough issues to warrant more attention in future writings. &lt;/p&gt;

&lt;p&gt;Rather than focus on these arguments, I want to argue that TDD is a valuable skill in particular for junior developers (such as myself), because TDD (i) introduces scientific rigor to the coding process, (ii) acts as a strong defense against poorly written code and (iii) doubles as a superior communication tool to make the intent of code clear. I would presume the number one concern most employers have in hiring junior developers is their potential to detract value from companies by writing dependency-laden, dysfunctional code with hard-to-trace errors capable of driving away clients. TDD demands an approach that goes a long way towards eradicating this potential.  &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve had a chance to look at some of the code from previous DBC final projects (&lt;a href=&quot;https://github.com/cicadas-2014/quotemunk&quot;&gt;this app&lt;/a&gt; for managing Kindle quotes is among my favorites), and have been struck by the test-driven approach evident in all of them. DBC students write unit-based, controller-based and feature-based tests in Rails that comprehensively test the entire application. In the coming weeks, I intend to post on testing techniques  in Rails and the advantages to be had from a TDD-oriented approach. &lt;/p&gt;
</description>
        <pubDate>Sun, 13 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/07/13/TDD/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/07/13/TDD/</guid>
      </item>
    
      <item>
        <title>Chris Hunt at GORUCU</title>
        <description>&lt;p&gt;Chris Hunt gave an excellent talk on improving working memory at yesterday&amp;rsquo;s &lt;a href=&quot;http://goruco.com/&quot;&gt;GORUCU&lt;/a&gt; conference. I&amp;rsquo;ve read part of Harry Lorayne&amp;rsquo;s and Jerry Lucas&amp;#39; classic book on improving &lt;a href=&quot;http://www.amazon.com/The-Memory-Book-Classic-Improving/dp/0345337581&quot;&gt;memory&lt;/a&gt;, so some of the techniques Chris promoted were familiar to me. However, his real-world examples of using the locus method and mnemonics demonstrated implementation of these methods in an easy-to-understand way. I find it interesting and not at all coincidental that Chris is a world-class &lt;a href=&quot;https://github.com/chrishunt&quot;&gt;programmer&lt;/a&gt; at GitHub and a memory enthusiast.&lt;/p&gt;

&lt;p&gt;My admittedly limited programming experience has hammered home the value of working memory in a programming context. Although Sublime or your text editor of choice will provide suggested variables / methods / classes / etc. given the first letter you type, it can&amp;rsquo;t be stressed enough how easy it is to forget names you wrote in a large program. Popping open another file or scrolling up or down to figure out what I named method X has destroyed my &lt;a href=&quot;http://en.wikipedia.org/wiki/Flow_(psychology&quot;&gt;flow state&lt;/a&gt; on numerous occasions. &lt;/p&gt;

&lt;p&gt;What benefits could 10 minutes a day of working memory exercises deliver to my programming productivity? I certainly believe it&amp;rsquo;s worth finding out. Chris recommended this week by week memory &lt;a href=&quot;http://www.amazon.com/How-Develop-Brilliant-Memory-Week/dp/1780287909&quot;&gt;improvement guide&lt;/a&gt; by multi-time world memory champion &lt;a href=&quot;http://en.wikipedia.org/wiki/Dominic_O&amp;#x27;Brien&quot;&gt;Dominic O&amp;#39;Brien&lt;/a&gt;, as well as &lt;i&gt;&lt;a href=&quot;http://www.amazon.com/Moonwalking-Einstein-Science-Remembering-Everything/dp/0143120530&quot;&gt;Moonwalking with Einstein&lt;/a&gt;&lt;/i&gt; by Josh Foer. The latter book details Foer&amp;rsquo;s journey from a science journalist studying memory to 2006 USA World Memory Champion. The time investment here is relatively small (reading two books and putting aside 10 minutes a day) and the payoffs are potentially enormous.  &lt;/p&gt;

&lt;p&gt;Funnily enough, Chris&amp;#39; talk itself served as an incredible example of the benefits to be had from working on your working memory. He was the only speaker at the entire conference who never looked behind him to refer to the big screen and spoke in coherent, complete, polished sentences that in retrospect seemed pre-written (but his delivery was such that it sounded anything but canned - the guy is also a grade A public speaker). The talk was filled with lists of multiple items and heavy on specific references (e.g. several cards in a playing deck and numerous names were referenced throughout). The strength of Chris Hunt&amp;rsquo;s own working memory could not have been more apparent than in this talk.  &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still in awe of how bad-ass those fifteen minutes were. Here&amp;rsquo;s to you, Chris Hunt. &lt;/p&gt;

&lt;p&gt;&lt;i&gt;**Another unabashed Chris Hunt plug - install his &lt;a href=&quot;https://github.com/chrishunt/desktop&quot;&gt;desktop Ruby gem&lt;/a&gt;. I change my desktop background all the time and love the fact that, thanks to Chris, I can now do it from my command line.&lt;/i&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/06/22/chris-hunt-at-gorucu/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/06/22/chris-hunt-at-gorucu/</guid>
      </item>
    
      <item>
        <title>On the Spurs</title>
        <description>&lt;p&gt;I recall the post-lockout 1999 season well, only because it was, in NBA time, the first post-Jordan year. I was facing a dilemma at the time I&amp;rsquo;m sure many 9 year olds also had - what does the NBA have in store for &lt;i&gt;me&lt;/i&gt; now that Jordan is gone? My first several years watching the NBA were really just years watching Jordan. Eyes on 23 on literally every possession. Jordan spoiled a lot of people, me included, because everyone became accustomed to that level of dominance - we expected it of future superstars.&lt;/p&gt;

&lt;p&gt;Tim Duncan won the 1999 NBA Finals MVP with a nice-but-not-unbelievable 22-11-2 average for the series. Yes, Tim Duncan to the 9-year-old me was a slight disappointment against 1998 NBA Finals Michael Jordan (but then again, how can you follow up the greatest shot of all time?). You can find all NBA Finals MVPs&amp;#39; series stat lines since 1987 (inclusive) &lt;a href=&quot;http://espn.go.com/nba/history/awards/_/id/43&quot;&gt;here&lt;/a&gt;, and Duncan&amp;rsquo;s three MVPs are statistically on the bottom quartile. For this and likely other reasons, Duncan over the years never truly attained the talking heads&amp;#39; attention in the same way a Shaq, Kobe, LeBron, or even Dirk, did. &lt;/p&gt;

&lt;p&gt;The Spurs over the last decade plus have been associated with the adjective &lt;i&gt;boring&lt;/i&gt;. I googled &amp;lsquo;boring Spurs&amp;rsquo; and the &lt;a href=&quot;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=spurs%20boring&quot;&gt;results&lt;/a&gt; are pretty comical. The amount of opinion content debating whether the Spurs are boring is insane. Isn&amp;rsquo;t what we find exciting / boring largely a personal preference? How else do you explain the love / hate relationships general sports fans have with soccer, hockey and NASCAR? (I used these as examples, but obviously every sport has its boring / exciting advocates). &lt;/p&gt;

&lt;p&gt;I find it a nice bend of history that the Spurs are both of these things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The most dominant post-Jordan team ever (by wins and (possibly after tonight) tied for rings with the Lakers - let&amp;rsquo;s say wins is the tiebreaker) &lt;/li&gt;
&lt;li&gt;The most dominant post-Jordan team without a major month-plus-ESPN-occupying story line that polarized the NBA fan base (and yes, I&amp;rsquo;m delving into opinion here)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The closest comp to the Spurs - at least for dominance over time period - is the New England Patriots, who we all know had a major month-plus-ESPN-occupying story line. Every NFL fan has a reason to hate the Pats. NBA fans have no justifiable reason to hate the Spurs - thus, it seems that reason has become that they&amp;rsquo;re boring. &lt;/p&gt;

&lt;p&gt;The current foil to the Spurs is their NBA Finals opponent - the Miami Heat. The Heat as we know them now have been, since inception, exciting. They more than polarized the entire NBA fan base with some questionable &lt;a href=&quot;https://www.youtube.com/watch?v=pT-I8jQDQ7c&quot;&gt;behavior&lt;/a&gt;. Per a Sports Nation poll, every state excepting Florida is &lt;a href=&quot;http://www.slate.com/blogs/the_slatest/2014/06/04/nba_finals_poll_spurs_over_heat_says_america.html&quot;&gt;rooting against them&lt;/a&gt; in the Finals. The Heat are a never-ending source of interest for NBA fans in the same way embattled celebrities are a never-ending source of interest for cable news. &lt;/p&gt;

&lt;p&gt;The Spurs have never caused a non-basketball-related ruckus, and we (the collective NBA fan base) have very little to talk about outside of their &amp;ldquo;quiet&amp;rdquo; basketball-related dominance. There&amp;rsquo;s no selfish-but-talented point guard stealing shots from the all-caliber power forward. There&amp;rsquo;s no paranoid coach demoting assistants and smashing horns with the owner. And there&amp;rsquo;s most definitely no senile owner alienating the entire franchise in a recorded phone conversation. &lt;/p&gt;

&lt;p&gt;So we have a situation wherein the best team from a basketball perspective is likely the worst team from a Sportscenter perspective. If sports and media were entirely delinked, this little coincidence would not matter to the media at all. But it does, since media is pro sports as much as pro sports are pro sports. &lt;/p&gt;

&lt;p&gt;Conversely, this coincidence matters not to the Spurs, whose head coach is notorious for giving one syllable answers in interviews. Better yet, the face of their franchise (Duncan) really doesn&amp;rsquo;t seem to care, and, other than some animated protests to thorn-in-the-side officials, lives on the emotional plane of a normal person engaging in recreation. &lt;/p&gt;

&lt;p&gt;The post-MJ Spurs have refused to play ball with our shiny social media age, but refused in the most polite way possible. They do the bare minimum of NBA-mandated PR work and then go home. It&amp;rsquo;s admirable and it&amp;rsquo;s inspiring precisely because they&amp;rsquo;re not trying to sell us anything. I can barely open up Chrome without being hit by 35 scandalous headlines, lest watch a basketball game purely about basketball nowadays.&lt;/p&gt;

&lt;p&gt;As it pertains to the NBA, the Spurs don&amp;rsquo;t care about anything except playing the best basketball in the league. If the 9-year-old me found the Spurs dominance quiet and a bit boring, the 24-year-old version appreciates the singular focus on craftsmanship.  &lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/06/15/onthespurs/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/06/15/onthespurs/</guid>
      </item>
    
      <item>
        <title>DBC Week 2 Wrap - From CSV to SQL</title>
        <description>&lt;p&gt;I&amp;rsquo;m a sports nerd and regular attendee of the &lt;a href=&quot;http://www.sloansportsconference.com/&quot;&gt;Sloan Sports Conference&lt;/a&gt;, so DBC&amp;rsquo;s focus on parsing data in Week 2 of camp was right up my alley. It also gave me an excuse to delve deeply into my favorite baseball team&amp;rsquo;s last 100+ years of team stats, which culminated in the creation of a Boston Red Sox terminal applicaton. This post will discuss the creation of this little app, the repository of which can be found &lt;a href=&quot;https://github.com/BenBrostoff/red_sox_stat_finder&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Among other things, Week 2 of DBC was heavy on using Ruby&amp;rsquo;s &lt;a href=&quot;http://ruby-doc.org/stdlib-1.9.2/libdoc/csv/rdoc/CSV.html&quot;&gt;CSV class&lt;/a&gt; and the &lt;a href=&quot;http://rubydoc.info/gems/sqlite3/1.3.9/frames&quot;&gt;SQLite3 gem&lt;/a&gt;. The former is a means of parsing CSV data and the latter allows for execution of SQL commands from external databases within Ruby programs. &lt;/p&gt;

&lt;p&gt;These two tools got me thinking a lot about filtering data. The CSV class in Ruby can be used to convert rows of CSV data into an array of arrays, while SQLite3 gives you the full force of SQL querying functionality. As someone who enjoys looking at random baseball stats, I knew I had to put these tools to use in a baseball capacity. &lt;/p&gt;

&lt;p&gt;The folks over at &lt;a href=&quot;http://www.baseball-reference.com/&quot;&gt;baseball-reference&lt;/a&gt; have tables of tables of every baseball stat imaginable in CSV format. I decided to grab the Red Sox team history &lt;a href=&quot;http://www.baseball-reference.com/teams/BOS/&quot;&gt;page&lt;/a&gt;, and parse the whole thing using &lt;code&gt;CSV#read&lt;/code&gt;, which returns an array of arrays, wherein each array is a row of data. From there, I iterated through the array and loaded the data into a database using SQLite3. &lt;/p&gt;

&lt;p&gt;Once the data was in the database, it was easy to write methods that used database queries to filter information. Consider the method below, which takes four arguments to determine what type of data a user wants to see, the range of years over which the data spans and whether the data is sorted in chronological order, ascending by category or descending by category:    &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/08f31330002bf2b0f150.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As an avid Red Sox, I was pleased to find this app was nice for discovering some interesting info about our wonderful franchise. The best Red Sox team of the three recent WS teams by &lt;a href=&quot;http://en.wikipedia.org/wiki/Pythagorean_expectation&quot;&gt;Pythagorean Winning Percentage&lt;/a&gt; was the 2007 team (.624). I fully expected those teams to be followed by the 2013 and 2004 teams since, say, 2000, but the 2002 team was actually better than the 2004 team on this basis. Note that the 2002 team did not make the playoffs despite posting 93 wins and sending 7 guys to the All-Star Game. Thus, the stats bear out that fortune did not favor this team:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-ESbN4LdAlr8/U5xiRronReI/AAAAAAAAAMc/hnBCHj9IUUs/w342-h451-no/Screen+Shot+2014-06-14+at+10.50.48+AM.png&quot; alt=&quot;some_text&quot;&gt;
&lt;/p&gt;

&lt;p&gt;Also, did you know the Red Sox team with the oldest pitching staff ever (clocking in at an average age of 33.6 years) was the 2005 Red Sox? Credit David Wells (42 at the time), Tim Wakefield (38), Mike Timlin (39) and Mike Myers (36) for that one. Youngest? The 1916 team, at 24.4 years (a trend I noticed here is that baseball teams in the early 1900s were much, much younger than &amp;ldquo;modern era teams&amp;rdquo; - in fact, the top 12 youngest Sox teams are all from 1930 or earlier).  &lt;/p&gt;

&lt;p&gt;The process of building this little application only continued to reaffirm to me the value of programming skills as they apply to statistical analysis. I&amp;rsquo;m excited to continue learning in this and many other respects. &lt;/p&gt;
</description>
        <pubDate>Sat, 14 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/06/14/dbcweek2wrap/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/06/14/dbcweek2wrap/</guid>
      </item>
    
      <item>
        <title>DBC Week 1 Wrap - Think Like a Programmer</title>
        <description>&lt;p&gt;Last week marked my first at &lt;a href=&quot;http://devbootcamp.com/&quot;&gt;Dev Bootcamp&lt;/a&gt;, and my main takeaway from Week 1 is that I need to change the approach I have to solving programming problems.&lt;/p&gt;

&lt;p&gt;Our Week 1 challenges consisted largely of building functions that could take any argument of a certain type (e.g. unsolved Sudoku board) and convert them to a specific format with specific constraints (e.g. solved Sudoku board). Such challenges included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Converting any Arabic number to a Roman numeral format&lt;/li&gt;
&lt;li&gt;Converting any Arabic number to English words&lt;/li&gt;
&lt;li&gt;Converting a given Boggle board and a word to a true / false output depending on whether the board contained the word&lt;/li&gt;
&lt;li&gt;And, of course, the aforementioned Sudoku challenge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found all these problems required a certain cognitive discipline. One must be able to look at several instances, find relationships among the instances, find the exceptions to the relationships and then code the findings. &lt;/p&gt;

&lt;p&gt;Interestingly (and not coincidentally, of course), all of the solutions to the challenges could be implemented recursively. I tried to solve all of them iteratively before seeing the light. &lt;/p&gt;

&lt;p&gt;As time has progressed and I&amp;rsquo;ve read more code, I&amp;rsquo;ve started to begin to understand the &amp;ldquo;hackiness&amp;rdquo; of certain solutions to problems. Any time I find myself writing a line that looks similar to the line above it, or a loop with nearly the exact same characteristics as a loop I wrote earlier in a program, I&amp;rsquo;ll think back to Week 1 and the elegance of the solutions our instructors offered on the aforementioned problems. &lt;/p&gt;

&lt;p&gt;Moreover, I want to make it a priority to not even write these lines of code in the first place by writing better pseudocode (although to be fair, sometimes writing initial hacky solutions helps me see the more concise solution). The mindset of good programmers it seems to me is to understand at all points in time the logical consequences of each line of code, as well as the &amp;ldquo;work&amp;rdquo; each line is doing (e.g. a recursive call does significant work - each nested for loop less so). I hope to think more like a good programmer as I progress through the next eight weeks of camp.  &lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/06/08/dbcweek1wrap/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/06/08/dbcweek1wrap/</guid>
      </item>
    
      <item>
        <title>Recursion and Combination Sums</title>
        <description>&lt;p&gt;Developer, fellow Duke alum, Flatiron School graduate and good friend Sam Schlinkert recently posted a &lt;a href=&quot;http://sts10.github.io/blog/2014/05/30/strike-9-game/&quot;&gt;great piece&lt;/a&gt; on his blog about developing the old game Strike 9 in JavaScript. I highly recommend reading it before this post. Additionally, Sam&amp;rsquo;s blog in general has been one of my most helpful learning resources as I develop as a programmer.&lt;/p&gt;

&lt;p&gt;One of the issues Sam encountered in developing Strike 9 was writing a function that returned all possible combinations of numbers summing to any given number below 12 inclusive (e.g. passing in 5 as an argument should return [1,4], [2,3],and [5] - note that in the game the player only gets one of each digit 1-12 to work with, so [1,2,2] is not possible, while [4,1] and [3,2] are irrelevant as order matters not in this game). As detailed in his blog post, he eventually developed several separate functions, one of which was recursive, in order to deal with the issue. &lt;/p&gt;

&lt;p&gt;I thought it would be instructive to try to solve the problem in one function without recursion (technically, I solved in two but one is just to bypass JS&amp;#39; inability to deal with checking for array equality). You can see &lt;a href=&quot;https://gist.github.com/BenBrostoff/15e9c1f20bade7bfebea&quot;&gt;my full solution&lt;/a&gt; here and the gist (no pun intended) of the solution below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/c53c0a6b8113f45e6961.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It was apparent to me upon writing this code how repetitive it was. The two nested if / for loops after line 5 are nearly identical. Additionally, I stop nesting loops when a combination is four digits long, so my function won&amp;rsquo;t list all combinations for a number larger than or equal to 15 (1+2+3+4+5).&lt;/p&gt;

&lt;p&gt;In situations like these, recursion would seem to be the best option, and that&amp;rsquo;s exactly what Sam used to write his solution.&lt;/p&gt;

&lt;p&gt;Sam replaced everything after line 5 with a recursive function called &lt;code&gt;addAllSubSums&lt;/code&gt; (note the function calls on several other &amp;ldquo;helper&amp;rdquo; functions which I won&amp;rsquo;t cover in detail here). The function takes two integer arguments - &lt;code&gt;baggage&lt;/code&gt; and &lt;code&gt;sum&lt;/code&gt; - that sum up to the &lt;code&gt;sum&lt;/code&gt; argument in &lt;code&gt;getPossSums&lt;/code&gt;. Among other things, the brilliance of Sam&amp;rsquo;s method is that it works for any argument (although one of the drawbacks of recursion is that it solves in an exponentially large amount of time as you continue to recurse, meaning &lt;code&gt;getPossSums(100)&lt;/code&gt; will crash your machine). Because &lt;code&gt;addAllSubSums&lt;/code&gt; recurses to a base case wherein a sum has been broken down into its smallest single digit integer components, the method works on any number irrespective of size. &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve shown Sam&amp;rsquo;s methods below (again, full credit to him, and this code is purely his work product) and commented out relevant sections with an example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/1fa29a98162dab61937a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Only experience can really bear out some of the advantages to be had from using certain concepts in computer science, and I found recursion here woke me up to the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The use of a base case to end recursive calls is the heart and soul of recursion. In this example, we stopped recursing only when &lt;code&gt;baggage&lt;/code&gt; in &lt;code&gt;addAllSubSums&lt;/code&gt; contained specific elements, which in turn allowed us to break out of a for loop&lt;/li&gt;
&lt;li&gt;The best way to understand recursion (at least for me) is to visually write out examples - I found assuming 10 as the argument for sum and then commenting out the rest of the code gave me a significantly better understanding of the code&lt;/li&gt;
&lt;li&gt;Recursion allows one to write significantly shorter code (compare my initial solution to Sam&amp;rsquo;s)&lt;/li&gt;
&lt;li&gt;Recursion takes up an exponentially increasing amount of memory as you recurse within a function (again, try &lt;code&gt;getPossSums(100)&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a side note, it&amp;rsquo;s fun / a bit weird to play &lt;a href=&quot;http://samschlinkert.com/strike9/&quot;&gt;Sam&amp;rsquo;s demo of Strike 9&lt;/a&gt; now that I understand a bit more of the code behind it. We rarely take the time to appreciate the hard work and cleverness of game designers.  &lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/06/01/combosums/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/06/01/combosums/</guid>
      </item>
    
      <item>
        <title>Ruby Hash - Class Review</title>
        <description>&lt;p&gt;Michael Hartl&amp;rsquo;s &lt;a href=&quot;http://www.railstutorial.org/&quot;&gt;Rails tutorial&lt;/a&gt; notes in several places that hashes - specifically hashes within hashes - are a critical part of Rails. As such, I thought it would be nice prior to my 6/2 Dev Bootcamp start date to review the &lt;code&gt;Hash&lt;/code&gt; class. Official documentation is &lt;a href=&quot;http://www.ruby-doc.org/core-2.1.2/Hash.html&quot;&gt;linked here&lt;/a&gt; for reference &lt;/p&gt;

&lt;p&gt;Hashes have significant advantages over arrays and are better for tasks where order would be a nuisance. Hashes use key-value pairs as opposed to ordered slots; this feature makes hashes perfect for frequency tables, user attribute tracking, etc. &lt;/p&gt;

&lt;p&gt;Unlike an array, a hash&amp;rsquo;s keys can be any type of object, whereas with an array, the indices can only be integers. While hash syntax can differ, I&amp;rsquo;m most used to seeing the folowing:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/918322d43d7f0215d88f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In the above, &lt;code&gt;users&lt;/code&gt; &lt;code&gt;keys&lt;/code&gt; are &lt;code&gt;symbols&lt;/code&gt;, while the &lt;code&gt;values&lt;/code&gt; are two &lt;code&gt;Strings&lt;/code&gt; and an &lt;code&gt;Integer&lt;/code&gt;. Much like with an array and an index, returning a value from a hash is as simple as putting its respective key in square brackets. In the Hartl Rails tutorial, it&amp;rsquo;s often the case that methods accept hashes as arguments and set instance variables to values within the hash.&lt;/p&gt;

&lt;p&gt;Conversely, one can use the method &lt;code&gt;key&lt;/code&gt; with a &lt;code&gt;value&lt;/code&gt; argument to return the key that contains the argument. The &lt;code&gt;keys&lt;/code&gt; method can also return all the keys in a hash. An example follows below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/d405ef95536183f7371c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Hashes can also be created without specifying keys or values in advance (comparable to pushing values into an array). Below, I&amp;rsquo;ve shown how one would use hashes in Ruby to create a &lt;code&gt;frequency_table&lt;/code&gt; and &lt;code&gt;mode&lt;/code&gt; method:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/ff0ae2a11a311238dc93.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;code&gt;Hash&lt;/code&gt; class contains 146 instance methods. Note that many of these methods are just part of the Hash class inheriting from Object (ex. .equal?, instance_variables?, etc.).  &lt;/p&gt;

&lt;p&gt;I want to focus on three I find particularly interesting and useful: &lt;code&gt;merge&lt;/code&gt; (useful for combining hashes), &lt;code&gt;delete_if&lt;/code&gt; (useful for filtering key value pairs through hashes) and &lt;code&gt;values_at&lt;/code&gt; (useful for getting values at a given key). &lt;/p&gt;

&lt;p&gt;&lt;code&gt;merge&lt;/code&gt; I&amp;rsquo;ve seen quite often in reviewing Ruby code. Although I personally haven&amp;rsquo;t used it very often, the value of merge is apparent from the name - one can combine two or more separate hashes:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/d5a3f2265cb30956f346.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;delete_if&lt;/code&gt; is one of those methods perfect for chopping down key value pairs in a hash based on specific criteria. One can imagine all the scenarios this would be useful for in a programming context - for instance, pairing down a large hash with useless user attributes:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/4bc1e2e7edfd2c413e06.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Finally, &lt;code&gt;values_at&lt;/code&gt; is a means of getting all values at a specific key. In situations where hashes are stored within hashes, I could see this method being useful. Consider the example of a hash where users are keys and the values are hashes with their information: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/b5602d0470e8f9c6fa0c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I will continue revisiting the &lt;code&gt;Hash&lt;/code&gt; documentation as I program in Ruby. Please feel free to shoot me an e-mail if there are any methods you use quite often that it would be useful to review in further detail. &lt;/p&gt;
</description>
        <pubDate>Fri, 30 May 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/05/30/cheatsheet/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/05/30/cheatsheet/</guid>
      </item>
    
      <item>
        <title>Behind the Magic Curtain</title>
        <description>&lt;p&gt;My Gregorc thinking style is concrete sequential, according to this &lt;a href=&quot;http://www.thelearningweb.net/personalthink.html&quot;&gt;online test&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quite honestly, I&amp;rsquo;ve never put stock in tests of this nature and view them in some respects the same way Donnie Darko views &lt;a href=&quot;https://www.youtube.com/watch?v=MqAJ5W2wQH4&quot;&gt;spectrums&lt;/a&gt;. However, I have over the years come to realize things about myself as a learner that seem to align with concrete sequential types &lt;a href=&quot;http://web.cortland.edu/andersmd/learning/gregorc.htm&quot;&gt;as outlined by Gregorc&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For instance, I learn best when the subject material is complete and coherent - limitless complexity keeps me up at night. Computer science is simultaneously wonderful and frustrating for me in that if you keep looking down the rabbit hole, what you find generally makes sense - unfortunately, the rabbit hole is infinitely deep (and usually disseminates into electrical engineering jargon). &lt;/p&gt;

&lt;p&gt;My main challenge over the last month has been accepting the fact that I can&amp;rsquo;t understand everything all at once - certain aspects of Ruby and Rails I have been forced (to a degree) to accept as &lt;a href=&quot;http://catb.org/jargon/html/A/automagically.html&quot;&gt;automagic&lt;/a&gt; (thank you Michael Hartl for introducing me to this term). In order to conform to the bootcamp model (become a programmer in three months!), it&amp;rsquo;s necessary to learn a lot of &amp;ldquo;how&amp;rdquo; without the &amp;ldquo;why&amp;rdquo; to support it. &lt;/p&gt;

&lt;p&gt;I suppose in our age of incredible complexity we have to make this sacrifice. Lest we forget Clarke&amp;rsquo;s Third Law:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Any sufficiently advanced technology is indistinguishable from magic. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve thought about this quote all through the last several months. Ruby has a lovely library of documentation and some truly incredible mixins, modules, gems, etc. Too often, I find myself using certain tools without viewing the source code. By doing so, I always feel a bit queasy - I know I&amp;rsquo;m leveraging off someone else&amp;rsquo;s work without completely understanding it. &lt;/p&gt;

&lt;p&gt;This queasy feeling is something I know I need to better come to terms with if I&amp;rsquo;m ever to be a value-add programmer. I&amp;rsquo;ll always go out of my way to understand &amp;ldquo;why&amp;rdquo;, but realize technology moves quickly, and a bootcamp&amp;rsquo;s &lt;a href=&quot;http://benbrostoff.github.io/2014/05/23/cultural-week-8/&quot;&gt;advantage&lt;/a&gt; over a university program in part is its focus on pragmatism. Again, &amp;ldquo;how&amp;rdquo; and &amp;ldquo;why&amp;rdquo; aren&amp;rsquo;t mutually exclusive, but trying to understand every aspect of software and hardware is beyond even the greatest minds of our generation (or any previous generation at that). &lt;/p&gt;

&lt;p&gt;Adding to the difficulty of balancing between &amp;ldquo;how&amp;rdquo; and &amp;ldquo;why&amp;rdquo; is the fact that my previous career - banking - was relatively easy to decipher re: &amp;ldquo;why&amp;rdquo;. We pitched our clients fee-generating products: our clients used these products to the extent that they offered a  sufficiently low cost of capital. &lt;/p&gt;

&lt;p&gt;&amp;ldquo;How&amp;rdquo; was also a known commodity - secured and unsecured bonds, ABS deals and equity raises are known processes that can be accomplished in easy to understand steps. We even made T&amp;amp;Rs - timing and responsibility sheets - to show clients exactly what we&amp;rsquo;re doing at any exact moment in time.  &lt;/p&gt;

&lt;p&gt;Imagine a T&amp;amp;R in the software world (or really, any part of the tech world) - no self-respecting engineer can claim to be able to tell a client exactly what they&amp;rsquo;ll be doing every week for 8+ weeks. In software development, multiple processes run concurrently, and unforeseen bugs and a host of other issues have the potential to destroy the most well-crafted timeline (I highly recommend Tracy Kidder&amp;rsquo;s &lt;a href=&quot;http://www.amazon.com/The-Soul-A-New-Machine/dp/0316491977&quot;&gt;The Soul of a New Machine&lt;/a&gt; as evidence here).&lt;/p&gt;

&lt;p&gt;For a concrete sequential thinker, the endless extended metaphors and abstractions in computer science can be a lot to handle at once. I have come to appreciate activities like exercising and driving because the path from A to B is so clear and well-defined. Indeed, my profession for two years was getting from A to B using an easy-to-follow roadmap (albeit a roadmap that had some long and winding roads). &lt;/p&gt;

&lt;p&gt;Programming is never a straight shot from A to B, and this part of the field is what makes it such a challenge. One cannot distill the production of useful software into a step-by-step process. Precisely because of the complexity underlying software development, it &lt;em&gt;feels&lt;/em&gt; like magic in the Clarke&amp;rsquo;s third law sense. &lt;/p&gt;

&lt;p&gt;Yet, concrete sequential learner or otherwise, I&amp;rsquo;m not averse to seeing what&amp;rsquo;s behind the magic curtain.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 May 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/05/28/magiccurtain/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/05/28/magiccurtain/</guid>
      </item>
    
  </channel>
</rss>