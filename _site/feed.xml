<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ben Brostoff</title>
    <description></description>
    <link>http://benbrostoff.github.io/</link>
    <atom:link href="http://benbrostoff.github.io//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>On the Spurs</title>
        <description>&lt;p&gt;I recall the post-lockout 1999 season well, only because it was, in NBA time, the first post-Jordan year. I was facing a dilemma at the time I&amp;rsquo;m sure many 9 year olds also had - what does the NBA have in store for &lt;i&gt;me&lt;/i&gt; now that Jordan is gone? My first several years watching the NBA were really just years watching Jordan. Eyes on 23 on literally every possession. Jordan spoiled a lot of people, me included, because everyone became accustomed to that level of dominance - we expected it of future superstars.&lt;/p&gt;

&lt;p&gt;Tim Duncan won the 1999 NBA Finals MVP with a nice-but-not-unbelievable 22-11-2 average for the series. Yes, Tim Duncan to the 9-year-old me was a slight disappointment against 1998 NBA Finals Michael Jordan (but then again, how can you follow up the greatest shot of all time?). You can find all NBA Finals MVPs&amp;#39; series stat lines since 1987 (inclusive) &lt;a href=&quot;http://espn.go.com/nba/history/awards/_/id/43&quot;&gt;here&lt;/a&gt;, and Duncan&amp;rsquo;s three MVPs are statistically on the bottom quartile. For this and likely other reasons, Duncan over the years never truly attained the talking heads&amp;#39; attention in the same way a Shaq, Kobe, LeBron, or even Dirk, did. &lt;/p&gt;

&lt;p&gt;The Spurs over the last decade plus have been associated with the adjective &lt;i&gt;boring&lt;/i&gt;. I googled &amp;lsquo;boring Spurs&amp;rsquo; and the &lt;a href=&quot;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=spurs%20boring&quot;&gt;results&lt;/a&gt; are pretty comical. The amount of opinion content debating whether the Spurs are boring is insane. Isn&amp;rsquo;t what we find exciting / boring largely a personal preference? How else do you explain the love / hate relationships general sports fans have with soccer, hockey and NASCAR? (I used these as examples, but obviously every sport has its boring / exciting advocates). &lt;/p&gt;

&lt;p&gt;I find it a nice bend of history that the Spurs are both of these things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The most dominant post-Jordan team ever (by wins and (possibly after tonight) tied for rings with the Lakers - let&amp;rsquo;s say wins is the tiebreaker) &lt;/li&gt;
&lt;li&gt;The most dominant post-Jordan team without a major month-plus-ESPN-occupying story line that polarized the NBA fan base (and yes, I&amp;rsquo;m delving into opinion here)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The closest comp to the Spurs - at least for dominance over time period - is the New England Patriots, who we all know had a major month-plus-ESPN-occupying story line. Every NFL fan has a reason to hate the Pats. NBA fans have no justifiable reason to hate the Spurs - thus, it seems that reason has become that they&amp;rsquo;re boring. &lt;/p&gt;

&lt;p&gt;The current foil to the Spurs is their NBA Finals opponent - the Miami Heat. The Heat as we know them now have been, since inception, exciting. They more than polarized the entire NBA fan base with some questionable &lt;a href=&quot;https://www.youtube.com/watch?v=pT-I8jQDQ7c&quot;&gt;behavior&lt;/a&gt;. Per a Sports Nation poll, every state excepting Florida is &lt;a href=&quot;http://www.slate.com/blogs/the_slatest/2014/06/04/nba_finals_poll_spurs_over_heat_says_america.html&quot;&gt;rooting against them&lt;/a&gt; in the Finals. The Heat are a never-ending source of interest for NBA fans in the same way embattled celebrities are a never-ending source of interest for cable news. &lt;/p&gt;

&lt;p&gt;The Spurs have never caused a non-basketball-related ruckus, and we (the collective NBA fan base) have very little to talk about outside of their &amp;ldquo;quiet&amp;rdquo; basketball-related dominance. There&amp;rsquo;s no selfish-but-talented point guard stealing shots from the all-caliber power forward. There&amp;rsquo;s no paranoid coach demoting assistants and smashing horns with the owner. And there&amp;rsquo;s most definitely no senile owner alienating the entire franchise in a recorded phone conversation. &lt;/p&gt;

&lt;p&gt;So we have a situation wherein the best team from a basketball perspective is likely the worst team from a Sportscenter perspective. If sports and media were entirely delinked, this little coincidence would not matter to the media at all. But it does, since media is pro sports as much as pro sports are pro sports. &lt;/p&gt;

&lt;p&gt;Conversely, this coincidence matters not to the Spurs, whose head coach is notorious for giving one syllable answers in interviews. Better yet, the face of their franchise (Duncan) really doesn&amp;rsquo;t seem to care, and, other than some animated protests to thorn-in-the-side officials, lives on the emotional plane of a normal person engaging in recreation. &lt;/p&gt;

&lt;p&gt;The post-MJ Spurs have refused to play ball with our shiny social media age, but refused in the most polite way possible. They do the bare minimum of NBA-mandated PR work and then go home. It&amp;rsquo;s admirable and it&amp;rsquo;s inspiring precisely because they&amp;rsquo;re not trying to sell us anything. I can barely open up Chrome without being hit by 35 scandalous headlines, lest watch a basketball game purely about basketball nowadays.&lt;/p&gt;

&lt;p&gt;As it pertains to the NBA, the Spurs don&amp;rsquo;t care about anything except playing the best basketball in the league. If the 9-year-old me found the Spurs dominance quiet and a bit boring, the 24-year-old version appreciates the singular focus on craftsmanship.  &lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/06/15/onthespurs/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/06/15/onthespurs/</guid>
      </item>
    
      <item>
        <title>DBC Week 2 Wrap - From CSV to SQL</title>
        <description>&lt;p&gt;I&amp;rsquo;m a sports nerd and regular attendee of the &lt;a href=&quot;http://www.sloansportsconference.com/&quot;&gt;Sloan Sports Conference&lt;/a&gt;, so DBC&amp;rsquo;s focus on parsing data in Week 2 of camp was right up my alley. It also gave me an excuse to delve deeply into my favorite baseball team&amp;rsquo;s last 100+ years of team stats, which culminated in the creation of a Boston Red Sox terminal applicaton. This post will discuss the creation of this little app, the repository of which can be found &lt;a href=&quot;https://github.com/BenBrostoff/red_sox_stat_finder&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Among other things, Week 2 of DBC was heavy on using Ruby&amp;rsquo;s &lt;a href=&quot;http://ruby-doc.org/stdlib-1.9.2/libdoc/csv/rdoc/CSV.html&quot;&gt;CSV class&lt;/a&gt; and the &lt;a href=&quot;http://rubydoc.info/gems/sqlite3/1.3.9/frames&quot;&gt;SQLite3 gem&lt;/a&gt;. The former is a means of parsing CSV data and the latter allows for execution of SQL commands from external databases within Ruby programs. &lt;/p&gt;

&lt;p&gt;These two tools got me thinking a lot about filtering data. The CSV class in Ruby can be used to convert rows of CSV data into an array of arrays, while SQLite3 gives you the full force of SQL querying functionality. As someone who enjoys looking at random baseball stats, I knew I had to put these tools to use in a baseball capacity. &lt;/p&gt;

&lt;p&gt;The folks over at &lt;a href=&quot;http://www.baseball-reference.com/&quot;&gt;baseball-reference&lt;/a&gt; have tables of tables of every baseball stat imaginable in CSV format. I decided to grab the Red Sox team history &lt;a href=&quot;http://www.baseball-reference.com/teams/BOS/&quot;&gt;page&lt;/a&gt;, and parse the whole thing using &lt;code&gt;CSV#read&lt;/code&gt;, which returns an array of arrays, wherein each array is a row of data. From there, I iterated through the array and loaded the data into a database using SQLite3. &lt;/p&gt;

&lt;p&gt;Once the data was in the database, it was easy to write methods that used database queries to filter information. Consider the method below, which takes four arguments to determine what type of data a user wants to see, the range of years over which the data spans and whether the data is sorted in chronological order, ascending by category or descending by category:    &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/08f31330002bf2b0f150.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As an avid Red Sox, I was pleased to find this app was nice for discovering some interesting info about our wonderful franchise. The best Red Sox team of the three recent WS teams by &lt;a href=&quot;http://en.wikipedia.org/wiki/Pythagorean_expectation&quot;&gt;Pythagorean Winning Percentage&lt;/a&gt; was the 2007 team (.624). I fully expected those teams to be followed by the 2013 and 2004 teams since, say, 2000, but the 2002 team was actually better than the 2004 team on this basis. Note that the 2002 team did not make the playoffs despite posting 93 wins and sending 7 guys to the All-Star Game. Thus, the stats bear out that fortune did not favor this team:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-ESbN4LdAlr8/U5xiRronReI/AAAAAAAAAMc/hnBCHj9IUUs/w342-h451-no/Screen+Shot+2014-06-14+at+10.50.48+AM.png&quot; alt=&quot;some_text&quot;&gt;
&lt;/p&gt;

&lt;p&gt;Also, did you know the Red Sox team with the oldest pitching staff ever (clocking in at an average age of 33.6 years) was the 2005 Red Sox? Credit David Wells (42 at the time), Tim Wakefield (38), Mike Timlin (39) and Mike Myers (36) for that one. Youngest? The 1916 team, at 24.4 years (a trend I noticed here is that baseball teams in the early 1900s were much, much younger than &amp;ldquo;modern era teams&amp;rdquo; - in fact, the top 12 youngest Sox teams are all from 1930 or earlier).  &lt;/p&gt;

&lt;p&gt;The process of building this little application only continued to reaffirm to me the value of programming skills as they apply to statistical analysis. I&amp;rsquo;m excited to continue learning in this and many other respects. &lt;/p&gt;
</description>
        <pubDate>Sat, 14 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/06/14/dbcweek2wrap/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/06/14/dbcweek2wrap/</guid>
      </item>
    
      <item>
        <title>DBC Week 1 Wrap - Think Like a Programmer</title>
        <description>&lt;p&gt;Last week marked my first at &lt;a href=&quot;http://devbootcamp.com/&quot;&gt;Dev Bootcamp&lt;/a&gt;, and my main takeaway from Week 1 is that I need to change the approach I have to solving programming problems.&lt;/p&gt;

&lt;p&gt;Our Week 1 challenges consisted largely of building functions that could take any argument of a certain type (e.g. unsolved Sudoku board) and convert them to a specific format with specific constraints (e.g. solved Sudoku board). Such challenges included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Converting any Arabic number to a Roman numeral format&lt;/li&gt;
&lt;li&gt;Converting any Arabic number to English words&lt;/li&gt;
&lt;li&gt;Converting a given Boggle board and a word to a true / false output depending on whether the board contained the word&lt;/li&gt;
&lt;li&gt;And, of course, the aforementioned Sudoku challenge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found all these problems required a certain cognitive discipline. One must be able to look at several instances, find relationships among the instances, find the exceptions to the relationships and then code the findings. &lt;/p&gt;

&lt;p&gt;Interestingly (and not coincidentally, of course), all of the solutions to the challenges could be implemented recursively. I tried to solve all of them iteratively before seeing the light. &lt;/p&gt;

&lt;p&gt;As time has progressed and I&amp;rsquo;ve read more code, I&amp;rsquo;ve started to begin to understand the &amp;ldquo;hackiness&amp;rdquo; of certain solutions to problems. Any time I find myself writing a line that looks similar to the line above it, or a loop with nearly the exact same characteristics as a loop I wrote earlier in a program, I&amp;rsquo;ll think back to Week 1 and the elegance of the solutions our instructors offered on the aforementioned problems. &lt;/p&gt;

&lt;p&gt;Moreover, I want to make it a priority to not even write these lines of code in the first place by writing better pseudocode (although to be fair, sometimes writing initial hacky solutions helps me see the more concise solution). The mindset of good programmers it seems to me is to understand at all points in time the logical consequences of each line of code, as well as the &amp;ldquo;work&amp;rdquo; each line is doing (e.g. a recursive call does significant work - each nested for loop less so). I hope to think more like a good programmer as I progress through the next eight weeks of camp.  &lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/06/08/dbcweek1wrap/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/06/08/dbcweek1wrap/</guid>
      </item>
    
      <item>
        <title>Recursion and Combination Sums</title>
        <description>&lt;p&gt;Developer, fellow Duke alum, Flatiron School graduate and good friend Sam Schlinkert recently posted a &lt;a href=&quot;http://sts10.github.io/blog/2014/05/30/strike-9-game/&quot;&gt;great piece&lt;/a&gt; on his blog about developing the old game Strike 9 in JavaScript. I highly recommend reading it before this post. Additionally, Sam&amp;rsquo;s blog in general has been one of my most helpful learning resources as I develop as a programmer.&lt;/p&gt;

&lt;p&gt;One of the issues Sam encountered in developing Strike 9 was writing a function that returned all possible combinations of numbers summing to any given number below 12 inclusive (e.g. passing in 5 as an argument should return [1,4], [2,3],and [5] - note that in the game the player only gets one of each digit 1-12 to work with, so [1,2,2] is not possible, while [4,1] and [3,2] are irrelevant as order matters not in this game). As detailed in his blog post, he eventually developed several separate functions, one of which was recursive, in order to deal with the issue. &lt;/p&gt;

&lt;p&gt;I thought it would be instructive to try to solve the problem in one function without recursion (technically, I solved in two but one is just to bypass JS&amp;#39; inability to deal with checking for array equality). You can see &lt;a href=&quot;https://gist.github.com/BenBrostoff/15e9c1f20bade7bfebea&quot;&gt;my full solution&lt;/a&gt; here and the gist (no pun intended) of the solution below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/c53c0a6b8113f45e6961.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It was apparent to me upon writing this code how repetitive it was. The two nested if / for loops after line 5 are nearly identical. Additionally, I stop nesting loops when a combination is four digits long, so my function won&amp;rsquo;t list all combinations for a number larger than or equal to 15 (1+2+3+4+5).&lt;/p&gt;

&lt;p&gt;In situations like these, recursion would seem to be the best option, and that&amp;rsquo;s exactly what Sam used to write his solution.&lt;/p&gt;

&lt;p&gt;Sam replaced everything after line 5 with a recursive function called &lt;code&gt;addAllSubSums&lt;/code&gt; (note the function calls on several other &amp;ldquo;helper&amp;rdquo; functions which I won&amp;rsquo;t cover in detail here). The function takes two integer arguments - &lt;code&gt;baggage&lt;/code&gt; and &lt;code&gt;sum&lt;/code&gt; - that sum up to the &lt;code&gt;sum&lt;/code&gt; argument in &lt;code&gt;getPossSums&lt;/code&gt;. Among other things, the brilliance of Sam&amp;rsquo;s method is that it works for any argument (although one of the drawbacks of recursion is that it solves in an exponentially large amount of time as you continue to recurse, meaning &lt;code&gt;getPossSums(100)&lt;/code&gt; will crash your machine). Because &lt;code&gt;addAllSubSums&lt;/code&gt; recurses to a base case wherein a sum has been broken down into its smallest single digit integer components, the method works on any number irrespective of size. &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve shown Sam&amp;rsquo;s methods below (again, full credit to him, and this code is purely his work product) and commented out relevant sections with an example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/1fa29a98162dab61937a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Only experience can really bear out some of the advantages to be had from using certain concepts in computer science, and I found recursion here woke me up to the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The use of a base case to end recursive calls is the heart and soul of recursion. In this example, we stopped recursing only when &lt;code&gt;baggage&lt;/code&gt; in &lt;code&gt;addAllSubSums&lt;/code&gt; contained specific elements, which in turn allowed us to break out of a for loop&lt;/li&gt;
&lt;li&gt;The best way to understand recursion (at least for me) is to visually write out examples - I found assuming 10 as the argument for sum and then commenting out the rest of the code gave me a significantly better understanding of the code&lt;/li&gt;
&lt;li&gt;Recursion allows one to write significantly shorter code (compare my initial solution to Sam&amp;rsquo;s)&lt;/li&gt;
&lt;li&gt;Recursion takes up an exponentially increasing amount of memory as you recurse within a function (again, try &lt;code&gt;getPossSums(100)&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a side note, it&amp;rsquo;s fun / a bit weird to play &lt;a href=&quot;http://samschlinkert.com/strike9/&quot;&gt;Sam&amp;rsquo;s demo of Strike 9&lt;/a&gt; now that I understand a bit more of the code behind it. We rarely take the time to appreciate the hard work and cleverness of game designers.  &lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/06/01/combosums/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/06/01/combosums/</guid>
      </item>
    
      <item>
        <title>Ruby Hash - Class Review</title>
        <description>&lt;p&gt;Michael Hartl&amp;rsquo;s &lt;a href=&quot;http://www.railstutorial.org/&quot;&gt;Rails tutorial&lt;/a&gt; notes in several places that hashes - specifically hashes within hashes - are a critical part of Rails. As such, I thought it would be nice prior to my 6/2 Dev Bootcamp start date to review the &lt;code&gt;Hash&lt;/code&gt; class. Official documentation is &lt;a href=&quot;http://www.ruby-doc.org/core-2.1.2/Hash.html&quot;&gt;linked here&lt;/a&gt; for reference &lt;/p&gt;

&lt;p&gt;Hashes have significant advantages over arrays and are better for tasks where order would be a nuisance. Hashes use key-value pairs as opposed to ordered slots; this feature makes hashes perfect for frequency tables, user attribute tracking, etc. &lt;/p&gt;

&lt;p&gt;Unlike an array, a hash&amp;rsquo;s keys can be any type of object, whereas with an array, the indices can only be integers. While hash syntax can differ, I&amp;rsquo;m most used to seeing the folowing:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/918322d43d7f0215d88f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In the above, &lt;code&gt;users&lt;/code&gt; &lt;code&gt;keys&lt;/code&gt; are &lt;code&gt;symbols&lt;/code&gt;, while the &lt;code&gt;values&lt;/code&gt; are two &lt;code&gt;Strings&lt;/code&gt; and an &lt;code&gt;Integer&lt;/code&gt;. Much like with an array and an index, returning a value from a hash is as simple as putting its respective key in square brackets. In the Hartl Rails tutorial, it&amp;rsquo;s often the case that methods accept hashes as arguments and set instance variables to values within the hash.&lt;/p&gt;

&lt;p&gt;Conversely, one can use the method &lt;code&gt;key&lt;/code&gt; with a &lt;code&gt;value&lt;/code&gt; argument to return the key that contains the argument. The &lt;code&gt;keys&lt;/code&gt; method can also return all the keys in a hash. An example follows below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/d405ef95536183f7371c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Hashes can also be created without specifying keys or values in advance (comparable to pushing values into an array). Below, I&amp;rsquo;ve shown how one would use hashes in Ruby to create a &lt;code&gt;frequency_table&lt;/code&gt; and &lt;code&gt;mode&lt;/code&gt; method:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/ff0ae2a11a311238dc93.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;code&gt;Hash&lt;/code&gt; class contains 146 instance methods. Note that many of these methods are just part of the Hash class inheriting from Object (ex. .equal?, instance_variables?, etc.).  &lt;/p&gt;

&lt;p&gt;I want to focus on three I find particularly interesting and useful: &lt;code&gt;merge&lt;/code&gt; (useful for combining hashes), &lt;code&gt;delete_if&lt;/code&gt; (useful for filtering key value pairs through hashes) and &lt;code&gt;values_at&lt;/code&gt; (useful for getting values at a given key). &lt;/p&gt;

&lt;p&gt;&lt;code&gt;merge&lt;/code&gt; I&amp;rsquo;ve seen quite often in reviewing Ruby code. Although I personally haven&amp;rsquo;t used it very often, the value of merge is apparent from the name - one can combine two or more separate hashes:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/d5a3f2265cb30956f346.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;delete_if&lt;/code&gt; is one of those methods perfect for chopping down key value pairs in a hash based on specific criteria. One can imagine all the scenarios this would be useful for in a programming context - for instance, pairing down a large hash with useless user attributes:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/4bc1e2e7edfd2c413e06.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Finally, &lt;code&gt;values_at&lt;/code&gt; is a means of getting all values at a specific key. In situations where hashes are stored within hashes, I could see this method being useful. Consider the example of a hash where users are keys and the values are hashes with their information: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/b5602d0470e8f9c6fa0c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I will continue revisiting the &lt;code&gt;Hash&lt;/code&gt; documentation as I program in Ruby. Please feel free to shoot me an e-mail if there are any methods you use quite often that it would be useful to review in further detail. &lt;/p&gt;
</description>
        <pubDate>Fri, 30 May 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/05/30/cheatsheet/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/05/30/cheatsheet/</guid>
      </item>
    
      <item>
        <title>Behind the Magic Curtain</title>
        <description>&lt;p&gt;My Gregorc thinking style is concrete sequential, according to this &lt;a href=&quot;http://www.thelearningweb.net/personalthink.html&quot;&gt;online test&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quite honestly, I&amp;rsquo;ve never put stock in tests of this nature and view them in some respects the same way Donnie Darko views &lt;a href=&quot;https://www.youtube.com/watch?v=MqAJ5W2wQH4&quot;&gt;spectrums&lt;/a&gt;. However, I have over the years come to realize things about myself as a learner that seem to align with concrete sequential types &lt;a href=&quot;http://web.cortland.edu/andersmd/learning/gregorc.htm&quot;&gt;as outlined by Gregorc&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For instance, I learn best when the subject material is complete and coherent - limitless complexity keeps me up at night. Computer science is simultaneously wonderful and frustrating for me in that if you keep looking down the rabbit hole, what you find generally makes sense - unfortunately, the rabbit hole is infinitely deep (and usually disseminates into electrical engineering jargon). &lt;/p&gt;

&lt;p&gt;My main challenge over the last month has been accepting the fact that I can&amp;rsquo;t understand everything all at once - certain aspects of Ruby and Rails I have been forced (to a degree) to accept as &lt;a href=&quot;http://catb.org/jargon/html/A/automagically.html&quot;&gt;automagic&lt;/a&gt; (thank you Michael Hartl for introducing me to this term). In order to conform to the bootcamp model (become a programmer in three months!), it&amp;rsquo;s necessary to learn a lot of &amp;ldquo;how&amp;rdquo; without the &amp;ldquo;why&amp;rdquo; to support it. &lt;/p&gt;

&lt;p&gt;I suppose in our age of incredible complexity we have to make this sacrifice. Lest we forget Clarke&amp;rsquo;s Third Law:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Any sufficiently advanced technology is indistinguishable from magic. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve thought about this quote all through the last several months. Ruby has a lovely library of documentation and some truly incredible mixins, modules, gems, etc. Too often, I find myself using certain tools without viewing the source code. By doing so, I always feel a bit queasy - I know I&amp;rsquo;m leveraging off someone else&amp;rsquo;s work without completely understanding it. &lt;/p&gt;

&lt;p&gt;This queasy feeling is something I know I need to better come to terms with if I&amp;rsquo;m ever to be a value-add programmer. I&amp;rsquo;ll always go out of my way to understand &amp;ldquo;why&amp;rdquo;, but realize technology moves quickly, and a bootcamp&amp;rsquo;s &lt;a href=&quot;http://benbrostoff.github.io/2014/05/23/cultural-week-8/&quot;&gt;advantage&lt;/a&gt; over a university program in part is its focus on pragmatism. Again, &amp;ldquo;how&amp;rdquo; and &amp;ldquo;why&amp;rdquo; aren&amp;rsquo;t mutually exclusive, but trying to understand every aspect of software and hardware is beyond even the greatest minds of our generation (or any previous generation at that). &lt;/p&gt;

&lt;p&gt;Adding to the difficulty of balancing between &amp;ldquo;how&amp;rdquo; and &amp;ldquo;why&amp;rdquo; is the fact that my previous career - banking - was relatively easy to decipher re: &amp;ldquo;why&amp;rdquo;. We pitched our clients fee-generating products: our clients used these products to the extent that they offered a  sufficiently low cost of capital. &lt;/p&gt;

&lt;p&gt;&amp;ldquo;How&amp;rdquo; was also a known commodity - secured and unsecured bonds, ABS deals and equity raises are known processes that can be accomplished in easy to understand steps. We even made T&amp;amp;Rs - timing and responsibility sheets - to show clients exactly what we&amp;rsquo;re doing at any exact moment in time.  &lt;/p&gt;

&lt;p&gt;Imagine a T&amp;amp;R in the software world (or really, any part of the tech world) - no self-respecting engineer can claim to be able to tell a client exactly what they&amp;rsquo;ll be doing every week for 8+ weeks. In software development, multiple processes run concurrently, and unforeseen bugs and a host of other issues have the potential to destroy the most well-crafted timeline (I highly recommend Tracy Kidder&amp;rsquo;s &lt;a href=&quot;http://www.amazon.com/The-Soul-A-New-Machine/dp/0316491977&quot;&gt;The Soul of a New Machine&lt;/a&gt; as evidence here).&lt;/p&gt;

&lt;p&gt;For a concrete sequential thinker, the endless extended metaphors and abstractions in computer science can be a lot to handle at once. I have come to appreciate activities like exercising and driving because the path from A to B is so clear and well-defined. Indeed, my profession for two years was getting from A to B using an easy-to-follow roadmap (albeit a roadmap that had some long and winding roads). &lt;/p&gt;

&lt;p&gt;Programming is never a straight shot from A to B, and this part of the field is what makes it such a challenge. One cannot distill the production of useful software into a step-by-step process. Precisely because of the complexity underlying software development, it &lt;em&gt;feels&lt;/em&gt; like magic in the Clarke&amp;rsquo;s third law sense. &lt;/p&gt;

&lt;p&gt;Yet, concrete sequential learner or otherwise, I&amp;rsquo;m not averse to seeing what&amp;rsquo;s behind the magic curtain.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 May 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/05/28/magiccurtain/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/05/28/magiccurtain/</guid>
      </item>
    
      <item>
        <title>Migration to Jekyll</title>
        <description>&lt;p&gt;There are few things in life I dislike more than repetitive processes that could be automated where I learn very little (recall I&amp;rsquo;m a former investment banking analyst). My initial construction of a personal blog met this criteria. &lt;/p&gt;

&lt;p&gt;I was working with a bunch of HTML and CSS files I had coded myself. Every blog post was an individual HTML page - if I wanted to make a change to the header, footer or general layout of my site, I had no choice but to change every single page. One can imagine how annoying this process became as my blog expanded. There were also a host of smaller issues that bothered me: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I had to manually type in the dates and times of my posts&lt;/li&gt;
&lt;li&gt;My site looked terrible on mobile and tablet devices&lt;/li&gt;
&lt;li&gt;I was not pleased with the hierarchy of folders and each file&amp;rsquo;s place in the hierarchy I made up. Yet, if I wanted to change the set-up, I would have to relink every HTML page accordingly.&lt;/li&gt;
&lt;li&gt;I was spending more time on layout decisions (the classic border, padding, margin debacle) and CSS shenanigans (color schemes, hover links, shapes, etc.) than I was on writing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Constructing quality blog posts (mini-essays in some cases) is a labor of love for me and something I&amp;rsquo;ve done since I learned to write. Pre-internet, I was journaling obsessively and documenting all the inane events interesting to a sports-obsessed grade schooler (if you want to hear about Antoine Walker&amp;rsquo;s second go-around with the Celtics wherein he changed his number to 88 to accomodate Big Al Jefferson, by all means, swing by). I have experience in writing and editing my own writing (as well as others&amp;#39; writing) - I wrote for my local newspaper in highschool and was the Editorial Pages Editor and a &lt;a href=&quot;https://www.dukechronicle.com/staff/ben-brostoff/articles&quot;&gt;columnist for three years for the Duke Chronicle&lt;/a&gt;. I&amp;rsquo;m very comfortable writing - I&amp;rsquo;m less comfortable managing an entire website.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. Jekyll is a simple Ruby gem you install via your Terminal. By creating a new project through Jekyll, you get a working template with a ready-to-go setup that&amp;rsquo;s easily customizable. The Jekyll new project folder reminds me a bit of a new Ruby on the Rails project in that you have a nicely organized hierarchy that lends itself to easy changes. Below is a screenshot of a new Jekyll project on my desktop: &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src = &quot;https://lh3.googleusercontent.com/-JP5YbBMsNQg/U4NVliccwQI/AAAAAAAAALs/nEwpt9NXTaE/w215-h152-no/jekconfig.png&quot; alt= &quot;jekyll&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;From there, it&amp;rsquo;s easy to fool around with config.yml, layouts and css to change your blog as you please. A massive amount of Jekyll work is posted on Github, so it&amp;rsquo;s also easy to leverage off the work of your Jekyll predecessors. I cloned the &lt;a href=&quot;https://github.com/muan/scribble&quot;&gt;Scribble theme&lt;/a&gt; created by &lt;a href=&quot;https://github.com/muan&quot;&gt;Mu-An Chiou&lt;/a&gt; from GitHub and customized it a bit - thanks again Mu-An. &lt;/p&gt;

&lt;p&gt;Since I migrated to Jekyll, I&amp;rsquo;ve found myself spending considerably less time on blog design and layout and considerably more time on writing. I&amp;rsquo;m biased, but I feel the quality of my writing on this blog has in part improved because of Jekyll.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 May 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/05/26/technical-week-8/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/05/26/technical-week-8/</guid>
      </item>
    
      <item>
        <title>Static v. Dynamic Typing</title>
        <description>&lt;p&gt;This quote from Brendan Eich (creator of JavaScript) caught my eye while reading Peter Seibel&amp;rsquo;s &lt;a href=&quot;http://www.amazon.com/Coders-Work-Reflections-Craft-Programming/dp/1430219483&quot;&gt;&lt;em&gt;Coders at Work&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dynamic languages became popular because people can actually rapidly prototype&amp;hellip; Then maybe ater on, if they have a language that can support it, or if they&amp;rsquo;re recoding in a static language, they can write down the types. That was one of the reasons why in JavaScript we were intereted in optional typing, and we still are, though it&amp;rsquo;s controversial in the committee. There&amp;rsquo;s still a strong chance we&amp;rsquo;ll get some kind of hybrid type system into a future version of JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I neglected to note &lt;a href=&quot;http://benbrostoff.github.io/2014/04/20/technical-week-3/&quot;&gt;in an earlier post on criticisms of JavaScript&lt;/a&gt; that many programmers object to the language only catching type errors at runtime as opposed to compile time. In JavaScript, as in Ruby, Python, and other dynamically typed languages, variables are interpreted at runtime and can be changed (e.g. reassigned) as the program runs sequentially. &lt;/p&gt;

&lt;p&gt;Consequently, &lt;strong&gt;dynamic languages&lt;/strong&gt; make no demands of the programmer at compilation time and use inference to define types at runtime. This inference is also referred to as &lt;strong&gt;duck typing&lt;/strong&gt; - objects that look like and act like type &amp;ldquo;duck&amp;rdquo; are assumed to be of type &amp;ldquo;duck&amp;rdquo; at runtime. As Eich notes in the quote above, such languages allow for faster prototyping. &lt;/p&gt;

&lt;p&gt;In contrast, &lt;strong&gt;static languages&lt;/strong&gt; force the programmer to define types at compilation time and are simultaneously restrictive to productivity and a boon to error-free code. Java is the posterchild of static languages, and, to a lesser extent, C and C++ are known for being statically typed (unlike Java, though, types are not as rigidly enforced throughout the program in runtime). &lt;/p&gt;

&lt;p&gt;The debate around different different types of typing interestingly really seems to be about different types of programmers. &amp;ldquo;Good&amp;rdquo; progammers can be trusted with dynamically typed languages because they pay attention to types in the first place and write good tests. Conversely, &amp;ldquo;bad&amp;rdquo; programmers cannot be trusted to to not make type errors and need static typing to keep them in check. &lt;/p&gt;

&lt;p&gt;To a proponent of statically typed languages, any efficiency advantage to be had from dynamically typed languages is more than negated by the silly type errors that result from the lack of checks native to dynamic languages at compile time.&lt;/p&gt;

&lt;p&gt;To a proponent of dynamically typed languages, statically typed languages are unnecessarily slow and take x + y lines of code to accomplish what could be done in x lines of code in a dynamically typed language.&lt;/p&gt;

&lt;p&gt;This last point registers significantly with me, as during my brief time in an intro Java class, I remember being extremely annoyed with the class hierachies and the inability to code &amp;ldquo;outside&amp;rdquo; of a class. Just the build up to writing something useful - &lt;strong&gt;public static Main&lt;/strong&gt; and &lt;strong&gt;public static void Main (String args[])&lt;/strong&gt; and what not - was a constant thorn in my side. In contrast, Ruby gives the programmer freedom to call whatever method on whatever object and deal with the consequences (if any) at runtime. &lt;/p&gt;

&lt;p&gt;I understand any programmer over the age of 30 is probably reading this and shaking their head. Older languages no doubt were less lenient on type definition and built better programmers as a result. Anyone who argues that today&amp;rsquo;s programmers are building bad habits as a result of new dynamically typed languages is likely correct. &lt;/p&gt;

&lt;p&gt;However, the solution to the new generation of programmers having bad habits is not to have them stop using dynamic languages entirely - it&amp;rsquo;s to change the education system. Even if a language is dynamically typed, programmers can learn to keep track of their types by explicity defining them in the code (if the language allows it), using well written tests and &lt;a href=&quot;http://harrypotter.wikia.com/wiki/Alastor_Moody&quot;&gt;constant vigilance&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now, if you&amp;rsquo;ll excuse me, I have to go bang out some Ruby code with no regard for type errors. &lt;/p&gt;
</description>
        <pubDate>Sun, 25 May 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/05/25/technical-week-8/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/05/25/technical-week-8/</guid>
      </item>
    
      <item>
        <title>Bootcamps v. CS Degree</title>
        <description>&lt;p&gt;My experience discussing software engineering bootcamps with friends and family has nearly always led to a misunderstanding wherein people assume I&amp;rsquo;m attending a multi-year CS program at an accredited university. I understand this assumption - I received a BS from Duke University in Economics in 2012 and understand universities from a signaling theory perspective in most cases carry more weight than a bootcamp &amp;ldquo;degree&amp;rdquo;. &lt;/p&gt;

&lt;p&gt;I also know well the things that universities teach that Dev Bootcamp (DBC) - my bootcamp of choice for the next three months - does not teach. I took a number of computer science classes at Duke and have two close friends who graduated with a BS in Computer Science, both of whom I have spoken to at length regarding this very subject. Bootcamps in general are pragmatic - similar to vocational school, they&amp;rsquo;re more than willing to offer a &amp;ldquo;how&amp;rdquo; without a &amp;ldquo;why&amp;rdquo;. From my experience, DBC has actually been quite good at &amp;ldquo;why&amp;rdquo;, but probably not anywhere close to a university. From speaking to my two aforementioned friends, a university CS degree should give you background in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How computers work at the most granular level - assembly language, gateways, interpreters, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Algorithms and data structures&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Discrete mathematics (I took this course    at Duke and found it extremely useful in    a &amp;ldquo;how to think about a problem&amp;rdquo; sense)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Key concepts like recursion, memory usage, trees, etc.(DBC does offer to a degree from my experience)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Comfort in one or more programming languages, with Java generally being the language most schools teach&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I&amp;rsquo;m sure I&amp;rsquo;m forgetting a host of other things - I also acknowledge the electives you take have a huge impact - schools offer courses in all varieties of languages and subject matter&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In contrast, most bootcamps from my research get you the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Comfort in one or more programming languages&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Comfort in web development&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understanding of concepts front-end and back-end developers need to know: the stack, version control (using Git and GitHub), the DOM, databases, etc. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Again, I haven&amp;rsquo;t been through the nine weeks of in-person course work DBC offers (my start date is June 2nd), so please comment as you see fit&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, the learning styles / cultures of each institution are markedly different.&lt;/p&gt;

&lt;p&gt;Universities give you individual classes with a midterm and final to match. You can devote as much or as little time to them as you please.&lt;/p&gt;

&lt;p&gt;DBC in effect forces all students to devote all their time to learning (hence the boot in bootcamp). Most students I&amp;rsquo;ve spoken to claim they are in the classroom 8 am - 8 pm M - F for nine weeks, and usually devote a large chunk of their weekends to working. &lt;/p&gt;

&lt;p&gt;DBC is huge on students collaborating with eachother and requires students to pair program on a near daily basis - from my experience, universities generally do not have this requirement (perhaps there&amp;rsquo;s one or two group projects throughout the semester). There&amp;rsquo;s also no tests or review sessions; learning is rapid fire and students who do not understand need seek counsel elsewhere (and to be clear, elsewhere could mean an instructor - what it does not mean is that the class will slow down to accomodate students who learn at a &amp;ldquo;slower&amp;rdquo; pace). &lt;/p&gt;

&lt;p&gt;DBC and other bootcamps as a result probably produce many different types of graduates. Some have tapped the program for all its worth - done all the exercises, asked the instructors myriad questions, attended all the lectures and classes, etc. I know I&amp;rsquo;ve also studied in excess of a hundred hours in preparation for DBC. Many students prior to attending DBC already have web development, data science, or other useful experience.&lt;/p&gt;

&lt;p&gt;While college also produces many different types of graduates, the preponderance of tests and evaluations makes it such that students spend a lot of time on review. After four years, students probably are more similar in their knowledge base. They&amp;rsquo;re also probably more secure in what they know having been tested on it multiple times. While DBC does evaluate students periodically, it&amp;rsquo;s difficult to &amp;ldquo;fail&amp;rdquo; for lack of a better word (although a handful of students drop out every cohort or are asked to repeat units). As such, the signaling power from graduating from DBC is no doubt weaker than a CS degree. &lt;/p&gt;

&lt;p&gt;Yet, I fully believe there are instances where bootcamp students come out of bootcamps more prepared to be value-add to companies than university students, and vice versa. As are so many things in life, it largely depends on the individual. &lt;/p&gt;

&lt;p&gt;What follows are some of the reasons I believe DBC is a better fit for me than a university:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;I like focusing on one thing for long periods of time.&lt;/strong&gt; I never really enjoyed balancing 5-7 classes throughout high school and college. I think the Colorado College model of &amp;ldquo;one class at a time&amp;rdquo; is interesting in this respect - ask students to focus on one thing and they&amp;rsquo;ll probably do it. Ask them to focus on multiple things and certain things are inevitably sacrificed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;I think learning any language largely depends on getting a huge volume of reps over several or more months.&lt;/strong&gt; My attempts to learn Java in Duke CS classes did not benefit from (i) only having two classes a week and (ii) only coding maybe three times a week - during class and when doing homework. Bootcamps force me to code 12 hours a day for nine weeks - I&amp;rsquo;ve also coded over 100 hours in preparation for DBC. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DBC / bootcamp instructors have worked for large and small companies in front-end and back-end capacities.&lt;/strong&gt; Professors and TAs usually want to be in academia for life (again, I acknowledge this is a generalization). DBC is good in relaying the latest developer tools, debuggers, libraries, etc. In college, you generally would have to find this out yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;There is something to be said for vocational training v. academic training.&lt;/strong&gt; I&amp;rsquo;m at a point in my life where I have worked   for two years and understand well how difficult it can be to value-add without the proper training. As a new software engineer, I want to have skills that matter - I also want to have a way of thinking that matters, which is one area a university is likely superior to a bootcamp, but I&amp;rsquo;ve also come to believe skills and ways of thinking are highly interrelated. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The bootcamp / DBC curriculum is updated every single month to accomodate industry changes - universities have been teaching the same classes for decades.&lt;/strong&gt; Curriculum changes occur extremely slowly in universities. Changes are decided by large committees and debated ad nauseum. Students are the victims here as the curriculum becomes further and further divorced from current work in the respective discipline. Because bootcamps are so small and have a better central model of decision making, they are quick to respond to input from companies who have hired graduates and change curriculums accordingly. I&amp;rsquo;m not saying here that the workplace should dictate what people learn - I&amp;rsquo;m merely saying that if one&amp;rsquo;s goal is to be a value-add in the workplace, company feedback is a good place to start.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Importantly, I want to revisit this post after I graduate from DBC. It is difficult to evaluate a bootcamp without having attended one or a university CS program when I have a BS in Economics (although I took CS classes). &lt;/p&gt;

&lt;p&gt;Finally, I believe more writing on this subject is highly necessary to help future students decide how to invest in themselves. Bootcamps are such a new educational model in  software engineering that they deserve more attention from writers / programmers who can objectively evaluate their offerings.  &lt;/p&gt;
</description>
        <pubDate>Fri, 23 May 2014 00:00:00 -0400</pubDate>
        <link>http://benbrostoff.github.io//2014/05/23/cultural-week-8/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/05/23/cultural-week-8/</guid>
      </item>
    
      <item>
        <title>Precursor to a New Journey</title>
        <description>&lt;p class = &quot;blogpost&quot;&gt;June 2nd marks the beginning of my DBC cohort date in New York.&lt;/p&gt;

&lt;p class = &quot;blogpost&quot;&gt;To be frank, I feel I&amp;rsquo;m not exagerrating when I claim that signing up for DBC was the most difficult decision of my life (which goes to show you the relative lack of events that have occurred in my life thus far). I left a comfortable job in Wells Fargo&amp;rsquo;s asset-backed finance division in Charlotte, where I very much liked my colleagues and was well practiced at the investment banking duties associated with the position.&lt;/p&gt;

&lt;p class = &quot;blogpost&quot;&gt;Yet, computer science and programming I had flirted with for several years, and I found as time progressed it was a flirtation that turned into something far more powerful. I am someone with a natural inclination to take things apart and figure out how they work. I like to draw; I love to build; I live to write.&lt;/p&gt;

&lt;p class = &quot;blogpost&quot;&gt;I dabbled in a few CS classes at Duke and wish I had done more - the reason I didn&amp;rsquo;t I can purely attribute to already having achieved an Economics degree in my junior year and naturally assuming I would have some type of career in business / finance. Besides, I got A&amp;rsquo;s in all my economics classes and B&amp;rsquo;s in the CS I took (basic Java, discrete mathematics)&amp;hellip; but perhaps this was to be expected due to Duke&amp;rsquo;s massive grade inflation in the former and lack thereof in the latter.&lt;/p&gt;

&lt;p class = &quot;blogpost&quot;&gt;In reflecting, I&amp;rsquo;ve come to realize that my work in banking convinced me I was &lt;i&gt; good &lt;/i&gt; at something. It was easy to put together slide decks and elementary models and write credit memos once I had done it for a year. The volume of work I did created something like fulfillment in my life.&lt;/p&gt;

&lt;p class = &quot;blogpost&quot;&gt;I know intimately, though, that work for work&amp;rsquo;s sake is surface fulfillment. Volume is not quality. And having one&amp;rsquo;s work be both challenging and intellectually stimulating in part renders work meaningful. Moreover, work needs to serve a greater purpose - chiefly, the advancement of technology that benefits all.&lt;/p&gt;

&lt;p class = &quot;blogpost&quot;&gt;I&amp;rsquo;m a firm believer in one&amp;rsquo;s job being tied to one&amp;rsquo;s passion, if not the exact same. I consider computers humanity&amp;rsquo;s most wonderful and incredible invention, and I would be amiss if I did not gain an education in how to use them to their fullest extent: writing useful software. I am proud to undertake the craft of software engineering, and excited for the challenge that lies ahead.&lt;/p&gt;

&lt;p class = &quot;blogpost&quot;&gt;I covered in a previous post the idea of stereotype threat. It seems to me that stereotype threat covers not only groups of people, but ideas. I once believed that we should do what we&amp;rsquo;re &amp;ldquo;good&amp;rdquo; at. It seems logical that what I displayed a talent for should be my vocation. Experience has borne out the idea that motivation is intimately tied to intellectual curiousity and pursuing challenges that push us as thinkers. Computer science and programming has given me an intellectual motivation that economics never did, and I welcome my pending career change.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 May 2014 12:00:00 +0000</pubDate>
        <link>http://benbrostoff.github.io//2014/05/18/cultural-week-7/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2014/05/18/cultural-week-7/</guid>
      </item>
    
  </channel>
</rss>