<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ben Brostoff</title>
    <description></description>
    <link>http://benbrostoff.github.io/</link>
    <atom:link href="http://benbrostoff.github.io//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Why I'm Writing About ML (ML Series, Part 1)</title>
        <description>&lt;blockquote&gt;

  &lt;p&gt;At the heart of science is an essential balance between two seemingly contradictory attitudes - an openness to new ideas, no matter how bizarre or counterintuitive, and the most ruthlessly skeptical scrutiny of all ideas, old and new.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Carl Sagan, &lt;a href=&quot;https://www.amazon.com/Demon-Haunted-World-Science-Candle-Dark/dp/0345409469&quot;&gt;The Demon-Haunted World&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;/blockquote&gt;

&lt;p&gt;I know of no better tool than writing to explore my own understanding of technical subjects. After years of reading about machine learning in the press, programmer blogs and from technology leaders of our time, I want to investigate ML on my own terms. This investigation may take months or years or, based on how quickly the field is changing, forever - I’m not sure. What I can say is that my goal in writing a multi-part series is no less than what Sagan describes in the above quote. I intend to be both open to extraordinary claims about machine learning and simultaneously skeptical.&lt;/p&gt;

&lt;p&gt;The value I believe I can add in writing this series is in infusing each post with as much illustrative code as possible. I want to explore not only programming libraries, but the cloud services that allow library code to be run with GPU enabled computing power. While I have been extraordinarily influenced by previous explorations of ML like Tim Urban’s &lt;a href=&quot;https://waitbutwhy.com/2015/01/artificial-intelligence-revolution-1.html&quot;&gt;AI Revolution Series&lt;/a&gt;, these posts are going to be technical and experiment heavy.&lt;/p&gt;

&lt;p&gt;I want to answer for myself not only &lt;em&gt;why&lt;/em&gt; machine learning works, but also the various &lt;em&gt;hows&lt;/em&gt;. I will try to approach as much as I can from first principles in answering &lt;em&gt;why&lt;/em&gt; machine learning is effective. Where ML relies on ideas from linear algebra and calculus, I promise to explore these fields as well. On the subject of &lt;em&gt;how&lt;/em&gt; machine learning works today, I want to start first with as few libraries as possible, and then move slowly into popular libraries like &lt;code&gt;TensorFlow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What these posts will &lt;em&gt;not&lt;/em&gt; do is engage in futurism discussions or projections of what machine learning could do. I am going to stay focused on what machine learning &lt;em&gt;can do at present&lt;/em&gt;. Any demonstrations of machine learning capabilities I’ll post on GitHub. As someone with no formal ML background, I encourage anyone (un)lucky enough to be reading these posts to raise issues and provide guidance on what I could be doing better.&lt;/p&gt;

&lt;p&gt;Along the way, I’ll be diving into the following resources. I’ll add to this list as this series takes shape:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Andrew Ng’s deep neural network &lt;a href=&quot;https://www.coursera.org/specializations/deep-learning&quot;&gt;Coursera specialization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sebastian Raschka’s &lt;a href=&quot;https://www.amazon.com/Python-Machine-Learning-Sebastian-Raschka-ebook/dp/B00YSILNL0&quot;&gt;Python Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, I want to manage expectations about how often I’ll be posting in this series and post lengths. &lt;a href=&quot;https://www.amazon.com/Deep-Work-Focused-Success-Distracted/dp/1455586692&quot;&gt;Deep Work&lt;/a&gt; is one of my favorite books, and in the spirit of Cal Newport’s suggestion to budget deep work hours to projects, I intend to devote 3-5 hours of deep work per week to this project. In terms of length, these posts might be short or long depending on the idea being explored. I have set a short-term goal of posting once per week for the next 5 weeks; after that, I’ll evaluate the quality of those posts and make improvements for the next ones.&lt;/p&gt;

&lt;p&gt;I’m excited to get started. If these posts can change my own opinion on machine learning, than they were worth doing. If anyone else reads them, it’s an added bonus.&lt;/p&gt;

&lt;p&gt;Here’s to openness and ruthless skepticism.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
        <link>http://benbrostoff.github.io//2017/09/19/why-ml/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2017/09/19/why-ml/</guid>
      </item>
    
      <item>
        <title>RTD</title>
        <description>&lt;p&gt;RTD - Read the Docs. That phrase cuts across industries - I have heard it just as much as a programmer as I did as an investment banker. And while when said verbally, RTD (sometimes RTFD) usually lands with a hint of annoyance, I really believe it’s some of the most important career advice I have ever received.&lt;/p&gt;

&lt;p&gt;I recently was writing some unit tests to check that a small wrapper around the &lt;a href=&quot;https://aws.amazon.com/documentation/ses/&quot;&gt;AWS.SES API&lt;/a&gt; was invoked correctly and logging error messages as expected. Using &lt;a href=&quot;https://github.com/sinonjs/sinon&quot;&gt;&lt;code&gt;sinon&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;https://github.com/dwyl/aws-sdk-mock&quot;&gt;&lt;code&gt;aws-sdk-mock&lt;/code&gt;&lt;/a&gt; library, I had some code that looked like the below to check error handling:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/1cba16104882f0c73609ff105ee39d5d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As background, &lt;code&gt;mock&lt;/code&gt; from &lt;code&gt;aws-sdk-mock&lt;/code&gt; takes three arguments, the third of which is a function that, in the case of mocking &lt;a href=&quot;http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SES.html#sendEmail-property&quot;&gt;sendEmail&lt;/a&gt;, takes the email params and a callback. The callback itself takes two arguments - an error message and data from the response.&lt;/p&gt;

&lt;p&gt;I received a comment from my boss on this code review to the effect that every time I was using &lt;code&gt;callsFake&lt;/code&gt;, I could just be using &lt;a href=&quot;http://sinonjs.org/releases/v3.0.0/stubs/&quot;&gt;&lt;code&gt;callsArgWith&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;http://sinonjs.org/releases/v3.0.0/stubs/&quot;&gt;documentation&lt;/a&gt; for &lt;code&gt;callsArgWith&lt;/code&gt; points to &lt;code&gt;callsArg&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;stub.callsArgWith(index, arg1, arg2, …)&lt;/p&gt;

  &lt;p&gt;Like callsArg, but with arguments to pass to the callback.&lt;/p&gt;

  &lt;p&gt;stub.callsArg(index)&lt;/p&gt;

  &lt;p&gt;Causes the stub to call the argument at the provided index as a callback function. stub.callsArg(0); causes the stub to call the first argument as a callback.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;It made sense - my only goal was to fake invoking the callback &lt;code&gt;sendEmail&lt;/code&gt; takes following resolution of the email &lt;code&gt;Promise&lt;/code&gt;. Giving it an error didn’t require passing in a new function to &lt;code&gt;callsFake&lt;/code&gt; - &lt;code&gt;sinon&lt;/code&gt; already offers this functionality:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
sendEmailStub = sandbox.stub().callsArgWith(1, new Error());
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And because you’re always one click a way in your IDE from &lt;a href=&quot;https://github.com/sinonjs/sinon/blob/master/lib/sinon/default-behaviors.js#L55&quot;&gt;seeing the source&lt;/a&gt; in &lt;code&gt;node_modules&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/14244abba5cb9ee47dac6884bc862abf.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;after which there’s an easy path to cloning the source repo and after some investigation finding your way to &lt;code&gt;callCallback&lt;/code&gt; in &lt;code&gt;lib/sinon/behavior.js&lt;/code&gt;, which gets the callback using &lt;code&gt;callArgAt&lt;/code&gt; set in the source we looked at, which then takes the &lt;code&gt;callbackArguments&lt;/code&gt; sans the &lt;code&gt;fake&lt;/code&gt; and &lt;code&gt;position&lt;/code&gt; arguments passed in &lt;code&gt;callsArgWith&lt;/code&gt; (note the function signature in the docs differs from what is the source - this is because &lt;a href=&quot;https://github.com/sinonjs/sinon/blob/master/lib/sinon/behavior.js#L204&quot;&gt;&lt;code&gt;addBehavior&lt;/code&gt;&lt;/a&gt; will always add functions to the stub prototype with the first argument being the stub itself).  &lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&quot;https://github.com/sinonjs/sinon/blob/master/test/stub-test.js#L574&quot;&gt;here’s the test in &lt;code&gt;sinon&lt;/code&gt;&lt;/a&gt;, clearly demonstrating that a callback passed as the second argument to a stub should be able to be passed any argument with &lt;code&gt;callsArgWith&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/5951ea3710240f413739438620148022.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In looking at the &lt;code&gt;sinon&lt;/code&gt; docs and then the Amazon SES docs, I realized there was probably an ocean of API functionality I was not taking advantage of. And the only way to find out would be to study and experiment. Which is the fun of being an engineer.&lt;/p&gt;

&lt;p&gt;I bring up this example because I think it illustrates the importance of reading documentation (and even better, source code). I was familiar with &lt;code&gt;callsFake&lt;/code&gt;, so every testing situation looked like a nail to its hammer. This is what happens when API docs are read quickly and with the intent of completing a task. The cost is that robust APIs are used incorrectly, and code that should be short and sweet becomes long and ugly.&lt;/p&gt;

&lt;p&gt;I know this seems obvious, but I wanted to write about it because I know there are different gradients of RTD. In banking, you might read the earnings call transcript but not the 10-Q; only the part of the S-1 with the risks to the business; the first tab of the huge Excel model.&lt;/p&gt;

&lt;p&gt;In programming, there’s cherry-picking documentation; reading the documentation without the source code; starting a project with “getting started” documentation and never revisiting the docs again, and so much more.&lt;/p&gt;

&lt;p&gt;A lot of this can be argued against with allusions to time management principles. How am I supposed to get anything done if I’m reading forty thousands pages of documentation and source code? Obviously, reading all the documentation - especially for something like the AWS SDK - is impossible. But transferring a 3 hour chunk of time from 70 / 30 writing code / reading docs to 65 / 35 writing code / reading docs?&lt;/p&gt;

&lt;p&gt;You might end up improving your code and reading some interesting source code from a great library  &lt;/p&gt;
</description>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate>
        <link>http://benbrostoff.github.io//2017/08/05/rtd/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2017/08/05/rtd/</guid>
      </item>
    
      <item>
        <title>Upgrades</title>
        <description>&lt;p&gt;I bought a new MacBook Pro 2016 today, which represents a large upgrade for me. I was on an MBP 2012 before. The performance improvements are remarkable. Just using it today felt like one of those (ever more frequent) times when technology shocks you with how quickly it improves. I got to thinking about how many open source tools just in the last few years have sped up my workflow as a developer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;Anaconda&lt;/li&gt;
  &lt;li&gt;Jupyter notebooks&lt;/li&gt;
  &lt;li&gt;ES6 (especially &lt;code&gt;async / await&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;yarn&lt;/li&gt;
  &lt;li&gt;React and React Native&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the last decade (almost half decade), at some point one of these things did not exist. I could not envision myself living without any one of them now.&lt;/p&gt;

&lt;p&gt;As someone who uses a lot of open source tools, I feel very privileged. I am the beneficiary of frequent upgrades. When I need to debug someone else’s library, it’s generally not too terrible, and almost half the time there’s a robust conversation on GitHub about the exact issue I’m having. The other half of the time, I’m probably using the API incorrectly. Being a developer is fun because nothing stays broken for that long.&lt;/p&gt;

&lt;p&gt;But yes, more things do break, and complexity increases. That’s a given. And Hacker News, reddit and Twitter will remind you ad nauseam that everything is terrible and you’re part of the problem.&lt;/p&gt;

&lt;p&gt;I sometimes worry that these channels have become so vocal that they’re discouraging would-be makers from contributing. &lt;a href=&quot;https://www.kennethreitz.org/essays/the-reality-of-developer-burnout&quot;&gt;Kenneth Reitz wrote recently about publish-only mode&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;

    &lt;p&gt;I didn’t want to lose what I valued most about my position within our community — being able to influence the world I cared so much about. So, I unfollowed everyone on Twitter. Every single person. I stopped paying attention to tech trends and reading hacker news. I went into publish-only mode.&lt;/p&gt;

  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;I continue to find these words inspirational, because I think they’re more relevant than ever. The open source ecosystem is meant to be lived in and improved. To the extent that developers can adopt improved software with as little friction as possible, I believe the world becomes a better place.&lt;/p&gt;

&lt;p&gt;I was reminded today that software and hardware improvements can really impact human life in a positive way. I want to help bring upgrades into the open source ecosystem as much as I can. And the road to upgrades lies in &lt;a href=&quot;https://www.amazon.com/dp/B00X47ZVXM/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot;&gt;deep work&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, here’s to publish-only mode, and resolving to be a part of the next decade of upgrades.  &lt;/p&gt;
</description>
        <pubDate>Sat, 06 May 2017 00:00:00 +0000</pubDate>
        <link>http://benbrostoff.github.io//2017/05/06/upgrades/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2017/05/06/upgrades/</guid>
      </item>
    
      <item>
        <title>Destructuring Assignment</title>
        <description>&lt;blockquote&gt;
  &lt;blockquote&gt;

    &lt;p&gt;The foundation of the modern world is developer tools.&lt;/p&gt;

  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/mxcl/status/619373095199969280?lang=en&quot;&gt;Max Howell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think destructuring assignment is one of the most useful tools in the ES6 toolkit. &lt;/p&gt;

&lt;p&gt;First off, a definition of destructuring assignment from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;MDN docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;

    &lt;p&gt;The destructuring assignment syntax is a JavaScript expression that makes it possible to extract data from arrays or objects into distinct variables.&lt;/p&gt;

  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Said another way, destructuring allows for creation or assignment of variables from parts of arrays or objects. Because it is not the job of developer documentation to sell different features of the API, or promote common use cases (depending on your perspective), I want to take the time to do it here. I find myself using destructuring assignment time and time again for a host of different reasons. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Imports, Function Arguments and Variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This one I think is the most straightforward use case suggested by the docs. Extracting functionality from large Node modules, pulling out object properties from an argument in a function parameter, or creating multiple &lt;code&gt;const&lt;/code&gt;s from an object are all low hanging fruit. What gets interesting is when objects have deeply nested structures and can be destructured. Consider this ridiculous example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/c30b2ef1f5c4022c6b977ef75c1ac590.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;While I think more nesting levels of destructuring obfuscate code, this technique is really useful when taken with a grain of salt. This usefulness especially shines when using &lt;code&gt;Array&lt;/code&gt; functions like &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt;. Consider the scenario where you get a bunch of database results that have a bunch of properties, some of which have values of type &lt;code&gt;Array&lt;/code&gt;. Maybe the client needs to show all the results but also some aggregations (i.e. for whatever reason, the aggregation occurs outside of the DB).&lt;/p&gt;

&lt;p&gt;A data request like “show me total points scored in the first half by this subset of basketball players” works well with destructuring:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/ae147b4908812281305a40a760f76aaf.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I particularly like how variable naming (&lt;code&gt;firstQ&lt;/code&gt;, &lt;code&gt;secondQ&lt;/code&gt;) can take place in the second function argument of the &lt;code&gt;reduce&lt;/code&gt; function as opposed to in the function itself.&lt;/p&gt;

&lt;p&gt;Speaking of renaming things…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Renaming Things&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because context so often determines what the purpose of a piece of data is, it makes sense to me to rename the same piece of data depending on context.&lt;/p&gt;

&lt;p&gt;For instance, let’s assume you had some player data from the NBA that looked like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/2604218271ca8d8b60577e76be6f8735.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You then have one function that simply takes in the data for one player and returns their points per game.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/041e34686f448133840c6bc94b95c62f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It makes sense to call the argument here &lt;code&gt;pointsPerGame&lt;/code&gt;, as the purpose of this function is simply to get that value. &lt;/p&gt;

&lt;p&gt;In contrast, let’s say you have a function that takes two arguments - data for an individual player and all player data - and then returns the data for all players with more PPG than that player. Here, changing the name &lt;code&gt;pointsPerGame&lt;/code&gt; to &lt;code&gt;ppgThreshold&lt;/code&gt; makes a lot of sense.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/0f2e87a7a72043c17183035ec865272e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We can actually go one step further here and destructure and rename the argument in the &lt;code&gt;filter&lt;/code&gt; function for clarity, using &lt;code&gt;playerPpg&lt;/code&gt; instead of &lt;code&gt;player.pointsPerGame&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/e0b5b1a6c94f58e5a26ae74c33688c89.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Applying Left-to-Right Thinking to Right-To-Left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One thing in particular I like about destructuring assignment is that &lt;em&gt;it makes your brain reverse how you think about variable assignment&lt;/em&gt;. Pre ES6 destructuring, assigning a variable to the second and third elements of a Javascript array looked something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/d09ea100babb266b1c8b918348faf534.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The natural thought process at least for me here is “look to the right hand side for meaning”. I see the numbers array and the indices at 2 and 3, and then understand.&lt;/p&gt;

&lt;p&gt;With destructuring, the above can be done as follows:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/600e5c1e6b3e33a420829b3bb3062fd6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now, my thought process becomes “first, look to the left hand side for meaning”. I see the square brackets around &lt;code&gt;a&lt;/code&gt; and understand I need to get the first element of the right hand side. A side benefit is I immediately get that &lt;code&gt;numbers&lt;/code&gt; is an &lt;code&gt;Array&lt;/code&gt; with at least three elements too (obviously not guaranteed, but we know that’s the intent at least), so destructuring can convey type information too.&lt;/p&gt;

&lt;p&gt;As a side note here, Python gets close to allowing you to do this with lists, but will throw a &lt;code&gt;ValueError: too many values to unpack&lt;/code&gt; if the size of the list does not match the number of variables. &lt;/p&gt;

&lt;p&gt;Overall, I’m amazed by how many different use cases ES6’s destructuring syntax has (and I’m sure there’s more to come in ES7). This feature is the rare tool that’s multi-purpose and easy to get the hang of. Moreover, it forces me to think about programming in a different way - looking to the left hand side of a variable assignment for meaning.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://benbrostoff.github.io//2017/01/02/destructuring-assignment/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2017/01/02/destructuring-assignment/</guid>
      </item>
    
      <item>
        <title>Endless Learning</title>
        <description>&lt;p&gt;There is an infinite amount of knowledge to consume and an average human only lives &lt;a href=&quot;http://www.who.int/gho/mortality_burden_disease/life_tables/situation_trends/en/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;71.4 years&lt;/strong&gt;&lt;/a&gt;. I wanted to write this post to remind myself of 1) why the current landscape for learning is so excellent and 2) strategies that work for mining this landscape for its excellence.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;An Excellent Landscape&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are lots of fantastic, thoughtful writers. The amount of superb programming blogs in particular impresses me – &lt;a href=&quot;http://jvns.ca/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Julia Evans&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;http://geoff.greer.fm/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Geoff Greer&lt;/strong&gt;&lt;/a&gt; are at present my two favorites. &lt;a href=&quot;http://waitbutwhy.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Wait But Why&lt;/strong&gt;&lt;/a&gt; by Tim Urban is basically free books on interesting topics (thanks to my friend Max for showing me this awesome &lt;a href=&quot;http://waitbutwhy.com/2015/05/elon-musk-the-worlds-raddest-man.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;4 part WBW series on Elon Musk&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The podcasting landscape – since I started listening to podcasts – has never been better. &lt;a href=&quot;http://fourhourworkweek.com/podcast/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Tim Ferriss&lt;/strong&gt;&lt;/a&gt; lands superb guest after superb guest. &lt;a href=&quot;http://www.stuffyoushouldknow.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Stuff You Should Know&lt;/strong&gt;&lt;/a&gt; is an hour learning about brand new stuff. And I’ll always listen to &lt;a href=&quot;https://soundcloud.com/the-bill-simmons-podcast&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Bill Simmons&lt;/strong&gt;&lt;/a&gt; wax poetic on basketball for an hour.&lt;/p&gt;

&lt;p&gt;Netflix promises whatever thing you happen to be interested in. I just watched &lt;a href=&quot;http://www.bbc.co.uk/programmes/b0074t4x&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Planet Earth: Seasonal Forests&lt;/strong&gt;&lt;/a&gt; and learned more about the biosphere than at any point of being an adult.&lt;/p&gt;

&lt;p&gt;I have been consuming these great things in part by abandoning my “traditional” media sources. In high school and college I had various mentors tell me to read the Wall Street Journal religiously – I admit I don’t do that any more.  While that seemed like sound advice at the time, I feel I am learning more by foregoing newspapers. WSJ, NYT and the Boston Globe – the three newspapers that I see lying around most often – seem to have become obsessed with gossipy political stories.&lt;/p&gt;

&lt;p&gt;Books are always what I learn the most from.  Blogs and podcasts lead to strong book recommendations. Greer’s &lt;a href=&quot;http://geoff.greer.fm/2016/01/04/on-learning-c-part-1-k-r/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;four part series on learning C&lt;/strong&gt;&lt;/a&gt; led me to purchase &lt;a href=&quot;http://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628/ref=pd_sim_14_1?ie=UTF8&amp;amp;dpID=41qX6YdIJ7L&amp;amp;dpSrc=sims&amp;amp;preST=_AC_UL320_SR244%2C320_&amp;amp;refRID=1B6FHHVSB9JKW4TVBCMG&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;K&amp;amp;R&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/Computer-Systems-Programmers-Perspective-Edition/dp/0136108040&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Computer Systems: A Programmer’s Perspective&lt;/strong&gt;&lt;/a&gt;. Ferriss’s podcast has been responsible for me reading the following books: &lt;a href=&quot;http://www.amazon.com/Not-Fade-Away-Short-Lived/dp/006073731X&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Not Fade Away&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;http://www.amazon.com/Influence-Psychology-Persuasion-Robert-Cialdini/dp/006124189X&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Influence&lt;/strong&gt;&lt;/a&gt;, the &lt;a href=&quot;http://www.amazon.com/Art-Learning-Journey-Optimal-Performance/dp/0743277465&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Art of Learning&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/War-Art-Winning-Creative-Battle/dp/1501260626&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;The War of Art&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I’ve been lucky to have fantastic friends who led me to read books that changed my life. &lt;/p&gt;

&lt;p&gt;Chris – thank you for Tony Bramwell’s &lt;a href=&quot;http://www.amazon.com/Magical-Mystery-Tours-Life-Beatles/dp/0312330448&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Magical Mystery Tours&lt;/strong&gt;&lt;/a&gt;. I still have your copy. &lt;/p&gt;

&lt;p&gt;Joseph – a big tip of the hat for &lt;a href=&quot;http://www.amazon.com/Obstacle-Way-Timeless-Turning-Triumph/dp/1591846358&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;The Obstacle is the Way&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/Deep-Work-Focused-Success-Distracted/dp/1455586692&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Deep Work&lt;/strong&gt;&lt;/a&gt;. I still travel with &lt;a href=&quot;http://www.amazon.com/Meditations-Thrift-Editions-Marcus-Aurelius/dp/048629823X&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Meditations&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dad – thank you for &lt;a href=&quot;http://www.amazon.com/Values-Game-Bill-Bradley/dp/0767904494&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Values of the Game&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Being Selective&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is an endless amount of learning to be done, and no better time to do it. I understand the temptation to endlessly bemoan targeted ads and sponsored content and promotional tweets. However, I really believe these things can be easily avoided. For me, here are the strategies that have worked:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Two books per month, at the same time&lt;/em&gt; - I listed this one first because it has easily been the most useful. Since 2014, I have been trying to read at least 20 books per year - you can see &lt;a href=&quot;http://benbrostoff.github.io/books/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;my progress here&lt;/strong&gt;&lt;/a&gt;. The two per month will get me a little beyond this goal. I try my best to make these two books extremely different so switching between them is interesting. For instance, right now I’m reading Neal Stephenson’s &lt;a href=&quot;https://www.amazon.com/Snow-Crash-Neal-Stephenson-ebook/dp/B000FBJCJE?ie=UTF8&amp;amp;qid=&amp;amp;ref_=tmm_kin_swatch_0&amp;amp;sr=&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Snow Crash&lt;/strong&gt;&lt;/a&gt; and Doris Kearns Goodwin’s &lt;a href=&quot;http://www.amazon.com/Team-Rivals-Political-Abraham-Lincoln/dp/0743270754&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Team of Rivals&lt;/strong&gt;&lt;/a&gt;. The former is a sci-fi thriller that takes place partly in reality and partly in the metaverse, a VR centered manifestation of reality. The characters use a funny, futuristic slang and there’s lots of violence, gore and riffs on computers. The latter (disclaimer: I’ve been reading this on and off since February in part because it’s 944 pages) follows Lincoln’s rise to the presidency through his death, while also simultaneously following the members of his war cabinet - William H. Seward, Salmon P. Chase and Edward Bates. &lt;em&gt;Rivals&lt;/em&gt; in both chronology and tone is the opposite of &lt;em&gt;Snow Crash&lt;/em&gt;, which makes reading them at the same time awesome. And having both on Kindle makes it easy to switch from one to the other.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Twitter selectively&lt;/em&gt; - I can’t think of many bigger timesinks than scrolling through Twitter. That said, a lot of people I follow from time to time tweet out high quality reads I never would have found myself. For every one of these tweets, maybe five or six occur in between which are less interesting, or require context to even understand (which then requires more scrolling through Twitter). &lt;a href=&quot;https://twitter.com/pmarca&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Marc Andreessen&lt;/strong&gt;&lt;/a&gt; is perhaps the biggest example of this phenomenon. A lot of tools exist for parsing out the good tweets. I built one for myself because I wanted to use Go - &lt;a href=&quot;https://github.com/BenBrostoff/twitter-news&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;my little JSON API&lt;/strong&gt;&lt;/a&gt; finds the top tweets from a user’s last 200 from a couple people I find particularly interesting. &lt;a href=&quot;http://nuzzel.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Nuzzel&lt;/strong&gt;&lt;/a&gt; is the other solution I use, which basically highlights links that multiple people I follow tweet.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Pocket and Rex&lt;/em&gt; - I’ve been using &lt;a href=&quot;https://getpocket.com/a/queue/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Pocket&lt;/strong&gt;&lt;/a&gt; for two years and &lt;a href=&quot;https://itunes.apple.com/us/app/rex-share-recommendations/id965827767?mt=8&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Rex&lt;/strong&gt;&lt;/a&gt; for two months. My Pocket strategy is simple but works well for me - during the weekdays, I pocket a bunch of stuff while I eat lunch at my computer and then read it on Saturday / Sunday mornings. As an aside, Pocket is also good for those times when you come across a Stack Overflow post not really directly related to the thing you’re working on, but nonetheless interesting. If a friend e-mails or texts me a link, I’ll pocket it immediately. Rex, still in its relative infancy as an app, is good because users can only recommend stuff. Said another way, there’s no outlet for debates or vitriol or trolling like on Twitter. As Rex’s CEO, Chris Smith, helpfully pointed out to me, &lt;a href=&quot;https://twitter.com/bmb21/status/731612756843991040&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Rex links are Pocketable, and it may have a public API in the future&lt;/strong&gt;&lt;/a&gt;, which would allow for some awesome customization possibilities.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Making some time for daily news&lt;/em&gt; - I enjoy following sports and the stock market on a regular basis, as well as keeping tabs on tech and foreign affairs news (really, anything that is not the 2016 presidential race). I find headline scanning on ESPN, Bloomberg and Hacker News is generally sufficient to accomplish this task, where I’ll pocket the longer reads if they seem good. I have little cron jobs that allow me to keep up with my &lt;a href=&quot;https://github.com/BenBrostoff/Fantasy-Baseball-Scraper&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;fantasy baseball team&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/BenBrostoff/daily_stock_report&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;stock portfolio&lt;/strong&gt;&lt;/a&gt;. Stuff like this is a good excuse to do some programming with new tools and languages in a no pressure context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Conclusion&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Life is short, and reading material is long. I feel a lot more satisfied with my free time since I abandoned newspapers and focused exclusively on good blogs, books and podcasts. Being disciplined with the books I read each month, using Twitter in a highly selective way, and combining Pocket and Rex functionality helps me discover good material. The daily news I’m interested in I can get through headline scanning and automated web scraping scripts.&lt;/p&gt;

</description>
        <pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate>
        <link>http://benbrostoff.github.io//2016/05/28/endless-learning/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2016/05/28/endless-learning/</guid>
      </item>
    
      <item>
        <title>Devotion to Craft</title>
        <description>&lt;p&gt;A couple of my favorite things: the documentary &lt;a href=&quot;http://www.rottentomatoes.com/m/meru_2015/&quot; target=&quot;_blank&quot;&gt;Meru&lt;/a&gt;, the essay &lt;a href=&quot;http://www.newyorker.com/magazine/2014/04/21/in-deep-2&quot; target=&quot;_blank&quot;&gt;In Deep&lt;/a&gt;, the 30 for 30s on &lt;a href=&quot;http://espn.go.com/30for30/film?page=into-the-wind&quot; target=&quot;_blank&quot;&gt;Terry Fox&lt;/a&gt; and &lt;a href=&quot;http://espn.go.com/30for30/film?page=the-birth-of-big-air&quot; target=&quot;_blank&quot;&gt;Dave Mirra&lt;/a&gt;. In all of them, there are people who in the truest sense of the words are &lt;em&gt;willing to risk life and limb for their craft&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That is exceedingly rare in a world where we have all the things we need and more.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 May 2016 00:00:00 +0000</pubDate>
        <link>http://benbrostoff.github.io//2016/05/08/caring-about-craft/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2016/05/08/caring-about-craft/</guid>
      </item>
    
      <item>
        <title>Reading Code</title>
        <description>&lt;p&gt;I think reading code is the best way to improve as a software engineer.&lt;/p&gt;

&lt;p&gt;I like lists for standardizing processes with many steps. To this end, I thought I’d make a checklist of things I’ve come to realize are my own best techniques as they relate to reading code. The central question they all get at - &lt;i&gt;If asked to explain and defend every engineering decision made in whatever piece of code I’m reviewing, could I do it?&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Anyways, the checklist:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Can I run the code successfully on my local environment? If I had to do a bunch of manual configuration, could any of this configuration be automated and checked into source control? If not, does the project Wiki need to be updated to include the manual configuration steps?&lt;/li&gt;
  &lt;li&gt;Does the code solve the issue or implement the feature it set out to resolve? If it’s tied to a GitHub issue, JIRA ticket, etc., does it satisfy whatever criteria was outlined in the issue or ticket?&lt;/li&gt;
  &lt;li&gt;Can I hit breakpoints in the code additions and follow a stack trace back to the entry point? &lt;/li&gt;
  &lt;li&gt;If there is exception handling, can I hit the error cases and see that they’re handled as expected?&lt;/li&gt;
  &lt;li&gt;Can I differentiate between 1) standard library calls, 2) third-party library calls and 3) internal project calls? (importantly, &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#imports&quot; target=&quot;_blank&quot;&gt; this list corresponds to the order of imports in PEP-8&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;On standard libary calls - if there are methods I’m not familiar with, did I look at the official docs and find an example case? Did I sandbox the method in the shell and try a few simple test cases? If I’ve never worked with the language, am I developing a familiarity with the types / scoping / syntax, etc?&lt;/li&gt;
      &lt;li&gt;On third party library calls - same as above, but a few additions. Do I generally understand the point of the library? Does the library have a set of best practices? &lt;/li&gt;
      &lt;li&gt;If the library is a wrapper around a broader technology (e.g. &lt;a href=&quot;https://pypi.python.org/pypi/elasticsearch-dsl&quot; target=&quot;_blank&quot;&gt;elasticsearch-dsl&lt;/a&gt;), do I know what’s really going on beneath the language wrapper? For instance, if I’m using an API wrapper, can I reproduce what the wrapper is doing via &lt;code&gt;curl&lt;/code&gt;? If the library is totally foreign to me and I’m guessing at what it may do, do I need to purchase an O’Reilly book or spend an hour or so perusing the docs / tutorials / etc.? &lt;/li&gt;
      &lt;li&gt;One more on libraries - is the library the latest version or an older one? Is the version frozen? Should it be if it’s not?&lt;/li&gt;
      &lt;li&gt;On internal project calls - are these calls self-explanatory or is there a history around what’s going on I need to be aware of? Have I turned on annotations in whatever IDE I’m using (or &lt;code&gt; git blame &lt;/code&gt; if not using an IDE) and tried to understand the related commits?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If the language I’m working in is dynamically typed, do I have an appreciation for which types are being handled? Am I sight reading or actually setting breakpoints and confirming my intuition is correct?&lt;/li&gt;
  &lt;li&gt;Would I have done anything differently from an architectural perspective (throwing aside style or organization)? Are there risks in whatever I’m reviewing that the use-case if one-off and will have to be totally ripped out and rebuilt in the future?&lt;/li&gt;
  &lt;li&gt;If I’m making suggestions, are they actually good ones in that they 1) improve performance, 2) improve readability and 3) allow for easy building on top of whatever I’m reviewing?&lt;/li&gt;
  &lt;li&gt;If I’m making stylistic suggestions, does the linter need to be changed so it picks them up?&lt;/li&gt;
  &lt;li&gt;If I’m making organizational suggestions (method extraction, refactoring something into a module, etc.), am I simply shifting pieces around or actually making the project more maintainable in the long-term?&lt;/li&gt;
  &lt;li&gt;If I see something I really like or find interesting, did I file it away for future reference? Am I making sure to go back to this reference over time and trying to implement the patterns in it?&lt;/li&gt;
  &lt;li&gt;Do I have a strong understanding of how to deploy this code? What differences need to be taken into account when thinking about non-local environments?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wrote this list mainly so I could review it for my own reference, but I’d love for it to be useful to other people. I know I’m missing stuff and would love for this post to grow over time - shoot me an email at &lt;a href=&quot;mailto:ben.brostoff@gmail.com&quot;&gt; ben.brostoff@gmail.com&lt;/a&gt; with suggestions.	 &lt;/p&gt;

&lt;p&gt;** I think the original influence for the question above was &lt;a href=&quot;http://www.scotthyoung.com/learnonsteroids/grab/TranscriptFeynman.pdf&quot; target=&quot;_blank&quot;&gt;The Feynman Technique.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate>
        <link>http://benbrostoff.github.io//2015/12/02/Reading-Code/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2015/12/02/Reading-Code/</guid>
      </item>
    
      <item>
        <title>Automation Via Aliasing and Bash</title>
        <description>&lt;p&gt;I’ve been trying to make a concerted effort recently to automate more stuff. Working on a side project or open source project you haven’t touched in a while I’ve found can be annoying to get back into - first navigate to the directory, run a few tasks to set up the DB, install dependencies, pull from master, etc.&lt;/p&gt;

&lt;p&gt;With that in mind, I’ve taken to some aggressive aliasing on a few side projects to get to the fun stuff more quickly. I thought I’d jot down a few interesting takeways from the experience.&lt;/p&gt;

&lt;p&gt;All of the below assume you have a &lt;code&gt;.bash_profile&lt;/code&gt; set up. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On your home setup, it’s worth having aliases to navigate to a project immediately. &lt;/li&gt;
  &lt;li&gt;For setup tasks, it’s tempting to chain together a bunch of terminal commands with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, but bash functions I’ve found make for easier edits in the future and are more elegant as well.
&lt;script src=&quot;https://gist.github.com/BenBrostoff/398a5ca5397d6a950e64.js&quot;&gt;&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;For anything that involves sshing into another machine, it’s nice to alias:
&lt;script src=&quot;https://gist.github.com/BenBrostoff/dfa397492f727862ccc5.js&quot;&gt;&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Finally, I like having easy access to my &lt;code&gt; .bash_profile &lt;/code&gt;, so it makes sense for me to alias the following:
&lt;script src=&quot;https://gist.github.com/BenBrostoff/e455104c9d487cfdbb11.js&quot;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I admit a reasonable knock against aliasing is that when you move over to another machine, you’re a fish out of water. However, I’d like to believe if I take a few minutes every month to review my &lt;code&gt; .bash_profile &lt;/code&gt;, I can partially mitigate this risk.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 00:00:00 +0000</pubDate>
        <link>http://benbrostoff.github.io//2015/08/23/Automating-Via-Alias-And-Bash/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2015/08/23/Automating-Via-Alias-And-Bash/</guid>
      </item>
    
      <item>
        <title>Languages and Opinions</title>
        <description>&lt;p&gt;I find a lot of my preferences often are based on what I’ve been exposed to. If given a choice, I’d prefer to program something in Python rather than in Haskell because I have many, many times more hours of experience in the former. &lt;/p&gt;

&lt;p&gt;The risk of this inevitable correlation between preferences and exposure is that prefences and norms begin to overlap with eachother. An example - while working in Ruby the other day, something along the lines of the following happened:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/7ef3a4056787142b1265.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I must admit my first reaction here was annoyance with Ruby. This annoyance was a reaction to feeling wronged by the &lt;code&gt;NameError&lt;/code&gt; in front of me. As consolation, I needed to prove the same code would execute in Python, which it did:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/BenBrostoff/5e261bd7317391c69e74.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Differences in languages like this one seem to me to be the beginnings of endlessly long programming language debates that are always normative in nature - “How should things be?” These debates are where my own preferences are sometimes revealed as my desired norms, and, by extension, my preferred norms are what I have been exposed to. Admittedly, sometimes my preferred norms are a reaction &lt;em&gt;against&lt;/em&gt; what I have been exposed to (perhaps this is more common in general, considering all the complaining about the shortcomings of, say, JavaScript). &lt;/p&gt;

&lt;p&gt;In the above example, there are strong debates on both sides for whether languages should allow local variables declared outside the body of a method to have scope that extends inside the body of a method. Language designers have thought far more about this debate than I have. I am merely a language consumer.&lt;/p&gt;

&lt;p&gt;In a way, until we create tools ourselves, our opinions on existing tools are limited by what we have and have not been exposed to. I can easily see a scenario where, had I needed to fix a troublesome bug related to a scoping issue, I would be equally annoyed that Python did not raise an error on the above example. &lt;/p&gt;

&lt;p&gt;Thus, it seems to me the best way to avoid forming malformed opinions is to gain exposure and make tools.   &lt;/p&gt;
</description>
        <pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate>
        <link>http://benbrostoff.github.io//2015/04/18/Languages/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2015/04/18/Languages/</guid>
      </item>
    
      <item>
        <title>Resolutions by Type</title>
        <description>&lt;p&gt;I posted thoughts on &lt;a href=&quot;http://benbrostoff.github.io/2014/12/28/Resolution/&quot; target=&quot;_blank&quot;&gt; improving as a programmer &lt;/a&gt; in 2015 a few days back, but thought I would post my complete resolutions so I can reference them come 12/31/2015. &lt;a href=&quot;http://blog.fogus.me/&quot; target=&quot;_blank&quot;&gt;Fogus&lt;/a&gt; has an awesome tradition on his blog of posting “The best things and stuff of [Year]” going back to 2010, so I think it would be cool to emulate that idea with resolutions and reflections on whether those resolutions were met or not. Here we go, by type: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attitude&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Keep this quote in mind every day. From Marcus Aurelius in &lt;a href=&quot;http://www.amazon.com/Meditations-New-Translation-Marcus-Aurelius/dp/0812968255&quot; target=&quot;_blank&quot;&gt;Meditations&lt;/a&gt;, Book 2.5:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
Concentrate every minute... on doing what&#39;s in front of you with precise and genuine seriousness, tenderly, willingly, with justice. And on freeing yourself from all other distractions. Yes, you can - if you do everything as if it were the last thing you were doing in your life, and stop being aimless, stop letting your emotions override what your mind tells you, stop being hypocritical, self-centered, irritable. You see how few things you have to do to live a satisfying and relevant life?
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Craft&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Program every day&lt;/li&gt;
  &lt;li&gt;Blog every month with a quality post&lt;/li&gt;
  &lt;li&gt;Read cover to cover &lt;a href=&quot;http://www.amazon.com/Understanding-Computation-Machines-Impossible-Programs/dp/1449329276&quot; target=&quot;_blank&quot;&gt;Understanding Computation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Study Haskell and Lisp in concert on weekends, under the theory that &lt;a href=&quot;http://lemire.me/blog/archives/2014/12/30/how-to-learn-efficiently/&quot; target=&quot;_blank&quot;&gt;interleaved study trumps mass study&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Review &lt;a href=&quot;https://github.com/thomasahle/sunfish&quot; target=&quot;_blank&quot;&gt;Sunfish&lt;/a&gt; in its entirety and blog on it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Fitness (Body and Mind)&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Eradicate sugar intake, sans social occassions &lt;/li&gt;
  &lt;li&gt;20 minutes+ of physical activity, 5+ days a week&lt;/li&gt;
  &lt;li&gt;Meditate 5+ minutes every day  &lt;/li&gt;
  &lt;li&gt;Read 20+ minutes every day&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Memorize a 52 card deck in &amp;lt; 5 minutes&lt;/li&gt;
  &lt;li&gt;Complete the Rubik’s cube in &amp;lt; 5 minutes&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
        <link>http://benbrostoff.github.io//2015/01/01/Resolutions-by-Type/</link>
        <guid isPermaLink="true">http://benbrostoff.github.io//2015/01/01/Resolutions-by-Type/</guid>
      </item>
    
  </channel>
</rss>